//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class DataTable_IconRecordWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(DataTable.IconRecord), typeof(System.Object));
		L.RegFunction("Init", Init);
		L.RegFunction("GetField", GetField);
		L.RegFunction("New", _CreateDataTable_IconRecord);
		L.RegFunction("__tostring", ToLua.op_ToString);
		L.RegVar("__TableName", get___TableName, set___TableName);
		L.RegVar("Id", get_Id, null);
		L.RegVar("Atlas", get_Atlas, null);
		L.RegVar("Sprite", get_Sprite, null);
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int _CreateDataTable_IconRecord(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 0)
			{
				DataTable.IconRecord obj = new DataTable.IconRecord();
				ToLua.PushObject(L, obj);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to ctor method: DataTable.IconRecord.New");
			}
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Init(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			DataTable.IconRecord obj = (DataTable.IconRecord)ToLua.CheckObject(L, 1, typeof(DataTable.IconRecord));
			string[] arg0 = ToLua.CheckStringArray(L, 2);
			obj.Init(arg0);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetField(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			DataTable.IconRecord obj = (DataTable.IconRecord)ToLua.CheckObject(L, 1, typeof(DataTable.IconRecord));
			string arg0 = ToLua.CheckString(L, 2);
			object o = obj.GetField(arg0);
			ToLua.Push(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get___TableName(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushstring(L, DataTable.IconRecord.__TableName);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Id(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			DataTable.IconRecord obj = (DataTable.IconRecord)o;
			int ret = obj.Id;
			LuaDLL.lua_pushinteger(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index Id on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Atlas(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			DataTable.IconRecord obj = (DataTable.IconRecord)o;
			string ret = obj.Atlas;
			LuaDLL.lua_pushstring(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index Atlas on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Sprite(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			DataTable.IconRecord obj = (DataTable.IconRecord)o;
			string ret = obj.Sprite;
			LuaDLL.lua_pushstring(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index Sprite on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set___TableName(IntPtr L)
	{
		try
		{
			string arg0 = ToLua.CheckString(L, 2);
			DataTable.IconRecord.__TableName = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}
}

