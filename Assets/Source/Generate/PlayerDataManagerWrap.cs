//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class PlayerDataManagerWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(PlayerDataManager), typeof(Singleton<PlayerDataManager>));
		L.RegFunction("AddBagItemCount", AddBagItemCount);
		L.RegFunction("ApplyAcitvityCompensate", ApplyAcitvityCompensate);
		L.RegFunction("ApplyActivityState", ApplyActivityState);
		L.RegFunction("ApplyBags", ApplyBags);
		L.RegFunction("ApplyBooks", ApplyBooks);
		L.RegFunction("ApplyCityData", ApplyCityData);
		L.RegFunction("ApplyEquipDurableCoroutine", ApplyEquipDurableCoroutine);
		L.RegFunction("ApplyExtData", ApplyExtData);
		L.RegFunction("ApplyExtData64", ApplyExtData64);
		L.RegFunction("ApplyFlagData", ApplyFlagData);
		L.RegFunction("ApplyMails", ApplyMails);
		L.RegFunction("ApplyMissions", ApplyMissions);
		L.RegFunction("ApplyPlayerInfo", ApplyPlayerInfo);
		L.RegFunction("ApplyQueueData", ApplyQueueData);
		L.RegFunction("ApplySkills", ApplySkills);
		L.RegFunction("ApplyTeam", ApplyTeam);
		L.RegFunction("ApplyTrading", ApplyTrading);
		L.RegFunction("AttrConvert", AttrConvert);
		L.RegFunction("BagItemCountChange", BagItemCountChange);
		L.RegFunction("ChangeAttributeHp", ChangeAttributeHp);
		L.RegFunction("ChangeBagIdToEquipType", ChangeBagIdToEquipType);
		L.RegFunction("ChangeEquipTypeToPart", ChangeEquipTypeToPart);
		L.RegFunction("ChangePkModel", ChangePkModel);
		L.RegFunction("CheckDungeonEnter", CheckDungeonEnter);
		L.RegFunction("CheckEquipDurable", CheckEquipDurable);
		L.RegFunction("CheckItemEquip", CheckItemEquip);
		L.RegFunction("CheckLoginApplyState", CheckLoginApplyState);
		L.RegFunction("CheckSameTeam", CheckSameTeam);
		L.RegFunction("CheckSameUnion", CheckSameUnion);
		L.RegFunction("CloseCharacterPopMenu", CloseCharacterPopMenu);
		L.RegFunction("CompareEquips", CompareEquips);
		L.RegFunction("CreateAttributeSync", CreateAttributeSync);
		L.RegFunction("CreateResourcesSync", CreateResourcesSync);
		L.RegFunction("CreateSysnc", CreateSysnc);
		L.RegFunction("ElfAttrConvert", ElfAttrConvert);
		L.RegFunction("GetBagItemByItemId", GetBagItemByItemId);
		L.RegFunction("EnumBagItem", EnumBagItem);
		L.RegFunction("EnumEquip", EnumEquip);
		L.RegFunction("EquipDurableBroken", EquipDurableBroken);
		L.RegFunction("FindEquipedEquips", FindEquipedEquips);
		L.RegFunction("FindWorstEquip", FindWorstEquip);
		L.RegFunction("FindWorstEquipIndex", FindWorstEquipIndex);
		L.RegFunction("FixAttrubuteRatio", FixAttrubuteRatio);
		L.RegFunction("ForeachEquip", ForeachEquip);
		L.RegFunction("GainNewItem", GainNewItem);
		L.RegFunction("GainNewPet", GainNewPet);
		L.RegFunction("GetAttrFightPoint", GetAttrFightPoint);
		L.RegFunction("GetAttribute", GetAttribute);
		L.RegFunction("GetBag", GetBag);
		L.RegFunction("GetBagItemFightPoint", GetBagItemFightPoint);
		L.RegFunction("GetBaseValueRef", GetBaseValueRef);
		L.RegFunction("GetBookGropEnable", GetBookGropEnable);
		L.RegFunction("GetBountyBookEnable", GetBountyBookEnable);
		L.RegFunction("GetCharacterBaseData", GetCharacterBaseData);
		L.RegFunction("GetCharacterSimpleInfo", GetCharacterSimpleInfo);
		L.RegFunction("GetCurrentEquipSkillCount", GetCurrentEquipSkillCount);
		L.RegFunction("GetData", GetData);
		L.RegFunction("GetElfAttrFightPoint", GetElfAttrFightPoint);
		L.RegFunction("GetElfFightPoint", GetElfFightPoint);
		L.RegFunction("GetEquipAttributeFix", GetEquipAttributeFix);
		L.RegFunction("GetEquipData", GetEquipData);
		L.RegFunction("GetExData64", GetExData64);
		L.RegFunction("GetExp", GetExp);
		L.RegFunction("GetFiendInfo", GetFiendInfo);
		L.RegFunction("GetFightPoint", GetFightPoint);
		L.RegFunction("GetGainItemHintEntryArgs", GetGainItemHintEntryArgs);
		L.RegFunction("GetGuid", GetGuid);
		L.RegFunction("GetItem", GetItem);
		L.RegFunction("GetItemCount", GetItemCount);
		L.RegFunction("GetItemTotalCount", GetItemTotalCount);
		L.RegFunction("GetLevel", GetLevel);
		L.RegFunction("GetLockIndex", GetLockIndex);
		L.RegFunction("GetLoginApplyState", GetLoginApplyState);
		L.RegFunction("GetName", GetName);
		L.RegFunction("GetNormalSkill", GetNormalSkill);
		L.RegFunction("GetPkModel", GetPkModel);
		L.RegFunction("GetPkValue", GetPkValue);
		L.RegFunction("GetRemaindCapacity", GetRemaindCapacity);
		L.RegFunction("GetRes", GetRes);
		L.RegFunction("GetRoleId", GetRoleId);
		L.RegFunction("GetSkillLevel", GetSkillLevel);
		L.RegFunction("GetSkillNoWeapon", GetSkillNoWeapon);
		L.RegFunction("GetTalentLayer", GetTalentLayer);
		L.RegFunction("GetTeamMemberName", GetTeamMemberName);
		L.RegFunction("GetMaxBuyCount", GetMaxBuyCount);
		L.RegFunction("GetNeedBuyCount", GetNeedBuyCount);
		L.RegFunction("GetWingId", GetWingId);
		L.RegFunction("InitBagData", InitBagData);
		L.RegFunction("InitExtDataEvent", InitExtDataEvent);
		L.RegFunction("InitQueneData", InitQueneData);
		L.RegFunction("IsInFubenScnen", IsInFubenScnen);
		L.RegFunction("IsInPvPScnen", IsInPvPScnen);
		L.RegFunction("IsSkillTalentMax", IsSkillTalentMax);
		L.RegFunction("ItemOrEquipCanUse", ItemOrEquipCanUse);
		L.RegFunction("LearnSkill", LearnSkill);
		L.RegFunction("ModifyEquipAttribute", ModifyEquipAttribute);
		L.RegFunction("NotifyBagItemCountChanged", NotifyBagItemCountChanged);
		L.RegFunction("NotifyMatchingData", NotifyMatchingData);
		L.RegFunction("OnInitLevel", OnInitLevel);
		L.RegFunction("OnUpdataResourcesChange", OnUpdataResourcesChange);
		L.RegFunction("PlayFlyItem", PlayFlyItem);
		L.RegFunction("RefrehEquipPriority", RefrehEquipPriority);
		L.RegFunction("RefreshEquipBagStatus", RefreshEquipBagStatus);
		L.RegFunction("RefreshEquipStatus", RefreshEquipStatus);
		L.RegFunction("RefreshMedicineWarn", RefreshMedicineWarn);
		L.RegFunction("RefrshEquipDurable", RefrshEquipDurable);
		L.RegFunction("RemoveBagItemCount", RemoveBagItemCount);
		L.RegFunction("RemoveSelectTarget", RemoveSelectTarget);
		L.RegFunction("ResetLoginApplyState", ResetLoginApplyState);
		L.RegFunction("ResetSelectTarget", ResetSelectTarget);
		L.RegFunction("ResGainTip", ResGainTip);
		L.RegFunction("SetAttribute", SetAttribute);
		L.RegFunction("SetBookGroupEnable", SetBookGroupEnable);
		L.RegFunction("SetBountyBookEnable", SetBountyBookEnable);
		L.RegFunction("SetCanShowTarget", SetCanShowTarget);
		L.RegFunction("SetExData64", SetExData64);
		L.RegFunction("SetLoginApplyState", SetLoginApplyState);
		L.RegFunction("SetNoWeaponSkill", SetNoWeaponSkill);
		L.RegFunction("SetPkModel", SetPkModel);
		L.RegFunction("SetPkValue", SetPkValue);
		L.RegFunction("SetRes", SetRes);
		L.RegFunction("SetSelectTargetData", SetSelectTargetData);
		L.RegFunction("ShowCharacterPopMenu", ShowCharacterPopMenu);
		L.RegFunction("ShowItemInfoGet", ShowItemInfoGet);
		L.RegFunction("ShowPlayerInfo", ShowPlayerInfo);
		L.RegFunction("SkillTalentPointChange", SkillTalentPointChange);
		L.RegFunction("SyncResources", SyncResources);
		L.RegFunction("UpdateBagData", UpdateBagData);
		L.RegFunction("UpdateEquipData", UpdateEquipData);
		L.RegFunction("Init", Init);
		L.RegFunction("Tick", Tick);
		L.RegFunction("Reset", Reset);
		L.RegFunction("Destroy", Destroy);
		L.RegFunction("GetFlag", GetFlag);
		L.RegFunction("SetFlag", SetFlag);
		L.RegFunction("GetExData", GetExData);
		L.RegFunction("SetExData", SetExData);
		L.RegFunction("SetExDataNet", SetExDataNet);
		L.RegFunction("SetFlagNet", SetFlagNet);
		L.RegFunction("CheckCondition", CheckCondition);
		L.RegFunction("InitTrigger", InitTrigger);
		L.RegFunction("InitRewardGet", InitRewardGet);
		L.RegFunction("SetNoticeCount", SetNoticeCount);
		L.RegFunction("SetNoticeFlag", SetNoticeFlag);
		L.RegFunction("RefleshRewardInfo", RefleshRewardInfo);
		L.RegFunction("RewardNoticeReflesh", RewardNoticeReflesh);
		L.RegFunction("RewardGotoUI", RewardGotoUI);
		L.RegFunction("GetAchievementPoint", GetAchievementPoint);
		L.RegFunction("New", _CreatePlayerDataManager);
		L.RegFunction("__tostring", ToLua.op_ToString);
		L.RegVar("_battleCityDic", get__battleCityDic, set__battleCityDic);
		L.RegVar("ActivityState", get_ActivityState, set_ActivityState);
		L.RegVar("AttributeFix", get_AttributeFix, set_AttributeFix);
		L.RegVar("BagIdToEquipType", get_BagIdToEquipType, set_BagIdToEquipType);
		L.RegVar("BattleName", get_BattleName, set_BattleName);
		L.RegVar("BattleUnionDataModel", get_BattleUnionDataModel, set_BattleUnionDataModel);
		L.RegVar("BattleMishiMaster", get_BattleMishiMaster, set_BattleMishiMaster);
		L.RegVar("BattleUnionMaster", get_BattleUnionMaster, set_BattleUnionMaster);
		L.RegVar("CareeridToStatsPointIndex", get_CareeridToStatsPointIndex, set_CareeridToStatsPointIndex);
		L.RegVar("CharacterLists", get_CharacterLists, set_CharacterLists);
		L.RegVar("EquipTypeToPart", get_EquipTypeToPart, set_EquipTypeToPart);
		L.RegVar("FirstChargeData", get_FirstChargeData, set_FirstChargeData);
		L.RegVar("LastLoginServerId", get_LastLoginServerId, set_LastLoginServerId);
		L.RegVar("mAllSkills", get_mAllSkills, set_mAllSkills);
		L.RegVar("mAllTalents", get_mAllTalents, set_mAllTalents);
		L.RegVar("mInitBaseAttr", get_mInitBaseAttr, set_mInitBaseAttr);
		L.RegVar("mPickIntervalTrigger", get_mPickIntervalTrigger, set_mPickIntervalTrigger);
		L.RegVar("mSkillTalent", get_mSkillTalent, set_mSkillTalent);
		L.RegVar("mUnionMembers", get_mUnionMembers, set_mUnionMembers);
		L.RegVar("NoticeData", get_NoticeData, set_NoticeData);
		L.RegVar("OpenTime", get_OpenTime, set_OpenTime);
		L.RegVar("SelectedRoleIndex", get_SelectedRoleIndex, set_SelectedRoleIndex);
		L.RegVar("ServerName", get_ServerName, set_ServerName);
		L.RegVar("CharacterFoundTime", get_CharacterFoundTime, set_CharacterFoundTime);
		L.RegVar("ServerNames", get_ServerNames, set_ServerNames);
		L.RegVar("TbVip", get_TbVip, set_TbVip);
		L.RegVar("TeamDataModel", get_TeamDataModel, set_TeamDataModel);
		L.RegVar("TitleList", get_TitleList, set_TitleList);
		L.RegVar("TotalBountyCount", get_TotalBountyCount, set_TotalBountyCount);
		L.RegVar("TotalGroupCount", get_TotalGroupCount, set_TotalGroupCount);
		L.RegVar("UidForPay", get_UidForPay, set_UidForPay);
		L.RegVar("WeakNoticeData", get_WeakNoticeData, set_WeakNoticeData);
		L.RegVar("NociceFlag", get_NociceFlag, set_NociceFlag);
		L.RegVar("RewardNotice", get_RewardNotice, set_RewardNotice);
		L.RegVar("RewardGiftRecord", get_RewardGiftRecord, set_RewardGiftRecord);
		L.RegVar("RewardFastKeySortId", get_RewardFastKeySortId, set_RewardFastKeySortId);
		L.RegVar("NoticeStrToSort", get_NoticeStrToSort, set_NoticeStrToSort);
		L.RegVar("AccountDataModel", get_AccountDataModel, set_AccountDataModel);
		L.RegVar("BookGropData", get_BookGropData, null);
		L.RegVar("BountyBooks", get_BountyBooks, null);
		L.RegVar("CharacterGuid", get_CharacterGuid, set_CharacterGuid);
		L.RegVar("ExtData", get_ExtData, null);
		L.RegVar("ExtData64", get_ExtData64, null);
		L.RegVar("FlagData", get_FlagData, null);
		L.RegVar("FlagInited", get_FlagInited, null);
		L.RegVar("Guid", get_Guid, set_Guid);
		L.RegVar("IsLevelInited", get_IsLevelInited, null);
		L.RegVar("Password", get_Password, set_Password);
		L.RegVar("PlayerDataModel", get_PlayerDataModel, set_PlayerDataModel);
		L.RegVar("ReviewState", get_ReviewState, set_ReviewState);
		L.RegVar("SelectTargetData", get_SelectTargetData, set_SelectTargetData);
		L.RegVar("ServerId", get_ServerId, set_ServerId);
		L.RegVar("UserName", get_UserName, set_UserName);
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int _CreatePlayerDataManager(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 0)
			{
				PlayerDataManager obj = new PlayerDataManager();
				ToLua.PushObject(L, obj);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to ctor method: PlayerDataManager.New");
			}
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int AddBagItemCount(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			PlayerDataManager obj = (PlayerDataManager)ToLua.CheckObject(L, 1, typeof(PlayerDataManager));
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			int arg1 = (int)LuaDLL.luaL_checknumber(L, 3);
			ClientDataModel.TotalCount o = obj.AddBagItemCount(arg0, arg1);
			ToLua.PushObject(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ApplyAcitvityCompensate(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			PlayerDataManager obj = (PlayerDataManager)ToLua.CheckObject(L, 1, typeof(PlayerDataManager));
			obj.ApplyAcitvityCompensate();
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ApplyActivityState(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			PlayerDataManager obj = (PlayerDataManager)ToLua.CheckObject(L, 1, typeof(PlayerDataManager));
			obj.ApplyActivityState();
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ApplyBags(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			PlayerDataManager obj = (PlayerDataManager)ToLua.CheckObject(L, 1, typeof(PlayerDataManager));
			obj.ApplyBags();
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ApplyBooks(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			PlayerDataManager obj = (PlayerDataManager)ToLua.CheckObject(L, 1, typeof(PlayerDataManager));
			obj.ApplyBooks();
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ApplyCityData(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			PlayerDataManager obj = (PlayerDataManager)ToLua.CheckObject(L, 1, typeof(PlayerDataManager));
			obj.ApplyCityData();
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ApplyEquipDurableCoroutine(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			PlayerDataManager obj = (PlayerDataManager)ToLua.CheckObject(L, 1, typeof(PlayerDataManager));
			System.Collections.IEnumerator o = obj.ApplyEquipDurableCoroutine();
			ToLua.Push(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ApplyExtData(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			PlayerDataManager obj = (PlayerDataManager)ToLua.CheckObject(L, 1, typeof(PlayerDataManager));
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			obj.ApplyExtData(arg0);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ApplyExtData64(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			PlayerDataManager obj = (PlayerDataManager)ToLua.CheckObject(L, 1, typeof(PlayerDataManager));
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			obj.ApplyExtData64(arg0);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ApplyFlagData(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			PlayerDataManager obj = (PlayerDataManager)ToLua.CheckObject(L, 1, typeof(PlayerDataManager));
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			obj.ApplyFlagData(arg0);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ApplyMails(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			PlayerDataManager obj = (PlayerDataManager)ToLua.CheckObject(L, 1, typeof(PlayerDataManager));
			obj.ApplyMails();
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ApplyMissions(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			PlayerDataManager obj = (PlayerDataManager)ToLua.CheckObject(L, 1, typeof(PlayerDataManager));
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			obj.ApplyMissions(arg0);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ApplyPlayerInfo(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			PlayerDataManager obj = (PlayerDataManager)ToLua.CheckObject(L, 1, typeof(PlayerDataManager));
			ulong arg0 = LuaDLL.tolua_checkuint64(L, 2);
			System.Action<DataContract.PlayerInfoMsg> arg1 = null;
			LuaTypes funcType3 = LuaDLL.lua_type(L, 3);

			if (funcType3 != LuaTypes.LUA_TFUNCTION)
			{
				 arg1 = (System.Action<DataContract.PlayerInfoMsg>)ToLua.CheckObject(L, 3, typeof(System.Action<DataContract.PlayerInfoMsg>));
			}
			else
			{
				LuaFunction func = ToLua.ToLuaFunction(L, 3);
				arg1 = DelegateFactory.CreateDelegate(typeof(System.Action<DataContract.PlayerInfoMsg>), func) as System.Action<DataContract.PlayerInfoMsg>;
			}

			obj.ApplyPlayerInfo(arg0, arg1);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ApplyQueueData(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			PlayerDataManager obj = (PlayerDataManager)ToLua.CheckObject(L, 1, typeof(PlayerDataManager));
			obj.ApplyQueueData();
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ApplySkills(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			PlayerDataManager obj = (PlayerDataManager)ToLua.CheckObject(L, 1, typeof(PlayerDataManager));
			obj.ApplySkills();
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ApplyTeam(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			PlayerDataManager obj = (PlayerDataManager)ToLua.CheckObject(L, 1, typeof(PlayerDataManager));
			obj.ApplyTeam();
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ApplyTrading(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			PlayerDataManager obj = (PlayerDataManager)ToLua.CheckObject(L, 1, typeof(PlayerDataManager));
			obj.ApplyTrading();
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int AttrConvert(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 4);
			PlayerDataManager obj = (PlayerDataManager)ToLua.CheckObject(L, 1, typeof(PlayerDataManager));
			System.Collections.Generic.Dictionary<int,int> arg0 = (System.Collections.Generic.Dictionary<int,int>)ToLua.CheckObject(L, 2, typeof(System.Collections.Generic.Dictionary<int,int>));
			int[] arg1 = ToLua.CheckNumberArray<int>(L, 3);
			int[] arg2 = ToLua.CheckNumberArray<int>(L, 4);
			obj.AttrConvert(arg0, arg1, arg2);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int BagItemCountChange(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			PlayerDataManager obj = (PlayerDataManager)ToLua.CheckObject(L, 1, typeof(PlayerDataManager));
			DataContract.BagsChangeData arg0 = (DataContract.BagsChangeData)ToLua.CheckObject(L, 2, typeof(DataContract.BagsChangeData));
			obj.BagItemCountChange(arg0);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ChangeAttributeHp(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			PlayerDataManager obj = (PlayerDataManager)ToLua.CheckObject(L, 1, typeof(PlayerDataManager));
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			obj.ChangeAttributeHp(arg0);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ChangeBagIdToEquipType(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			PlayerDataManager obj = (PlayerDataManager)ToLua.CheckObject(L, 1, typeof(PlayerDataManager));
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			int arg1 = (int)LuaDLL.luaL_checknumber(L, 3);
			int o = obj.ChangeBagIdToEquipType(arg0, arg1);
			LuaDLL.lua_pushinteger(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ChangeEquipTypeToPart(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			PlayerDataManager obj = (PlayerDataManager)ToLua.CheckObject(L, 1, typeof(PlayerDataManager));
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			int o = obj.ChangeEquipTypeToPart(arg0);
			LuaDLL.lua_pushinteger(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ChangePkModel(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			PlayerDataManager obj = (PlayerDataManager)ToLua.CheckObject(L, 1, typeof(PlayerDataManager));
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			obj.ChangePkModel(arg0);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int CheckDungeonEnter(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			PlayerDataManager obj = (PlayerDataManager)ToLua.CheckObject(L, 1, typeof(PlayerDataManager));
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			bool o = obj.CheckDungeonEnter(arg0);
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int CheckEquipDurable(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			PlayerDataManager obj = (PlayerDataManager)ToLua.CheckObject(L, 1, typeof(PlayerDataManager));
			obj.CheckEquipDurable();
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int CheckItemEquip(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 2 && TypeChecker.CheckTypes(L, 1, typeof(PlayerDataManager), typeof(int)))
			{
				PlayerDataManager obj = (PlayerDataManager)ToLua.ToObject(L, 1);
				int arg0 = (int)LuaDLL.lua_tonumber(L, 2);
				eEquipLimit o = obj.CheckItemEquip(arg0);
				ToLua.Push(L, o);
				return 1;
			}
			else if (count == 3 && TypeChecker.CheckTypes(L, 1, typeof(PlayerDataManager), typeof(DataTable.ItemBaseRecord), typeof(DataTable.EquipBaseRecord)))
			{
				PlayerDataManager obj = (PlayerDataManager)ToLua.ToObject(L, 1);
				DataTable.ItemBaseRecord arg0 = (DataTable.ItemBaseRecord)ToLua.ToObject(L, 2);
				DataTable.EquipBaseRecord arg1 = (DataTable.EquipBaseRecord)ToLua.ToObject(L, 3);
				eEquipLimit o = obj.CheckItemEquip(arg0, arg1);
				ToLua.Push(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: PlayerDataManager.CheckItemEquip");
			}
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int CheckLoginApplyState(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			PlayerDataManager obj = (PlayerDataManager)ToLua.CheckObject(L, 1, typeof(PlayerDataManager));
			bool o = obj.CheckLoginApplyState();
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int CheckSameTeam(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			PlayerDataManager obj = (PlayerDataManager)ToLua.CheckObject(L, 1, typeof(PlayerDataManager));
			ulong arg0 = LuaDLL.tolua_checkuint64(L, 2);
			bool o = obj.CheckSameTeam(arg0);
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int CheckSameUnion(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			PlayerDataManager obj = (PlayerDataManager)ToLua.CheckObject(L, 1, typeof(PlayerDataManager));
			ulong arg0 = LuaDLL.tolua_checkuint64(L, 2);
			bool o = obj.CheckSameUnion(arg0);
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int CloseCharacterPopMenu(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			PlayerDataManager obj = (PlayerDataManager)ToLua.CheckObject(L, 1, typeof(PlayerDataManager));
			obj.CloseCharacterPopMenu();
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int CompareEquips(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 4);
			PlayerDataManager obj = (PlayerDataManager)ToLua.CheckObject(L, 1, typeof(PlayerDataManager));
			ClientDataModel.BagItemDataModel arg0 = (ClientDataModel.BagItemDataModel)ToLua.CheckObject(L, 2, typeof(ClientDataModel.BagItemDataModel));
			ClientDataModel.BagItemDataModel arg1 = (ClientDataModel.BagItemDataModel)ToLua.CheckObject(L, 3, typeof(ClientDataModel.BagItemDataModel));
			int arg2;
			bool o = obj.CompareEquips(arg0, arg1, out arg2);
			LuaDLL.lua_pushboolean(L, o);
			LuaDLL.lua_pushinteger(L, arg2);
			return 2;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int CreateAttributeSync(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			PlayerDataManager obj = (PlayerDataManager)ToLua.CheckObject(L, 1, typeof(PlayerDataManager));
			ulong arg0 = LuaDLL.tolua_checkuint64(L, 2);
			obj.CreateAttributeSync(arg0);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int CreateResourcesSync(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			PlayerDataManager obj = (PlayerDataManager)ToLua.CheckObject(L, 1, typeof(PlayerDataManager));
			ulong arg0 = LuaDLL.tolua_checkuint64(L, 2);
			obj.CreateResourcesSync(arg0);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int CreateSysnc(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			PlayerDataManager obj = (PlayerDataManager)ToLua.CheckObject(L, 1, typeof(PlayerDataManager));
			ulong arg0 = LuaDLL.tolua_checkuint64(L, 2);
			obj.CreateSysnc(arg0);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ElfAttrConvert(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 4);
			PlayerDataManager obj = (PlayerDataManager)ToLua.CheckObject(L, 1, typeof(PlayerDataManager));
			System.Collections.Generic.Dictionary<int,int> arg0 = (System.Collections.Generic.Dictionary<int,int>)ToLua.CheckObject(L, 2, typeof(System.Collections.Generic.Dictionary<int,int>));
			int[] arg1 = ToLua.CheckNumberArray<int>(L, 3);
			int[] arg2 = ToLua.CheckNumberArray<int>(L, 4);
			obj.ElfAttrConvert(arg0, arg1, arg2);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetBagItemByItemId(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			PlayerDataManager obj = (PlayerDataManager)ToLua.CheckObject(L, 1, typeof(PlayerDataManager));
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			int arg1 = (int)LuaDLL.luaL_checknumber(L, 3);
			ClientDataModel.BagItemDataModel o = obj.GetBagItemByItemId(arg0, arg1);
			ToLua.PushObject(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int EnumBagItem(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			PlayerDataManager obj = (PlayerDataManager)ToLua.CheckObject(L, 1, typeof(PlayerDataManager));
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			System.Collections.Generic.IEnumerable<ClientDataModel.BagItemDataModel> o = obj.EnumBagItem(arg0);
			ToLua.PushObject(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int EnumEquip(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			PlayerDataManager obj = (PlayerDataManager)ToLua.CheckObject(L, 1, typeof(PlayerDataManager));
			System.Collections.Generic.IEnumerable<ClientDataModel.BagItemDataModel> o = obj.EnumEquip();
			ToLua.PushObject(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int EquipDurableBroken(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 4);
			PlayerDataManager obj = (PlayerDataManager)ToLua.CheckObject(L, 1, typeof(PlayerDataManager));
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			int arg1 = (int)LuaDLL.luaL_checknumber(L, 3);
			int arg2 = (int)LuaDLL.luaL_checknumber(L, 4);
			obj.EquipDurableBroken(arg0, arg1, arg2);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int FindEquipedEquips(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			PlayerDataManager obj = (PlayerDataManager)ToLua.CheckObject(L, 1, typeof(PlayerDataManager));
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			System.Collections.Generic.List<ClientDataModel.BagItemDataModel> o = obj.FindEquipedEquips(arg0);
			ToLua.PushObject(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int FindWorstEquip(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			PlayerDataManager obj = (PlayerDataManager)ToLua.CheckObject(L, 1, typeof(PlayerDataManager));
			ClientDataModel.BagItemDataModel arg0 = (ClientDataModel.BagItemDataModel)ToLua.CheckObject(L, 2, typeof(ClientDataModel.BagItemDataModel));
			ClientDataModel.BagItemDataModel o = obj.FindWorstEquip(arg0);
			ToLua.PushObject(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int FindWorstEquipIndex(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			PlayerDataManager obj = (PlayerDataManager)ToLua.CheckObject(L, 1, typeof(PlayerDataManager));
			System.Collections.Generic.List<ClientDataModel.BagItemDataModel> arg0 = (System.Collections.Generic.List<ClientDataModel.BagItemDataModel>)ToLua.CheckObject(L, 2, typeof(System.Collections.Generic.List<ClientDataModel.BagItemDataModel>));
			int o = obj.FindWorstEquipIndex(arg0);
			LuaDLL.lua_pushinteger(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int FixAttrubuteRatio(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 1);
			int arg1 = (int)LuaDLL.luaL_checknumber(L, 2);
			int o = PlayerDataManager.FixAttrubuteRatio(arg0, arg1);
			LuaDLL.lua_pushinteger(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ForeachEquip(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 2 && TypeChecker.CheckTypes(L, 1, typeof(PlayerDataManager), typeof(System.Action<ClientDataModel.BagItemDataModel>)))
			{
				PlayerDataManager obj = (PlayerDataManager)ToLua.ToObject(L, 1);
				System.Action<ClientDataModel.BagItemDataModel> arg0 = null;
				LuaTypes funcType2 = LuaDLL.lua_type(L, 2);

				if (funcType2 != LuaTypes.LUA_TFUNCTION)
				{
					 arg0 = (System.Action<ClientDataModel.BagItemDataModel>)ToLua.ToObject(L, 2);
				}
				else
				{
					LuaFunction func = ToLua.ToLuaFunction(L, 2);
					arg0 = DelegateFactory.CreateDelegate(typeof(System.Action<ClientDataModel.BagItemDataModel>), func) as System.Action<ClientDataModel.BagItemDataModel>;
				}

				obj.ForeachEquip(arg0);
				return 0;
			}
			else if (count == 3 && TypeChecker.CheckTypes(L, 1, typeof(PlayerDataManager), typeof(System.Collections.Generic.List<eEquipType>), typeof(System.Action<ClientDataModel.BagItemDataModel>)))
			{
				PlayerDataManager obj = (PlayerDataManager)ToLua.ToObject(L, 1);
				System.Collections.Generic.List<eEquipType> arg0 = (System.Collections.Generic.List<eEquipType>)ToLua.ToObject(L, 2);
				System.Action<ClientDataModel.BagItemDataModel> arg1 = null;
				LuaTypes funcType3 = LuaDLL.lua_type(L, 3);

				if (funcType3 != LuaTypes.LUA_TFUNCTION)
				{
					 arg1 = (System.Action<ClientDataModel.BagItemDataModel>)ToLua.ToObject(L, 3);
				}
				else
				{
					LuaFunction func = ToLua.ToLuaFunction(L, 3);
					arg1 = DelegateFactory.CreateDelegate(typeof(System.Action<ClientDataModel.BagItemDataModel>), func) as System.Action<ClientDataModel.BagItemDataModel>;
				}

				obj.ForeachEquip(arg0, arg1);
				return 0;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: PlayerDataManager.ForeachEquip");
			}
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GainNewItem(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 4);
			PlayerDataManager obj = (PlayerDataManager)ToLua.CheckObject(L, 1, typeof(PlayerDataManager));
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			int arg1 = (int)LuaDLL.luaL_checknumber(L, 3);
			int arg2 = (int)LuaDLL.luaL_checknumber(L, 4);
			obj.GainNewItem(arg0, arg1, arg2);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GainNewPet(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			PlayerDataManager obj = (PlayerDataManager)ToLua.CheckObject(L, 1, typeof(PlayerDataManager));
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			int arg1 = (int)LuaDLL.luaL_checknumber(L, 3);
			obj.GainNewPet(arg0, arg1);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetAttrFightPoint(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 4);
			PlayerDataManager obj = (PlayerDataManager)ToLua.CheckObject(L, 1, typeof(PlayerDataManager));
			System.Collections.Generic.Dictionary<int,int> arg0 = (System.Collections.Generic.Dictionary<int,int>)ToLua.CheckObject(L, 2, typeof(System.Collections.Generic.Dictionary<int,int>));
			int arg1 = (int)LuaDLL.luaL_checknumber(L, 3);
			int arg2 = (int)LuaDLL.luaL_checknumber(L, 4);
			int o = obj.GetAttrFightPoint(arg0, arg1, arg2);
			LuaDLL.lua_pushinteger(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetAttribute(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 2 && TypeChecker.CheckTypes(L, 1, typeof(PlayerDataManager), typeof(eAttributeType)))
			{
				PlayerDataManager obj = (PlayerDataManager)ToLua.ToObject(L, 1);
				eAttributeType arg0 = (eAttributeType)ToLua.ToObject(L, 2);
				int o = obj.GetAttribute(arg0);
				LuaDLL.lua_pushinteger(L, o);
				return 1;
			}
			else if (count == 2 && TypeChecker.CheckTypes(L, 1, typeof(PlayerDataManager), typeof(int)))
			{
				PlayerDataManager obj = (PlayerDataManager)ToLua.ToObject(L, 1);
				int arg0 = (int)LuaDLL.lua_tonumber(L, 2);
				int o = obj.GetAttribute(arg0);
				LuaDLL.lua_pushinteger(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: PlayerDataManager.GetAttribute");
			}
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetBag(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			PlayerDataManager obj = (PlayerDataManager)ToLua.CheckObject(L, 1, typeof(PlayerDataManager));
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			ClientDataModel.BagBaseDataModel o = obj.GetBag(arg0);
			ToLua.PushObject(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetBagItemFightPoint(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			PlayerDataManager obj = (PlayerDataManager)ToLua.CheckObject(L, 1, typeof(PlayerDataManager));
			ClientDataModel.BagItemDataModel arg0 = (ClientDataModel.BagItemDataModel)ToLua.CheckObject(L, 2, typeof(ClientDataModel.BagItemDataModel));
			int arg1 = (int)LuaDLL.luaL_checknumber(L, 3);
			int o = obj.GetBagItemFightPoint(arg0, arg1);
			LuaDLL.lua_pushinteger(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetBaseValueRef(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 4);
			PlayerDataManager obj = (PlayerDataManager)ToLua.CheckObject(L, 1, typeof(PlayerDataManager));
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			int arg1 = (int)LuaDLL.luaL_checknumber(L, 3);
			int arg2 = (int)LuaDLL.luaL_checknumber(L, 4);
			int o = obj.GetBaseValueRef(arg0, arg1, arg2);
			LuaDLL.lua_pushinteger(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetBookGropEnable(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			PlayerDataManager obj = (PlayerDataManager)ToLua.CheckObject(L, 1, typeof(PlayerDataManager));
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			int arg1 = (int)LuaDLL.luaL_checknumber(L, 3);
			bool o = obj.GetBookGropEnable(arg0, arg1);
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetBountyBookEnable(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			PlayerDataManager obj = (PlayerDataManager)ToLua.CheckObject(L, 1, typeof(PlayerDataManager));
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			bool o = obj.GetBountyBookEnable(arg0);
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetCharacterBaseData(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			PlayerDataManager obj = (PlayerDataManager)ToLua.CheckObject(L, 1, typeof(PlayerDataManager));
			ClientDataModel.CharacterBaseDataModel o = obj.GetCharacterBaseData();
			ToLua.PushObject(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetCharacterSimpleInfo(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			PlayerDataManager obj = (PlayerDataManager)ToLua.CheckObject(L, 1, typeof(PlayerDataManager));
			ulong arg0 = LuaDLL.tolua_checkuint64(L, 2);
			bool arg1 = LuaDLL.luaL_checkboolean(L, 3);
			DataContract.PlayerInfoMsg o = obj.GetCharacterSimpleInfo(arg0, arg1);
			ToLua.PushObject(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetCurrentEquipSkillCount(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			PlayerDataManager obj = (PlayerDataManager)ToLua.CheckObject(L, 1, typeof(PlayerDataManager));
			int o = obj.GetCurrentEquipSkillCount();
			LuaDLL.lua_pushinteger(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetData(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			PlayerDataManager obj = (PlayerDataManager)ToLua.CheckObject(L, 1, typeof(PlayerDataManager));
			DataContract.PlayerData o = obj.GetData();
			ToLua.PushObject(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetElfAttrFightPoint(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 4);
			PlayerDataManager obj = (PlayerDataManager)ToLua.CheckObject(L, 1, typeof(PlayerDataManager));
			System.Collections.Generic.Dictionary<int,int> arg0 = (System.Collections.Generic.Dictionary<int,int>)ToLua.CheckObject(L, 2, typeof(System.Collections.Generic.Dictionary<int,int>));
			int arg1 = (int)LuaDLL.luaL_checknumber(L, 3);
			int arg2 = (int)LuaDLL.luaL_checknumber(L, 4);
			int o = obj.GetElfAttrFightPoint(arg0, arg1, arg2);
			LuaDLL.lua_pushinteger(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetElfFightPoint(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 5);
			PlayerDataManager obj = (PlayerDataManager)ToLua.CheckObject(L, 1, typeof(PlayerDataManager));
			int[] arg0 = ToLua.CheckNumberArray<int>(L, 2);
			int[] arg1 = ToLua.CheckNumberArray<int>(L, 3);
			int arg2 = (int)LuaDLL.luaL_checknumber(L, 4);
			int arg3 = (int)LuaDLL.luaL_checknumber(L, 5);
			int o = obj.GetElfFightPoint(arg0, arg1, arg2, arg3);
			LuaDLL.lua_pushinteger(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetEquipAttributeFix(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			PlayerDataManager obj = (PlayerDataManager)ToLua.CheckObject(L, 1, typeof(PlayerDataManager));
			ClientDataModel.BagItemDataModel arg0 = (ClientDataModel.BagItemDataModel)ToLua.CheckObject(L, 2, typeof(ClientDataModel.BagItemDataModel));
			int arg1 = (int)LuaDLL.luaL_checknumber(L, 3);
			System.Collections.Generic.Dictionary<int,int> o = obj.GetEquipAttributeFix(arg0, arg1);
			ToLua.PushObject(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetEquipData(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			PlayerDataManager obj = (PlayerDataManager)ToLua.CheckObject(L, 1, typeof(PlayerDataManager));
			eEquipType arg0 = (eEquipType)ToLua.CheckObject(L, 2, typeof(eEquipType));
			ClientDataModel.BagItemDataModel o = obj.GetEquipData(arg0);
			ToLua.PushObject(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetExData64(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 1 && TypeChecker.CheckTypes(L, 1, typeof(PlayerDataManager)))
			{
				PlayerDataManager obj = (PlayerDataManager)ToLua.ToObject(L, 1);
				System.Collections.Generic.List<long> o = obj.GetExData64();
				ToLua.PushObject(L, o);
				return 1;
			}
			else if (count == 2 && TypeChecker.CheckTypes(L, 1, typeof(PlayerDataManager), typeof(int)))
			{
				PlayerDataManager obj = (PlayerDataManager)ToLua.ToObject(L, 1);
				int arg0 = (int)LuaDLL.lua_tonumber(L, 2);
				long o = obj.GetExData64(arg0);
				LuaDLL.tolua_pushint64(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: PlayerDataManager.GetExData64");
			}
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetExp(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			PlayerDataManager obj = (PlayerDataManager)ToLua.CheckObject(L, 1, typeof(PlayerDataManager));
			int o = obj.GetExp();
			LuaDLL.lua_pushinteger(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetFiendInfo(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			PlayerDataManager obj = (PlayerDataManager)ToLua.CheckObject(L, 1, typeof(PlayerDataManager));
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			ulong arg1 = LuaDLL.tolua_checkuint64(L, 3);
			ClientDataModel.FriendInfoDataModel o = obj.GetFiendInfo(arg0, arg1);
			ToLua.PushObject(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetFightPoint(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 5);
			PlayerDataManager obj = (PlayerDataManager)ToLua.CheckObject(L, 1, typeof(PlayerDataManager));
			int[] arg0 = ToLua.CheckNumberArray<int>(L, 2);
			int[] arg1 = ToLua.CheckNumberArray<int>(L, 3);
			int arg2 = (int)LuaDLL.luaL_checknumber(L, 4);
			int arg3 = (int)LuaDLL.luaL_checknumber(L, 5);
			int o = obj.GetFightPoint(arg0, arg1, arg2, arg3);
			LuaDLL.lua_pushinteger(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetGainItemHintEntryArgs(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			PlayerDataManager obj = (PlayerDataManager)ToLua.CheckObject(L, 1, typeof(PlayerDataManager));
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			int arg1 = (int)LuaDLL.luaL_checknumber(L, 3);
			GainItemHintEntryArgs o = obj.GetGainItemHintEntryArgs(arg0, arg1);
			ToLua.PushObject(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetGuid(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			PlayerDataManager obj = (PlayerDataManager)ToLua.CheckObject(L, 1, typeof(PlayerDataManager));
			ulong o = obj.GetGuid();
			LuaDLL.tolua_pushuint64(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetItem(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			PlayerDataManager obj = (PlayerDataManager)ToLua.CheckObject(L, 1, typeof(PlayerDataManager));
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			int arg1 = (int)LuaDLL.luaL_checknumber(L, 3);
			ClientDataModel.BagItemDataModel o = obj.GetItem(arg0, arg1);
			ToLua.PushObject(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetItemCount(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 2 && TypeChecker.CheckTypes(L, 1, typeof(PlayerDataManager), typeof(int)))
			{
				PlayerDataManager obj = (PlayerDataManager)ToLua.ToObject(L, 1);
				int arg0 = (int)LuaDLL.lua_tonumber(L, 2);
				int o = obj.GetItemCount(arg0);
				LuaDLL.lua_pushinteger(L, o);
				return 1;
			}
			else if (count == 3 && TypeChecker.CheckTypes(L, 1, typeof(PlayerDataManager), typeof(int), typeof(int)))
			{
				PlayerDataManager obj = (PlayerDataManager)ToLua.ToObject(L, 1);
				int arg0 = (int)LuaDLL.lua_tonumber(L, 2);
				int arg1 = (int)LuaDLL.lua_tonumber(L, 3);
				int o = obj.GetItemCount(arg0, arg1);
				LuaDLL.lua_pushinteger(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: PlayerDataManager.GetItemCount");
			}
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetItemTotalCount(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			PlayerDataManager obj = (PlayerDataManager)ToLua.CheckObject(L, 1, typeof(PlayerDataManager));
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			ClientDataModel.TotalCount o = obj.GetItemTotalCount(arg0);
			ToLua.PushObject(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetLevel(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			PlayerDataManager obj = (PlayerDataManager)ToLua.CheckObject(L, 1, typeof(PlayerDataManager));
			int o = obj.GetLevel();
			LuaDLL.lua_pushinteger(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetLockIndex(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			PlayerDataManager obj = (PlayerDataManager)ToLua.CheckObject(L, 1, typeof(PlayerDataManager));
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			int o = obj.GetLockIndex(arg0);
			LuaDLL.lua_pushinteger(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetLoginApplyState(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			PlayerDataManager obj = (PlayerDataManager)ToLua.CheckObject(L, 1, typeof(PlayerDataManager));
			Shared.BitFlag o = obj.GetLoginApplyState();
			ToLua.PushObject(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetName(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			PlayerDataManager obj = (PlayerDataManager)ToLua.CheckObject(L, 1, typeof(PlayerDataManager));
			string o = obj.GetName();
			LuaDLL.lua_pushstring(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetNormalSkill(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			PlayerDataManager obj = (PlayerDataManager)ToLua.CheckObject(L, 1, typeof(PlayerDataManager));
			bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
			int o = obj.GetNormalSkill(arg0);
			LuaDLL.lua_pushinteger(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetPkModel(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			PlayerDataManager obj = (PlayerDataManager)ToLua.CheckObject(L, 1, typeof(PlayerDataManager));
			int o = obj.GetPkModel();
			LuaDLL.lua_pushinteger(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetPkValue(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			PlayerDataManager obj = (PlayerDataManager)ToLua.CheckObject(L, 1, typeof(PlayerDataManager));
			int o = obj.GetPkValue();
			LuaDLL.lua_pushinteger(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetRemaindCapacity(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			PlayerDataManager obj = (PlayerDataManager)ToLua.CheckObject(L, 1, typeof(PlayerDataManager));
			eBagType arg0 = (eBagType)ToLua.CheckObject(L, 2, typeof(eBagType));
			int o = obj.GetRemaindCapacity(arg0);
			LuaDLL.lua_pushinteger(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetRes(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			PlayerDataManager obj = (PlayerDataManager)ToLua.CheckObject(L, 1, typeof(PlayerDataManager));
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			int o = obj.GetRes(arg0);
			LuaDLL.lua_pushinteger(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetRoleId(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			PlayerDataManager obj = (PlayerDataManager)ToLua.CheckObject(L, 1, typeof(PlayerDataManager));
			int o = obj.GetRoleId();
			LuaDLL.lua_pushinteger(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetSkillLevel(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			PlayerDataManager obj = (PlayerDataManager)ToLua.CheckObject(L, 1, typeof(PlayerDataManager));
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			int o = obj.GetSkillLevel(arg0);
			LuaDLL.lua_pushinteger(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetSkillNoWeapon(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			PlayerDataManager obj = (PlayerDataManager)ToLua.CheckObject(L, 1, typeof(PlayerDataManager));
			int o = obj.GetSkillNoWeapon();
			LuaDLL.lua_pushinteger(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetTalentLayer(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			PlayerDataManager obj = (PlayerDataManager)ToLua.CheckObject(L, 1, typeof(PlayerDataManager));
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			int o = obj.GetTalentLayer(arg0);
			LuaDLL.lua_pushinteger(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetTeamMemberName(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			PlayerDataManager obj = (PlayerDataManager)ToLua.CheckObject(L, 1, typeof(PlayerDataManager));
			ulong arg0 = LuaDLL.tolua_checkuint64(L, 2);
			string o = obj.GetTeamMemberName(arg0);
			LuaDLL.lua_pushstring(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetMaxBuyCount(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			PlayerDataManager obj = (PlayerDataManager)ToLua.CheckObject(L, 1, typeof(PlayerDataManager));
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			int o = obj.GetMaxBuyCount(arg0);
			LuaDLL.lua_pushinteger(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetNeedBuyCount(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			PlayerDataManager obj = (PlayerDataManager)ToLua.CheckObject(L, 1, typeof(PlayerDataManager));
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			int arg1 = (int)LuaDLL.luaL_checknumber(L, 3);
			int o = obj.GetNeedBuyCount(arg0, arg1);
			LuaDLL.lua_pushinteger(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetWingId(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			PlayerDataManager obj = (PlayerDataManager)ToLua.CheckObject(L, 1, typeof(PlayerDataManager));
			int o = obj.GetWingId();
			LuaDLL.lua_pushinteger(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int InitBagData(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			PlayerDataManager obj = (PlayerDataManager)ToLua.CheckObject(L, 1, typeof(PlayerDataManager));
			DataContract.BagBaseData arg0 = (DataContract.BagBaseData)ToLua.CheckObject(L, 2, typeof(DataContract.BagBaseData));
			obj.InitBagData(arg0);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int InitExtDataEvent(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 0);
			PlayerDataManager.InitExtDataEvent();
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int InitQueneData(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			PlayerDataManager obj = (PlayerDataManager)ToLua.CheckObject(L, 1, typeof(PlayerDataManager));
			DataContract.QueueInfo arg0 = (DataContract.QueueInfo)ToLua.CheckObject(L, 2, typeof(DataContract.QueueInfo));
			obj.InitQueneData(arg0);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int IsInFubenScnen(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			PlayerDataManager obj = (PlayerDataManager)ToLua.CheckObject(L, 1, typeof(PlayerDataManager));
			bool o = obj.IsInFubenScnen();
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int IsInPvPScnen(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			PlayerDataManager obj = (PlayerDataManager)ToLua.CheckObject(L, 1, typeof(PlayerDataManager));
			bool o = obj.IsInPvPScnen();
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int IsSkillTalentMax(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			PlayerDataManager obj = (PlayerDataManager)ToLua.CheckObject(L, 1, typeof(PlayerDataManager));
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			bool o = obj.IsSkillTalentMax(arg0);
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ItemOrEquipCanUse(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			PlayerDataManager obj = (PlayerDataManager)ToLua.CheckObject(L, 1, typeof(PlayerDataManager));
			DataTable.ItemBaseRecord arg0 = (DataTable.ItemBaseRecord)ToLua.CheckObject(L, 2, typeof(DataTable.ItemBaseRecord));
			bool o = obj.ItemOrEquipCanUse(arg0);
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int LearnSkill(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			PlayerDataManager obj = (PlayerDataManager)ToLua.CheckObject(L, 1, typeof(PlayerDataManager));
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			bool arg1 = LuaDLL.luaL_checkboolean(L, 3);
			obj.LearnSkill(arg0, arg1);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ModifyEquipAttribute(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 5);
			PlayerDataManager obj = (PlayerDataManager)ToLua.CheckObject(L, 1, typeof(PlayerDataManager));
			System.Collections.Generic.Dictionary<int,int> arg0 = (System.Collections.Generic.Dictionary<int,int>)ToLua.CheckObject(L, 2, typeof(System.Collections.Generic.Dictionary<int,int>));
			int arg1 = (int)LuaDLL.luaL_checknumber(L, 3);
			int arg2 = (int)LuaDLL.luaL_checknumber(L, 4);
			int arg3 = (int)LuaDLL.luaL_checknumber(L, 5);
			obj.ModifyEquipAttribute(arg0, arg1, arg2, arg3);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int NotifyBagItemCountChanged(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			PlayerDataManager obj = (PlayerDataManager)ToLua.CheckObject(L, 1, typeof(PlayerDataManager));
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			int arg1 = (int)LuaDLL.luaL_checknumber(L, 3);
			obj.NotifyBagItemCountChanged(arg0, arg1);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int NotifyMatchingData(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			PlayerDataManager obj = (PlayerDataManager)ToLua.CheckObject(L, 1, typeof(PlayerDataManager));
			DataContract.QueueInfo arg0 = (DataContract.QueueInfo)ToLua.CheckObject(L, 2, typeof(DataContract.QueueInfo));
			obj.NotifyMatchingData(arg0);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int OnInitLevel(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			PlayerDataManager obj = (PlayerDataManager)ToLua.CheckObject(L, 1, typeof(PlayerDataManager));
			obj.OnInitLevel();
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int OnUpdataResourcesChange(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			PlayerDataManager obj = (PlayerDataManager)ToLua.CheckObject(L, 1, typeof(PlayerDataManager));
			object arg0 = ToLua.ToVarObject(L, 2);
			System.ComponentModel.PropertyChangedEventArgs arg1 = (System.ComponentModel.PropertyChangedEventArgs)ToLua.CheckObject(L, 3, typeof(System.ComponentModel.PropertyChangedEventArgs));
			obj.OnUpdataResourcesChange(arg0, arg1);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int PlayFlyItem(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 9);
			PlayerDataManager obj = (PlayerDataManager)ToLua.CheckObject(L, 1, typeof(PlayerDataManager));
			UnityEngine.GameObject arg0 = (UnityEngine.GameObject)ToLua.CheckUnityObject(L, 2, typeof(UnityEngine.GameObject));
			UnityEngine.Transform arg1 = (UnityEngine.Transform)ToLua.CheckUnityObject(L, 3, typeof(UnityEngine.Transform));
			UnityEngine.Transform arg2 = (UnityEngine.Transform)ToLua.CheckUnityObject(L, 4, typeof(UnityEngine.Transform));
			int arg3 = (int)LuaDLL.luaL_checknumber(L, 5);
			int arg4 = (int)LuaDLL.luaL_checknumber(L, 6);
			UnityEngine.Vector3 arg5 = ToLua.ToVector3(L, 7);
			float arg6 = (float)LuaDLL.luaL_checknumber(L, 8);
			UnityEngine.Vector3 arg7 = ToLua.ToVector3(L, 9);
			obj.PlayFlyItem(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int RefrehEquipPriority(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			PlayerDataManager obj = (PlayerDataManager)ToLua.CheckObject(L, 1, typeof(PlayerDataManager));
			obj.RefrehEquipPriority();
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int RefreshEquipBagStatus(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 2 && TypeChecker.CheckTypes(L, 1, typeof(PlayerDataManager), typeof(ClientDataModel.BagItemDataModel)))
			{
				PlayerDataManager obj = (PlayerDataManager)ToLua.ToObject(L, 1);
				ClientDataModel.BagItemDataModel arg0 = (ClientDataModel.BagItemDataModel)ToLua.ToObject(L, 2);
				obj.RefreshEquipBagStatus(arg0);
				return 0;
			}
			else if (count == 2 && TypeChecker.CheckTypes(L, 1, typeof(PlayerDataManager), typeof(eBagType)))
			{
				PlayerDataManager obj = (PlayerDataManager)ToLua.ToObject(L, 1);
				eBagType arg0 = (eBagType)ToLua.ToObject(L, 2);
				obj.RefreshEquipBagStatus(arg0);
				return 0;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: PlayerDataManager.RefreshEquipBagStatus");
			}
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int RefreshEquipStatus(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			PlayerDataManager obj = (PlayerDataManager)ToLua.CheckObject(L, 1, typeof(PlayerDataManager));
			obj.RefreshEquipStatus();
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int RefreshMedicineWarn(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			PlayerDataManager obj = (PlayerDataManager)ToLua.CheckObject(L, 1, typeof(PlayerDataManager));
			obj.RefreshMedicineWarn();
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int RefrshEquipDurable(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			PlayerDataManager obj = (PlayerDataManager)ToLua.CheckObject(L, 1, typeof(PlayerDataManager));
			obj.RefrshEquipDurable();
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int RemoveBagItemCount(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			PlayerDataManager obj = (PlayerDataManager)ToLua.CheckObject(L, 1, typeof(PlayerDataManager));
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			obj.RemoveBagItemCount(arg0);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int RemoveSelectTarget(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			PlayerDataManager obj = (PlayerDataManager)ToLua.CheckObject(L, 1, typeof(PlayerDataManager));
			ObjCharacter arg0 = (ObjCharacter)ToLua.CheckUnityObject(L, 2, typeof(ObjCharacter));
			obj.RemoveSelectTarget(arg0);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ResetLoginApplyState(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			PlayerDataManager obj = (PlayerDataManager)ToLua.CheckObject(L, 1, typeof(PlayerDataManager));
			obj.ResetLoginApplyState();
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ResetSelectTarget(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			PlayerDataManager obj = (PlayerDataManager)ToLua.CheckObject(L, 1, typeof(PlayerDataManager));
			obj.ResetSelectTarget();
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ResGainTip(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			PlayerDataManager obj = (PlayerDataManager)ToLua.CheckObject(L, 1, typeof(PlayerDataManager));
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			int arg1 = (int)LuaDLL.luaL_checknumber(L, 3);
			obj.ResGainTip(arg0, arg1);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SetAttribute(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			PlayerDataManager obj = (PlayerDataManager)ToLua.CheckObject(L, 1, typeof(PlayerDataManager));
			eAttributeType arg0 = (eAttributeType)ToLua.CheckObject(L, 2, typeof(eAttributeType));
			int arg1 = (int)LuaDLL.luaL_checknumber(L, 3);
			obj.SetAttribute(arg0, arg1);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SetBookGroupEnable(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			PlayerDataManager obj = (PlayerDataManager)ToLua.CheckObject(L, 1, typeof(PlayerDataManager));
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			int arg1 = (int)LuaDLL.luaL_checknumber(L, 3);
			obj.SetBookGroupEnable(arg0, arg1);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SetBountyBookEnable(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			PlayerDataManager obj = (PlayerDataManager)ToLua.CheckObject(L, 1, typeof(PlayerDataManager));
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			obj.SetBountyBookEnable(arg0);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SetCanShowTarget(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			PlayerDataManager obj = (PlayerDataManager)ToLua.CheckObject(L, 1, typeof(PlayerDataManager));
			bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
			obj.SetCanShowTarget(arg0);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SetExData64(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			PlayerDataManager obj = (PlayerDataManager)ToLua.CheckObject(L, 1, typeof(PlayerDataManager));
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			long arg1 = LuaDLL.tolua_checkint64(L, 3);
			obj.SetExData64(arg0, arg1);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SetLoginApplyState(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			PlayerDataManager obj = (PlayerDataManager)ToLua.CheckObject(L, 1, typeof(PlayerDataManager));
			eLoginApplyType arg0 = (eLoginApplyType)ToLua.CheckObject(L, 2, typeof(eLoginApplyType));
			obj.SetLoginApplyState(arg0);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SetNoWeaponSkill(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			PlayerDataManager obj = (PlayerDataManager)ToLua.CheckObject(L, 1, typeof(PlayerDataManager));
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			obj.SetNoWeaponSkill(arg0);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SetPkModel(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			PlayerDataManager obj = (PlayerDataManager)ToLua.CheckObject(L, 1, typeof(PlayerDataManager));
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			obj.SetPkModel(arg0);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SetPkValue(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			PlayerDataManager obj = (PlayerDataManager)ToLua.CheckObject(L, 1, typeof(PlayerDataManager));
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			obj.SetPkValue(arg0);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SetRes(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			PlayerDataManager obj = (PlayerDataManager)ToLua.CheckObject(L, 1, typeof(PlayerDataManager));
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			int arg1 = (int)LuaDLL.luaL_checknumber(L, 3);
			obj.SetRes(arg0, arg1);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SetSelectTargetData(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			PlayerDataManager obj = (PlayerDataManager)ToLua.CheckObject(L, 1, typeof(PlayerDataManager));
			ObjCharacter arg0 = (ObjCharacter)ToLua.CheckUnityObject(L, 2, typeof(ObjCharacter));
			int arg1 = (int)LuaDLL.luaL_checknumber(L, 3);
			obj.SetSelectTargetData(arg0, arg1);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ShowCharacterPopMenu(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 7);
			PlayerDataManager obj = (PlayerDataManager)ToLua.CheckObject(L, 1, typeof(PlayerDataManager));
			ulong arg0 = LuaDLL.tolua_checkuint64(L, 2);
			string arg1 = ToLua.CheckString(L, 3);
			int arg2 = (int)LuaDLL.luaL_checknumber(L, 4);
			int arg3 = (int)LuaDLL.luaL_checknumber(L, 5);
			int arg4 = (int)LuaDLL.luaL_checknumber(L, 6);
			int arg5 = (int)LuaDLL.luaL_checknumber(L, 7);
			obj.ShowCharacterPopMenu(arg0, arg1, arg2, arg3, arg4, arg5);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ShowItemInfoGet(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			PlayerDataManager obj = (PlayerDataManager)ToLua.CheckObject(L, 1, typeof(PlayerDataManager));
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			obj.ShowItemInfoGet(arg0);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ShowPlayerInfo(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			PlayerDataManager obj = (PlayerDataManager)ToLua.CheckObject(L, 1, typeof(PlayerDataManager));
			ulong arg0 = LuaDLL.tolua_checkuint64(L, 2);
			obj.ShowPlayerInfo(arg0);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SkillTalentPointChange(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			PlayerDataManager obj = (PlayerDataManager)ToLua.CheckObject(L, 1, typeof(PlayerDataManager));
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			int arg1 = (int)LuaDLL.luaL_checknumber(L, 3);
			obj.SkillTalentPointChange(arg0, arg1);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SyncResources(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			PlayerDataManager obj = (PlayerDataManager)ToLua.CheckObject(L, 1, typeof(PlayerDataManager));
			System.Collections.Generic.Dictionary<int,int> arg0 = (System.Collections.Generic.Dictionary<int,int>)ToLua.CheckObject(L, 2, typeof(System.Collections.Generic.Dictionary<int,int>));
			obj.SyncResources(arg0);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int UpdateBagData(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			PlayerDataManager obj = (PlayerDataManager)ToLua.CheckObject(L, 1, typeof(PlayerDataManager));
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			DataContract.ItemsChangeData arg1 = (DataContract.ItemsChangeData)ToLua.CheckObject(L, 3, typeof(DataContract.ItemsChangeData));
			obj.UpdateBagData(arg0, arg1);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int UpdateEquipData(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			PlayerDataManager obj = (PlayerDataManager)ToLua.CheckObject(L, 1, typeof(PlayerDataManager));
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			DataContract.ItemsChangeData arg1 = (DataContract.ItemsChangeData)ToLua.CheckObject(L, 3, typeof(DataContract.ItemsChangeData));
			obj.UpdateEquipData(arg0, arg1);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Init(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			PlayerDataManager obj = (PlayerDataManager)ToLua.CheckObject(L, 1, typeof(PlayerDataManager));
			System.Collections.IEnumerator o = obj.Init();
			ToLua.Push(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Tick(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			PlayerDataManager obj = (PlayerDataManager)ToLua.CheckObject(L, 1, typeof(PlayerDataManager));
			float arg0 = (float)LuaDLL.luaL_checknumber(L, 2);
			obj.Tick(arg0);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Reset(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			PlayerDataManager obj = (PlayerDataManager)ToLua.CheckObject(L, 1, typeof(PlayerDataManager));
			obj.Reset();
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Destroy(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			PlayerDataManager obj = (PlayerDataManager)ToLua.CheckObject(L, 1, typeof(PlayerDataManager));
			obj.Destroy();
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetFlag(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			PlayerDataManager obj = (PlayerDataManager)ToLua.CheckObject(L, 1, typeof(PlayerDataManager));
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			bool o = obj.GetFlag(arg0);
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SetFlag(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			PlayerDataManager obj = (PlayerDataManager)ToLua.CheckObject(L, 1, typeof(PlayerDataManager));
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			bool arg1 = LuaDLL.luaL_checkboolean(L, 3);
			obj.SetFlag(arg0, arg1);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetExData(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 1 && TypeChecker.CheckTypes(L, 1, typeof(PlayerDataManager)))
			{
				PlayerDataManager obj = (PlayerDataManager)ToLua.ToObject(L, 1);
				System.Collections.Generic.List<int> o = obj.GetExData();
				ToLua.PushObject(L, o);
				return 1;
			}
			else if (count == 2 && TypeChecker.CheckTypes(L, 1, typeof(PlayerDataManager), typeof(eExdataDefine)))
			{
				PlayerDataManager obj = (PlayerDataManager)ToLua.ToObject(L, 1);
				eExdataDefine arg0 = (eExdataDefine)ToLua.ToObject(L, 2);
				int o = obj.GetExData(arg0);
				LuaDLL.lua_pushinteger(L, o);
				return 1;
			}
			else if (count == 2 && TypeChecker.CheckTypes(L, 1, typeof(PlayerDataManager), typeof(int)))
			{
				PlayerDataManager obj = (PlayerDataManager)ToLua.ToObject(L, 1);
				int arg0 = (int)LuaDLL.lua_tonumber(L, 2);
				int o = obj.GetExData(arg0);
				LuaDLL.lua_pushinteger(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: PlayerDataManager.GetExData");
			}
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SetExData(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			PlayerDataManager obj = (PlayerDataManager)ToLua.CheckObject(L, 1, typeof(PlayerDataManager));
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			int arg1 = (int)LuaDLL.luaL_checknumber(L, 3);
			obj.SetExData(arg0, arg1);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SetExDataNet(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			PlayerDataManager obj = (PlayerDataManager)ToLua.CheckObject(L, 1, typeof(PlayerDataManager));
			System.Collections.Generic.Dictionary<int,int> arg0 = (System.Collections.Generic.Dictionary<int,int>)ToLua.CheckObject(L, 2, typeof(System.Collections.Generic.Dictionary<int,int>));
			obj.SetExDataNet(arg0);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SetFlagNet(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			PlayerDataManager obj = (PlayerDataManager)ToLua.CheckObject(L, 1, typeof(PlayerDataManager));
			DataContract.Int32Array arg0 = (DataContract.Int32Array)ToLua.CheckObject(L, 2, typeof(DataContract.Int32Array));
			DataContract.Int32Array arg1 = (DataContract.Int32Array)ToLua.CheckObject(L, 3, typeof(DataContract.Int32Array));
			obj.SetFlagNet(arg0, arg1);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int CheckCondition(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			PlayerDataManager obj = (PlayerDataManager)ToLua.CheckObject(L, 1, typeof(PlayerDataManager));
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			int o = obj.CheckCondition(arg0);
			LuaDLL.lua_pushinteger(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int InitTrigger(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			PlayerDataManager obj = (PlayerDataManager)ToLua.CheckObject(L, 1, typeof(PlayerDataManager));
			obj.InitTrigger();
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int InitRewardGet(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			PlayerDataManager obj = (PlayerDataManager)ToLua.CheckObject(L, 1, typeof(PlayerDataManager));
			obj.InitRewardGet();
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SetNoticeCount(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 4);
			PlayerDataManager obj = (PlayerDataManager)ToLua.CheckObject(L, 1, typeof(PlayerDataManager));
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			int arg1 = (int)LuaDLL.luaL_checknumber(L, 3);
			bool arg2 = LuaDLL.luaL_checkboolean(L, 4);
			obj.SetNoticeCount(arg0, arg1, arg2);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SetNoticeFlag(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 4);
			PlayerDataManager obj = (PlayerDataManager)ToLua.CheckObject(L, 1, typeof(PlayerDataManager));
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			bool arg1 = LuaDLL.luaL_checkboolean(L, 3);
			bool arg2 = LuaDLL.luaL_checkboolean(L, 4);
			obj.SetNoticeFlag(arg0, arg1, arg2);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int RefleshRewardInfo(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			PlayerDataManager obj = (PlayerDataManager)ToLua.CheckObject(L, 1, typeof(PlayerDataManager));
			obj.RefleshRewardInfo();
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int RewardNoticeReflesh(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			PlayerDataManager obj = (PlayerDataManager)ToLua.CheckObject(L, 1, typeof(PlayerDataManager));
			string arg0 = ToLua.CheckString(L, 2);
			obj.RewardNoticeReflesh(arg0);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int RewardGotoUI(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			PlayerDataManager obj = (PlayerDataManager)ToLua.CheckObject(L, 1, typeof(PlayerDataManager));
			obj.RewardGotoUI();
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetAchievementPoint(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			PlayerDataManager obj = (PlayerDataManager)ToLua.CheckObject(L, 1, typeof(PlayerDataManager));
			int o = obj.GetAchievementPoint();
			LuaDLL.lua_pushinteger(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get__battleCityDic(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			PlayerDataManager obj = (PlayerDataManager)o;
			System.Collections.Generic.Dictionary<int,PlayerDataManager.BattleCityData> ret = obj._battleCityDic;
			ToLua.PushObject(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index _battleCityDic on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_ActivityState(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			PlayerDataManager obj = (PlayerDataManager)o;
			System.Collections.Generic.Dictionary<int,int> ret = obj.ActivityState;
			ToLua.PushObject(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index ActivityState on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_AttributeFix(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			PlayerDataManager obj = (PlayerDataManager)o;
			System.Collections.Generic.Dictionary<int,int> ret = obj.AttributeFix;
			ToLua.PushObject(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index AttributeFix on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_BagIdToEquipType(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			PlayerDataManager obj = (PlayerDataManager)o;
			System.Collections.Generic.Dictionary<int,int> ret = obj.BagIdToEquipType;
			ToLua.PushObject(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index BagIdToEquipType on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_BattleName(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			PlayerDataManager obj = (PlayerDataManager)o;
			string ret = obj.BattleName;
			LuaDLL.lua_pushstring(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index BattleName on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_BattleUnionDataModel(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			PlayerDataManager obj = (PlayerDataManager)o;
			ClientDataModel.BattleUnionDataModel ret = obj.BattleUnionDataModel;
			ToLua.PushObject(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index BattleUnionDataModel on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_BattleMishiMaster(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			PlayerDataManager obj = (PlayerDataManager)o;
			DataContract.PlayerInfoMsg ret = obj.BattleMishiMaster;
			ToLua.PushObject(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index BattleMishiMaster on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_BattleUnionMaster(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			PlayerDataManager obj = (PlayerDataManager)o;
			DataContract.PlayerInfoMsg ret = obj.BattleUnionMaster;
			ToLua.PushObject(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index BattleUnionMaster on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_CareeridToStatsPointIndex(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			PlayerDataManager obj = (PlayerDataManager)o;
			System.Collections.Generic.Dictionary<int,int> ret = obj.CareeridToStatsPointIndex;
			ToLua.PushObject(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index CareeridToStatsPointIndex on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_CharacterLists(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			PlayerDataManager obj = (PlayerDataManager)o;
			System.Collections.Generic.List<DataContract.CharacterSimpleInfo> ret = obj.CharacterLists;
			ToLua.PushObject(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index CharacterLists on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_EquipTypeToPart(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			PlayerDataManager obj = (PlayerDataManager)o;
			System.Collections.Generic.Dictionary<int,int> ret = obj.EquipTypeToPart;
			ToLua.PushObject(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index EquipTypeToPart on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_FirstChargeData(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			PlayerDataManager obj = (PlayerDataManager)o;
			DataContract.FirstChargeData ret = obj.FirstChargeData;
			ToLua.PushObject(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index FirstChargeData on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_LastLoginServerId(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			PlayerDataManager obj = (PlayerDataManager)o;
			int ret = obj.LastLoginServerId;
			LuaDLL.lua_pushinteger(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index LastLoginServerId on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_mAllSkills(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			PlayerDataManager obj = (PlayerDataManager)o;
			System.Collections.Generic.Dictionary<int,ClientDataModel.SkillItemDataModel> ret = obj.mAllSkills;
			ToLua.PushObject(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index mAllSkills on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_mAllTalents(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			PlayerDataManager obj = (PlayerDataManager)o;
			System.Collections.Generic.Dictionary<int,ClientDataModel.TalentCellDataModel> ret = obj.mAllTalents;
			ToLua.PushObject(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index mAllTalents on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_mInitBaseAttr(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			PlayerDataManager obj = (PlayerDataManager)o;
			DataContract.PlayerData ret = obj.mInitBaseAttr;
			ToLua.PushObject(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index mInitBaseAttr on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_mPickIntervalTrigger(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			PlayerDataManager obj = (PlayerDataManager)o;
			object ret = obj.mPickIntervalTrigger;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index mPickIntervalTrigger on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_mSkillTalent(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			PlayerDataManager obj = (PlayerDataManager)o;
			System.Collections.Generic.Dictionary<int,int> ret = obj.mSkillTalent;
			ToLua.PushObject(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index mSkillTalent on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_mUnionMembers(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			PlayerDataManager obj = (PlayerDataManager)o;
			System.Collections.Generic.Dictionary<ulong,ClientDataModel.CharacterBaseInfoDataModel> ret = obj.mUnionMembers;
			ToLua.PushObject(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index mUnionMembers on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_NoticeData(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			PlayerDataManager obj = (PlayerDataManager)o;
			ClientDataModel.NoticeDataModel ret = obj.NoticeData;
			ToLua.PushObject(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index NoticeData on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_OpenTime(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			PlayerDataManager obj = (PlayerDataManager)o;
			System.DateTime ret = obj.OpenTime;
			ToLua.PushValue(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index OpenTime on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_SelectedRoleIndex(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			PlayerDataManager obj = (PlayerDataManager)o;
			ulong ret = obj.SelectedRoleIndex;
			LuaDLL.tolua_pushuint64(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index SelectedRoleIndex on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_ServerName(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			PlayerDataManager obj = (PlayerDataManager)o;
			string ret = obj.ServerName;
			LuaDLL.lua_pushstring(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index ServerName on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_CharacterFoundTime(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			PlayerDataManager obj = (PlayerDataManager)o;
			System.DateTime ret = obj.CharacterFoundTime;
			ToLua.PushValue(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index CharacterFoundTime on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_ServerNames(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			PlayerDataManager obj = (PlayerDataManager)o;
			System.Collections.Generic.Dictionary<int,string> ret = obj.ServerNames;
			ToLua.PushObject(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index ServerNames on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_TbVip(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			PlayerDataManager obj = (PlayerDataManager)o;
			DataTable.VIPRecord ret = obj.TbVip;
			ToLua.PushObject(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index TbVip on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_TeamDataModel(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			PlayerDataManager obj = (PlayerDataManager)o;
			ClientDataModel.TeamDataModel ret = obj.TeamDataModel;
			ToLua.PushObject(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index TeamDataModel on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_TitleList(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			PlayerDataManager obj = (PlayerDataManager)o;
			System.Collections.Generic.Dictionary<int,int> ret = obj.TitleList;
			ToLua.PushObject(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index TitleList on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_TotalBountyCount(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			PlayerDataManager obj = (PlayerDataManager)o;
			int ret = obj.TotalBountyCount;
			LuaDLL.lua_pushinteger(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index TotalBountyCount on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_TotalGroupCount(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			PlayerDataManager obj = (PlayerDataManager)o;
			int ret = obj.TotalGroupCount;
			LuaDLL.lua_pushinteger(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index TotalGroupCount on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_UidForPay(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			PlayerDataManager obj = (PlayerDataManager)o;
			string ret = obj.UidForPay;
			LuaDLL.lua_pushstring(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index UidForPay on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_WeakNoticeData(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			PlayerDataManager obj = (PlayerDataManager)o;
			ClientDataModel.WeakNoticeDataModel ret = obj.WeakNoticeData;
			ToLua.PushObject(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index WeakNoticeData on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_NociceFlag(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			PlayerDataManager obj = (PlayerDataManager)o;
			System.Collections.Generic.SortedDictionary<int,PlayerDataManager.NoticeClass> ret = obj.NociceFlag;
			ToLua.PushObject(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index NociceFlag on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_RewardNotice(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			PlayerDataManager obj = (PlayerDataManager)o;
			ClientDataModel.RewardNoticeItemDataModel ret = obj.RewardNotice;
			ToLua.PushObject(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index RewardNotice on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_RewardGiftRecord(IntPtr L)
	{
		try
		{
			ToLua.PushObject(L, PlayerDataManager.RewardGiftRecord);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_RewardFastKeySortId(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			PlayerDataManager obj = (PlayerDataManager)o;
			int ret = obj.RewardFastKeySortId;
			LuaDLL.lua_pushinteger(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index RewardFastKeySortId on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_NoticeStrToSort(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			PlayerDataManager obj = (PlayerDataManager)o;
			System.Collections.Generic.Dictionary<string,int> ret = obj.NoticeStrToSort;
			ToLua.PushObject(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index NoticeStrToSort on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_AccountDataModel(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			PlayerDataManager obj = (PlayerDataManager)o;
			ClientDataModel.AccountDataModel ret = obj.AccountDataModel;
			ToLua.PushObject(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index AccountDataModel on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_BookGropData(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			PlayerDataManager obj = (PlayerDataManager)o;
			System.Collections.Generic.Dictionary<int,int> ret = obj.BookGropData;
			ToLua.PushObject(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index BookGropData on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_BountyBooks(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			PlayerDataManager obj = (PlayerDataManager)o;
			System.Collections.Generic.List<int> ret = obj.BountyBooks;
			ToLua.PushObject(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index BountyBooks on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_CharacterGuid(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			PlayerDataManager obj = (PlayerDataManager)o;
			ulong ret = obj.CharacterGuid;
			LuaDLL.tolua_pushuint64(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index CharacterGuid on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_ExtData(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			PlayerDataManager obj = (PlayerDataManager)o;
			System.Collections.Generic.List<int> ret = obj.ExtData;
			ToLua.PushObject(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index ExtData on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_ExtData64(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			PlayerDataManager obj = (PlayerDataManager)o;
			System.Collections.Generic.List<long> ret = obj.ExtData64;
			ToLua.PushObject(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index ExtData64 on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_FlagData(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			PlayerDataManager obj = (PlayerDataManager)o;
			Shared.BitFlag ret = obj.FlagData;
			ToLua.PushObject(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index FlagData on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_FlagInited(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			PlayerDataManager obj = (PlayerDataManager)o;
			bool ret = obj.FlagInited;
			LuaDLL.lua_pushboolean(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index FlagInited on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Guid(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			PlayerDataManager obj = (PlayerDataManager)o;
			ulong ret = obj.Guid;
			LuaDLL.tolua_pushuint64(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index Guid on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_IsLevelInited(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			PlayerDataManager obj = (PlayerDataManager)o;
			bool ret = obj.IsLevelInited;
			LuaDLL.lua_pushboolean(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index IsLevelInited on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Password(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			PlayerDataManager obj = (PlayerDataManager)o;
			string ret = obj.Password;
			LuaDLL.lua_pushstring(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index Password on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_PlayerDataModel(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			PlayerDataManager obj = (PlayerDataManager)o;
			ClientDataModel.PlayerDataModel ret = obj.PlayerDataModel;
			ToLua.PushObject(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index PlayerDataModel on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_ReviewState(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			PlayerDataManager obj = (PlayerDataManager)o;
			int ret = obj.ReviewState;
			LuaDLL.lua_pushinteger(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index ReviewState on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_SelectTargetData(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			PlayerDataManager obj = (PlayerDataManager)o;
			ClientDataModel.SelectTargetDataModel ret = obj.SelectTargetData;
			ToLua.PushObject(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index SelectTargetData on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_ServerId(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			PlayerDataManager obj = (PlayerDataManager)o;
			int ret = obj.ServerId;
			LuaDLL.lua_pushinteger(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index ServerId on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_UserName(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			PlayerDataManager obj = (PlayerDataManager)o;
			string ret = obj.UserName;
			LuaDLL.lua_pushstring(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index UserName on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set__battleCityDic(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			PlayerDataManager obj = (PlayerDataManager)o;
			System.Collections.Generic.Dictionary<int,PlayerDataManager.BattleCityData> arg0 = (System.Collections.Generic.Dictionary<int,PlayerDataManager.BattleCityData>)ToLua.CheckObject(L, 2, typeof(System.Collections.Generic.Dictionary<int,PlayerDataManager.BattleCityData>));
			obj._battleCityDic = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index _battleCityDic on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_ActivityState(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			PlayerDataManager obj = (PlayerDataManager)o;
			System.Collections.Generic.Dictionary<int,int> arg0 = (System.Collections.Generic.Dictionary<int,int>)ToLua.CheckObject(L, 2, typeof(System.Collections.Generic.Dictionary<int,int>));
			obj.ActivityState = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index ActivityState on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_AttributeFix(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			PlayerDataManager obj = (PlayerDataManager)o;
			System.Collections.Generic.Dictionary<int,int> arg0 = (System.Collections.Generic.Dictionary<int,int>)ToLua.CheckObject(L, 2, typeof(System.Collections.Generic.Dictionary<int,int>));
			obj.AttributeFix = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index AttributeFix on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_BagIdToEquipType(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			PlayerDataManager obj = (PlayerDataManager)o;
			System.Collections.Generic.Dictionary<int,int> arg0 = (System.Collections.Generic.Dictionary<int,int>)ToLua.CheckObject(L, 2, typeof(System.Collections.Generic.Dictionary<int,int>));
			obj.BagIdToEquipType = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index BagIdToEquipType on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_BattleName(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			PlayerDataManager obj = (PlayerDataManager)o;
			string arg0 = ToLua.CheckString(L, 2);
			obj.BattleName = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index BattleName on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_BattleUnionDataModel(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			PlayerDataManager obj = (PlayerDataManager)o;
			ClientDataModel.BattleUnionDataModel arg0 = (ClientDataModel.BattleUnionDataModel)ToLua.CheckObject(L, 2, typeof(ClientDataModel.BattleUnionDataModel));
			obj.BattleUnionDataModel = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index BattleUnionDataModel on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_BattleMishiMaster(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			PlayerDataManager obj = (PlayerDataManager)o;
			DataContract.PlayerInfoMsg arg0 = (DataContract.PlayerInfoMsg)ToLua.CheckObject(L, 2, typeof(DataContract.PlayerInfoMsg));
			obj.BattleMishiMaster = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index BattleMishiMaster on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_BattleUnionMaster(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			PlayerDataManager obj = (PlayerDataManager)o;
			DataContract.PlayerInfoMsg arg0 = (DataContract.PlayerInfoMsg)ToLua.CheckObject(L, 2, typeof(DataContract.PlayerInfoMsg));
			obj.BattleUnionMaster = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index BattleUnionMaster on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_CareeridToStatsPointIndex(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			PlayerDataManager obj = (PlayerDataManager)o;
			System.Collections.Generic.Dictionary<int,int> arg0 = (System.Collections.Generic.Dictionary<int,int>)ToLua.CheckObject(L, 2, typeof(System.Collections.Generic.Dictionary<int,int>));
			obj.CareeridToStatsPointIndex = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index CareeridToStatsPointIndex on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_CharacterLists(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			PlayerDataManager obj = (PlayerDataManager)o;
			System.Collections.Generic.List<DataContract.CharacterSimpleInfo> arg0 = (System.Collections.Generic.List<DataContract.CharacterSimpleInfo>)ToLua.CheckObject(L, 2, typeof(System.Collections.Generic.List<DataContract.CharacterSimpleInfo>));
			obj.CharacterLists = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index CharacterLists on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_EquipTypeToPart(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			PlayerDataManager obj = (PlayerDataManager)o;
			System.Collections.Generic.Dictionary<int,int> arg0 = (System.Collections.Generic.Dictionary<int,int>)ToLua.CheckObject(L, 2, typeof(System.Collections.Generic.Dictionary<int,int>));
			obj.EquipTypeToPart = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index EquipTypeToPart on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_FirstChargeData(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			PlayerDataManager obj = (PlayerDataManager)o;
			DataContract.FirstChargeData arg0 = (DataContract.FirstChargeData)ToLua.CheckObject(L, 2, typeof(DataContract.FirstChargeData));
			obj.FirstChargeData = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index FirstChargeData on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_LastLoginServerId(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			PlayerDataManager obj = (PlayerDataManager)o;
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			obj.LastLoginServerId = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index LastLoginServerId on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_mAllSkills(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			PlayerDataManager obj = (PlayerDataManager)o;
			System.Collections.Generic.Dictionary<int,ClientDataModel.SkillItemDataModel> arg0 = (System.Collections.Generic.Dictionary<int,ClientDataModel.SkillItemDataModel>)ToLua.CheckObject(L, 2, typeof(System.Collections.Generic.Dictionary<int,ClientDataModel.SkillItemDataModel>));
			obj.mAllSkills = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index mAllSkills on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_mAllTalents(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			PlayerDataManager obj = (PlayerDataManager)o;
			System.Collections.Generic.Dictionary<int,ClientDataModel.TalentCellDataModel> arg0 = (System.Collections.Generic.Dictionary<int,ClientDataModel.TalentCellDataModel>)ToLua.CheckObject(L, 2, typeof(System.Collections.Generic.Dictionary<int,ClientDataModel.TalentCellDataModel>));
			obj.mAllTalents = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index mAllTalents on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_mInitBaseAttr(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			PlayerDataManager obj = (PlayerDataManager)o;
			DataContract.PlayerData arg0 = (DataContract.PlayerData)ToLua.CheckObject(L, 2, typeof(DataContract.PlayerData));
			obj.mInitBaseAttr = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index mInitBaseAttr on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_mPickIntervalTrigger(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			PlayerDataManager obj = (PlayerDataManager)o;
			object arg0 = ToLua.ToVarObject(L, 2);
			obj.mPickIntervalTrigger = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index mPickIntervalTrigger on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_mSkillTalent(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			PlayerDataManager obj = (PlayerDataManager)o;
			System.Collections.Generic.Dictionary<int,int> arg0 = (System.Collections.Generic.Dictionary<int,int>)ToLua.CheckObject(L, 2, typeof(System.Collections.Generic.Dictionary<int,int>));
			obj.mSkillTalent = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index mSkillTalent on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_mUnionMembers(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			PlayerDataManager obj = (PlayerDataManager)o;
			System.Collections.Generic.Dictionary<ulong,ClientDataModel.CharacterBaseInfoDataModel> arg0 = (System.Collections.Generic.Dictionary<ulong,ClientDataModel.CharacterBaseInfoDataModel>)ToLua.CheckObject(L, 2, typeof(System.Collections.Generic.Dictionary<ulong,ClientDataModel.CharacterBaseInfoDataModel>));
			obj.mUnionMembers = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index mUnionMembers on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_NoticeData(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			PlayerDataManager obj = (PlayerDataManager)o;
			ClientDataModel.NoticeDataModel arg0 = (ClientDataModel.NoticeDataModel)ToLua.CheckObject(L, 2, typeof(ClientDataModel.NoticeDataModel));
			obj.NoticeData = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index NoticeData on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_OpenTime(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			PlayerDataManager obj = (PlayerDataManager)o;
			System.DateTime arg0 = (System.DateTime)ToLua.CheckObject(L, 2, typeof(System.DateTime));
			obj.OpenTime = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index OpenTime on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_SelectedRoleIndex(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			PlayerDataManager obj = (PlayerDataManager)o;
			ulong arg0 = LuaDLL.tolua_checkuint64(L, 2);
			obj.SelectedRoleIndex = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index SelectedRoleIndex on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_ServerName(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			PlayerDataManager obj = (PlayerDataManager)o;
			string arg0 = ToLua.CheckString(L, 2);
			obj.ServerName = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index ServerName on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_CharacterFoundTime(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			PlayerDataManager obj = (PlayerDataManager)o;
			System.DateTime arg0 = (System.DateTime)ToLua.CheckObject(L, 2, typeof(System.DateTime));
			obj.CharacterFoundTime = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index CharacterFoundTime on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_ServerNames(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			PlayerDataManager obj = (PlayerDataManager)o;
			System.Collections.Generic.Dictionary<int,string> arg0 = (System.Collections.Generic.Dictionary<int,string>)ToLua.CheckObject(L, 2, typeof(System.Collections.Generic.Dictionary<int,string>));
			obj.ServerNames = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index ServerNames on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_TbVip(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			PlayerDataManager obj = (PlayerDataManager)o;
			DataTable.VIPRecord arg0 = (DataTable.VIPRecord)ToLua.CheckObject(L, 2, typeof(DataTable.VIPRecord));
			obj.TbVip = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index TbVip on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_TeamDataModel(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			PlayerDataManager obj = (PlayerDataManager)o;
			ClientDataModel.TeamDataModel arg0 = (ClientDataModel.TeamDataModel)ToLua.CheckObject(L, 2, typeof(ClientDataModel.TeamDataModel));
			obj.TeamDataModel = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index TeamDataModel on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_TitleList(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			PlayerDataManager obj = (PlayerDataManager)o;
			System.Collections.Generic.Dictionary<int,int> arg0 = (System.Collections.Generic.Dictionary<int,int>)ToLua.CheckObject(L, 2, typeof(System.Collections.Generic.Dictionary<int,int>));
			obj.TitleList = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index TitleList on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_TotalBountyCount(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			PlayerDataManager obj = (PlayerDataManager)o;
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			obj.TotalBountyCount = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index TotalBountyCount on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_TotalGroupCount(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			PlayerDataManager obj = (PlayerDataManager)o;
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			obj.TotalGroupCount = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index TotalGroupCount on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_UidForPay(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			PlayerDataManager obj = (PlayerDataManager)o;
			string arg0 = ToLua.CheckString(L, 2);
			obj.UidForPay = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index UidForPay on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_WeakNoticeData(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			PlayerDataManager obj = (PlayerDataManager)o;
			ClientDataModel.WeakNoticeDataModel arg0 = (ClientDataModel.WeakNoticeDataModel)ToLua.CheckObject(L, 2, typeof(ClientDataModel.WeakNoticeDataModel));
			obj.WeakNoticeData = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index WeakNoticeData on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_NociceFlag(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			PlayerDataManager obj = (PlayerDataManager)o;
			System.Collections.Generic.SortedDictionary<int,PlayerDataManager.NoticeClass> arg0 = (System.Collections.Generic.SortedDictionary<int,PlayerDataManager.NoticeClass>)ToLua.CheckObject(L, 2, typeof(System.Collections.Generic.SortedDictionary<int,PlayerDataManager.NoticeClass>));
			obj.NociceFlag = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index NociceFlag on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_RewardNotice(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			PlayerDataManager obj = (PlayerDataManager)o;
			ClientDataModel.RewardNoticeItemDataModel arg0 = (ClientDataModel.RewardNoticeItemDataModel)ToLua.CheckObject(L, 2, typeof(ClientDataModel.RewardNoticeItemDataModel));
			obj.RewardNotice = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index RewardNotice on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_RewardGiftRecord(IntPtr L)
	{
		try
		{
			System.Collections.Generic.List<DataTable.GiftRecord> arg0 = (System.Collections.Generic.List<DataTable.GiftRecord>)ToLua.CheckObject(L, 2, typeof(System.Collections.Generic.List<DataTable.GiftRecord>));
			PlayerDataManager.RewardGiftRecord = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_RewardFastKeySortId(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			PlayerDataManager obj = (PlayerDataManager)o;
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			obj.RewardFastKeySortId = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index RewardFastKeySortId on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_NoticeStrToSort(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			PlayerDataManager obj = (PlayerDataManager)o;
			System.Collections.Generic.Dictionary<string,int> arg0 = (System.Collections.Generic.Dictionary<string,int>)ToLua.CheckObject(L, 2, typeof(System.Collections.Generic.Dictionary<string,int>));
			obj.NoticeStrToSort = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index NoticeStrToSort on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_AccountDataModel(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			PlayerDataManager obj = (PlayerDataManager)o;
			ClientDataModel.AccountDataModel arg0 = (ClientDataModel.AccountDataModel)ToLua.CheckObject(L, 2, typeof(ClientDataModel.AccountDataModel));
			obj.AccountDataModel = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index AccountDataModel on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_CharacterGuid(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			PlayerDataManager obj = (PlayerDataManager)o;
			ulong arg0 = LuaDLL.tolua_checkuint64(L, 2);
			obj.CharacterGuid = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index CharacterGuid on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_Guid(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			PlayerDataManager obj = (PlayerDataManager)o;
			ulong arg0 = LuaDLL.tolua_checkuint64(L, 2);
			obj.Guid = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index Guid on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_Password(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			PlayerDataManager obj = (PlayerDataManager)o;
			string arg0 = ToLua.CheckString(L, 2);
			obj.Password = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index Password on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_PlayerDataModel(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			PlayerDataManager obj = (PlayerDataManager)o;
			ClientDataModel.PlayerDataModel arg0 = (ClientDataModel.PlayerDataModel)ToLua.CheckObject(L, 2, typeof(ClientDataModel.PlayerDataModel));
			obj.PlayerDataModel = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index PlayerDataModel on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_ReviewState(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			PlayerDataManager obj = (PlayerDataManager)o;
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			obj.ReviewState = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index ReviewState on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_SelectTargetData(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			PlayerDataManager obj = (PlayerDataManager)o;
			ClientDataModel.SelectTargetDataModel arg0 = (ClientDataModel.SelectTargetDataModel)ToLua.CheckObject(L, 2, typeof(ClientDataModel.SelectTargetDataModel));
			obj.SelectTargetData = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index SelectTargetData on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_ServerId(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			PlayerDataManager obj = (PlayerDataManager)o;
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			obj.ServerId = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index ServerId on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_UserName(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			PlayerDataManager obj = (PlayerDataManager)o;
			string arg0 = ToLua.CheckString(L, 2);
			obj.UserName = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index UserName on a nil value" : e.Message);
		}
	}
}

