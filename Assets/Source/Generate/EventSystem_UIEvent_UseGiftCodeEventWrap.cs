//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class EventSystem_UIEvent_UseGiftCodeEventWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(EventSystem.UIEvent_UseGiftCodeEvent), typeof(EventSystem.EventBase));
		L.RegFunction("New", _CreateEventSystem_UIEvent_UseGiftCodeEvent);
		L.RegFunction("__tostring", ToLua.op_ToString);
		L.RegVar("EVENT_TYPE", get_EVENT_TYPE, set_EVENT_TYPE);
		L.RegVar("Code", get_Code, set_Code);
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int _CreateEventSystem_UIEvent_UseGiftCodeEvent(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 1)
			{
				string arg0 = ToLua.CheckString(L, 1);
				EventSystem.UIEvent_UseGiftCodeEvent obj = new EventSystem.UIEvent_UseGiftCodeEvent(arg0);
				ToLua.PushObject(L, obj);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to ctor method: EventSystem.UIEvent_UseGiftCodeEvent.New");
			}
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_EVENT_TYPE(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushstring(L, EventSystem.UIEvent_UseGiftCodeEvent.EVENT_TYPE);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Code(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			EventSystem.UIEvent_UseGiftCodeEvent obj = (EventSystem.UIEvent_UseGiftCodeEvent)o;
			string ret = obj.Code;
			LuaDLL.lua_pushstring(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index Code on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_EVENT_TYPE(IntPtr L)
	{
		try
		{
			string arg0 = ToLua.CheckString(L, 2);
			EventSystem.UIEvent_UseGiftCodeEvent.EVENT_TYPE = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_Code(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			EventSystem.UIEvent_UseGiftCodeEvent obj = (EventSystem.UIEvent_UseGiftCodeEvent)o;
			string arg0 = ToLua.CheckString(L, 2);
			obj.Code = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index Code on a nil value" : e.Message);
		}
	}
}

