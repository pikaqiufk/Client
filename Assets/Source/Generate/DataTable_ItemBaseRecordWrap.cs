//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class DataTable_ItemBaseRecordWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(DataTable.ItemBaseRecord), typeof(System.Object));
		L.RegFunction("Init", Init);
		L.RegFunction("GetField", GetField);
		L.RegFunction("New", _CreateDataTable_ItemBaseRecord);
		L.RegFunction("__tostring", ToLua.op_ToString);
		L.RegVar("__TableName", get___TableName, set___TableName);
		L.RegVar("AuctionType", get_AuctionType, set_AuctionType);
		L.RegVar("Id", get_Id, null);
		L.RegVar("Name", get_Name, null);
		L.RegVar("Icon", get_Icon, null);
		L.RegVar("InitInBag", get_InitInBag, null);
		L.RegVar("CanInBag", get_CanInBag, null);
		L.RegVar("MaxCount", get_MaxCount, null);
		L.RegVar("Type", get_Type, null);
		L.RegVar("Desc", get_Desc, null);
		L.RegVar("Quality", get_Quality, null);
		L.RegVar("Color", get_Color, null);
		L.RegVar("UseLevel", get_UseLevel, null);
		L.RegVar("OccupationLimit", get_OccupationLimit, null);
		L.RegVar("BuyNeedType", get_BuyNeedType, null);
		L.RegVar("BuyNeedCount", get_BuyNeedCount, null);
		L.RegVar("CallBackType", get_CallBackType, null);
		L.RegVar("CallBackPrice", get_CallBackPrice, null);
		L.RegVar("Sell", get_Sell, null);
		L.RegVar("Exdata", get_Exdata, null);
		L.RegVar("DropModel", get_DropModel, null);
		L.RegVar("CanTrade", get_CanTrade, null);
		L.RegVar("TradeMaxCount", get_TradeMaxCount, null);
		L.RegVar("TradeMin", get_TradeMin, null);
		L.RegVar("TradeMax", get_TradeMax, null);
		L.RegVar("LevelLimit", get_LevelLimit, null);
		L.RegVar("CanUse", get_CanUse, null);
		L.RegVar("GetShowTip", get_GetShowTip, null);
		L.RegVar("ItemValue", get_ItemValue, null);
		L.RegVar("GetWay", get_GetWay, null);
		L.RegVar("DependItemId", get_DependItemId, null);
		L.RegVar("DependItemNum", get_DependItemNum, null);
		L.RegVar("StoreID", get_StoreID, null);
		L.RegVar("BoxOut", get_BoxOut, null);
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int _CreateDataTable_ItemBaseRecord(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 0)
			{
				DataTable.ItemBaseRecord obj = new DataTable.ItemBaseRecord();
				ToLua.PushObject(L, obj);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to ctor method: DataTable.ItemBaseRecord.New");
			}
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Init(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			DataTable.ItemBaseRecord obj = (DataTable.ItemBaseRecord)ToLua.CheckObject(L, 1, typeof(DataTable.ItemBaseRecord));
			string[] arg0 = ToLua.CheckStringArray(L, 2);
			obj.Init(arg0);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetField(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			DataTable.ItemBaseRecord obj = (DataTable.ItemBaseRecord)ToLua.CheckObject(L, 1, typeof(DataTable.ItemBaseRecord));
			string arg0 = ToLua.CheckString(L, 2);
			object o = obj.GetField(arg0);
			ToLua.Push(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get___TableName(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushstring(L, DataTable.ItemBaseRecord.__TableName);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_AuctionType(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			DataTable.ItemBaseRecord obj = (DataTable.ItemBaseRecord)o;
			int[] ret = obj.AuctionType;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index AuctionType on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Id(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			DataTable.ItemBaseRecord obj = (DataTable.ItemBaseRecord)o;
			int ret = obj.Id;
			LuaDLL.lua_pushinteger(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index Id on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Name(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			DataTable.ItemBaseRecord obj = (DataTable.ItemBaseRecord)o;
			string ret = obj.Name;
			LuaDLL.lua_pushstring(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index Name on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Icon(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			DataTable.ItemBaseRecord obj = (DataTable.ItemBaseRecord)o;
			int ret = obj.Icon;
			LuaDLL.lua_pushinteger(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index Icon on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_InitInBag(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			DataTable.ItemBaseRecord obj = (DataTable.ItemBaseRecord)o;
			int ret = obj.InitInBag;
			LuaDLL.lua_pushinteger(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index InitInBag on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_CanInBag(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			DataTable.ItemBaseRecord obj = (DataTable.ItemBaseRecord)o;
			int ret = obj.CanInBag;
			LuaDLL.lua_pushinteger(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index CanInBag on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_MaxCount(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			DataTable.ItemBaseRecord obj = (DataTable.ItemBaseRecord)o;
			int ret = obj.MaxCount;
			LuaDLL.lua_pushinteger(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index MaxCount on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Type(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			DataTable.ItemBaseRecord obj = (DataTable.ItemBaseRecord)o;
			int ret = obj.Type;
			LuaDLL.lua_pushinteger(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index Type on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Desc(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			DataTable.ItemBaseRecord obj = (DataTable.ItemBaseRecord)o;
			string ret = obj.Desc;
			LuaDLL.lua_pushstring(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index Desc on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Quality(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			DataTable.ItemBaseRecord obj = (DataTable.ItemBaseRecord)o;
			int ret = obj.Quality;
			LuaDLL.lua_pushinteger(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index Quality on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Color(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			DataTable.ItemBaseRecord obj = (DataTable.ItemBaseRecord)o;
			int ret = obj.Color;
			LuaDLL.lua_pushinteger(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index Color on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_UseLevel(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			DataTable.ItemBaseRecord obj = (DataTable.ItemBaseRecord)o;
			int ret = obj.UseLevel;
			LuaDLL.lua_pushinteger(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index UseLevel on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_OccupationLimit(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			DataTable.ItemBaseRecord obj = (DataTable.ItemBaseRecord)o;
			int ret = obj.OccupationLimit;
			LuaDLL.lua_pushinteger(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index OccupationLimit on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_BuyNeedType(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			DataTable.ItemBaseRecord obj = (DataTable.ItemBaseRecord)o;
			int ret = obj.BuyNeedType;
			LuaDLL.lua_pushinteger(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index BuyNeedType on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_BuyNeedCount(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			DataTable.ItemBaseRecord obj = (DataTable.ItemBaseRecord)o;
			int ret = obj.BuyNeedCount;
			LuaDLL.lua_pushinteger(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index BuyNeedCount on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_CallBackType(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			DataTable.ItemBaseRecord obj = (DataTable.ItemBaseRecord)o;
			int ret = obj.CallBackType;
			LuaDLL.lua_pushinteger(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index CallBackType on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_CallBackPrice(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			DataTable.ItemBaseRecord obj = (DataTable.ItemBaseRecord)o;
			int ret = obj.CallBackPrice;
			LuaDLL.lua_pushinteger(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index CallBackPrice on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Sell(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			DataTable.ItemBaseRecord obj = (DataTable.ItemBaseRecord)o;
			int ret = obj.Sell;
			LuaDLL.lua_pushinteger(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index Sell on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Exdata(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			DataTable.ItemBaseRecord obj = (DataTable.ItemBaseRecord)o;
			ClientDataModel.ReadonlyList<int> ret = obj.Exdata;
			ToLua.PushObject(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index Exdata on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_DropModel(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			DataTable.ItemBaseRecord obj = (DataTable.ItemBaseRecord)o;
			int ret = obj.DropModel;
			LuaDLL.lua_pushinteger(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index DropModel on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_CanTrade(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			DataTable.ItemBaseRecord obj = (DataTable.ItemBaseRecord)o;
			int ret = obj.CanTrade;
			LuaDLL.lua_pushinteger(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index CanTrade on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_TradeMaxCount(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			DataTable.ItemBaseRecord obj = (DataTable.ItemBaseRecord)o;
			int ret = obj.TradeMaxCount;
			LuaDLL.lua_pushinteger(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index TradeMaxCount on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_TradeMin(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			DataTable.ItemBaseRecord obj = (DataTable.ItemBaseRecord)o;
			int ret = obj.TradeMin;
			LuaDLL.lua_pushinteger(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index TradeMin on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_TradeMax(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			DataTable.ItemBaseRecord obj = (DataTable.ItemBaseRecord)o;
			int ret = obj.TradeMax;
			LuaDLL.lua_pushinteger(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index TradeMax on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_LevelLimit(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			DataTable.ItemBaseRecord obj = (DataTable.ItemBaseRecord)o;
			int ret = obj.LevelLimit;
			LuaDLL.lua_pushinteger(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index LevelLimit on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_CanUse(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			DataTable.ItemBaseRecord obj = (DataTable.ItemBaseRecord)o;
			int ret = obj.CanUse;
			LuaDLL.lua_pushinteger(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index CanUse on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_GetShowTip(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			DataTable.ItemBaseRecord obj = (DataTable.ItemBaseRecord)o;
			int ret = obj.GetShowTip;
			LuaDLL.lua_pushinteger(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index GetShowTip on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_ItemValue(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			DataTable.ItemBaseRecord obj = (DataTable.ItemBaseRecord)o;
			int ret = obj.ItemValue;
			LuaDLL.lua_pushinteger(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index ItemValue on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_GetWay(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			DataTable.ItemBaseRecord obj = (DataTable.ItemBaseRecord)o;
			int ret = obj.GetWay;
			LuaDLL.lua_pushinteger(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index GetWay on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_DependItemId(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			DataTable.ItemBaseRecord obj = (DataTable.ItemBaseRecord)o;
			int ret = obj.DependItemId;
			LuaDLL.lua_pushinteger(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index DependItemId on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_DependItemNum(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			DataTable.ItemBaseRecord obj = (DataTable.ItemBaseRecord)o;
			int ret = obj.DependItemNum;
			LuaDLL.lua_pushinteger(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index DependItemNum on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_StoreID(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			DataTable.ItemBaseRecord obj = (DataTable.ItemBaseRecord)o;
			int ret = obj.StoreID;
			LuaDLL.lua_pushinteger(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index StoreID on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_BoxOut(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			DataTable.ItemBaseRecord obj = (DataTable.ItemBaseRecord)o;
			string ret = obj.BoxOut;
			LuaDLL.lua_pushstring(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index BoxOut on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set___TableName(IntPtr L)
	{
		try
		{
			string arg0 = ToLua.CheckString(L, 2);
			DataTable.ItemBaseRecord.__TableName = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_AuctionType(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			DataTable.ItemBaseRecord obj = (DataTable.ItemBaseRecord)o;
			int[] arg0 = ToLua.CheckNumberArray<int>(L, 2);
			obj.AuctionType = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index AuctionType on a nil value" : e.Message);
		}
	}
}

