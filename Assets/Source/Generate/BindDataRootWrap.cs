//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class BindDataRootWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(BindDataRoot), typeof(UnityEngine.MonoBehaviour));
		L.RegFunction("RemoveBinding", RemoveBinding);
		L.RegFunction("SetBindDataSource", SetBindDataSource);
		L.RegFunction("__eq", op_Equality);
		L.RegFunction("__tostring", ToLua.op_ToString);
		L.RegVar("BindingNamelList", get_BindingNamelList, set_BindingNamelList);
		L.RegVar("IsBind", get_IsBind, set_IsBind);
		L.RegVar("Source", get_Source, set_Source);
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int RemoveBinding(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			BindDataRoot obj = (BindDataRoot)ToLua.CheckObject(L, 1, typeof(BindDataRoot));
			obj.RemoveBinding();
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SetBindDataSource(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			BindDataRoot obj = (BindDataRoot)ToLua.CheckObject(L, 1, typeof(BindDataRoot));
			object arg0 = ToLua.ToVarObject(L, 2);
			obj.SetBindDataSource(arg0);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int op_Equality(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			UnityEngine.Object arg0 = (UnityEngine.Object)ToLua.ToObject(L, 1);
			UnityEngine.Object arg1 = (UnityEngine.Object)ToLua.ToObject(L, 2);
			bool o = arg0 == arg1;
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_BindingNamelList(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			BindDataRoot obj = (BindDataRoot)o;
			System.Collections.Generic.List<BindingClassName> ret = obj.BindingNamelList;
			ToLua.PushObject(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index BindingNamelList on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_IsBind(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			BindDataRoot obj = (BindDataRoot)o;
			bool ret = obj.IsBind;
			LuaDLL.lua_pushboolean(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index IsBind on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Source(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			BindDataRoot obj = (BindDataRoot)o;
			object ret = obj.Source;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index Source on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_BindingNamelList(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			BindDataRoot obj = (BindDataRoot)o;
			System.Collections.Generic.List<BindingClassName> arg0 = (System.Collections.Generic.List<BindingClassName>)ToLua.CheckObject(L, 2, typeof(System.Collections.Generic.List<BindingClassName>));
			obj.BindingNamelList = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index BindingNamelList on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_IsBind(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			BindDataRoot obj = (BindDataRoot)o;
			bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
			obj.IsBind = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index IsBind on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_Source(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			BindDataRoot obj = (BindDataRoot)o;
			object arg0 = ToLua.ToVarObject(L, 2);
			obj.Source = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index Source on a nil value" : e.Message);
		}
	}
}

