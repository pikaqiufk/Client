//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class GameUtilsWrap
{
	public static void Register(LuaState L)
	{
		L.BeginStaticLibs("GameUtils");
		L.RegFunction("AddAttribute", AddAttribute);
		L.RegFunction("AnalyseChatInfoNodeArg", AnalyseChatInfoNodeArg);
		L.RegFunction("AttributeName", AttributeName);
		L.RegFunction("AttributeValue", AttributeValue);
		L.RegFunction("CalculateExpByLevel", CalculateExpByLevel);
		L.RegFunction("CharacterIdIsRobot", CharacterIdIsRobot);
		L.RegFunction("CheckInheritType", CheckInheritType);
		L.RegFunction("CheckLanguageName", CheckLanguageName);
		L.RegFunction("CheckName", CheckName);
		L.RegFunction("CheckSensitiveName", CheckSensitiveName);
		L.RegFunction("CleanGrid", CleanGrid);
		L.RegFunction("ColorToString", ColorToString);
		L.RegFunction("ContainEmoji", ContainEmoji);
		L.RegFunction("ConvertChatContent", ConvertChatContent);
		L.RegFunction("ConvertChatInfoNode", ConvertChatInfoNode);
		L.RegFunction("DividePrecision", DividePrecision);
		L.RegFunction("EnterFuben", EnterFuben);
		L.RegFunction("EquipAttrValueRef", EquipAttrValueRef);
		L.RegFunction("EquipAttrValueRefEx", EquipAttrValueRefEx);
		L.RegFunction("EquipRandomAttribute", EquipRandomAttribute);
		L.RegFunction("ExitLogin", ExitLogin);
		L.RegFunction("FlyTo", FlyTo);
		L.RegFunction("FastReach", FastReach);
		L.RegFunction("GetAllSkillTalentCount", GetAllSkillTalentCount);
		L.RegFunction("GetAttibuteFormat", GetAttibuteFormat);
		L.RegFunction("GetAttrId", GetAttrId);
		L.RegFunction("GetAttrIndex", GetAttrIndex);
		L.RegFunction("GetAttrIndexElf", GetAttrIndexElf);
		L.RegFunction("GetBaseAttr", GetBaseAttr);
		L.RegFunction("GetBaseAttrIdElf", GetBaseAttrIdElf);
		L.RegFunction("GetBigValueStr", GetBigValueStr);
		L.RegFunction("GetBSParamByIndex", GetBSParamByIndex);
		L.RegFunction("GetChannelString", GetChannelString);
		L.RegFunction("GetDictionaryText", GetDictionaryText);
		L.RegFunction("GetEquipBagId", GetEquipBagId);
		L.RegFunction("GetFullPath", GetFullPath);
		L.RegFunction("GetIntFromFile", GetIntFromFile);
		L.RegFunction("GetItemInfoType", GetItemInfoType);
		L.RegFunction("GetLastTimeDiffString", GetLastTimeDiffString);
		L.RegFunction("GetMd5Hash", GetMd5Hash);
		L.RegFunction("GetNoCacheUrl", GetNoCacheUrl);
		L.RegFunction("GetResolutionRadio", GetResolutionRadio);
		L.RegFunction("GetRewardCount", GetRewardCount);
		L.RegFunction("GetServerAddress", GetServerAddress);
		L.RegFunction("GetServerName", GetServerName);
		L.RegFunction("GetStreamingAssetPath", GetStreamingAssetPath);
		L.RegFunction("GetStringFromFile", GetStringFromFile);
		L.RegFunction("GetStringFromPackage", GetStringFromPackage);
		L.RegFunction("GetTableColor", GetTableColor);
		L.RegFunction("GetTableColorString", GetTableColorString);
		L.RegFunction("GetTimeDiffString", GetTimeDiffString);
		L.RegFunction("GotoUiTab", GotoUiTab);
		L.RegFunction("GuideToBuyVip", GuideToBuyVip);
		L.RegFunction("Init", Init);
		L.RegFunction("InitAddAttr", InitAddAttr);
		L.RegFunction("InitSkillBook", InitSkillBook);
		L.RegFunction("InvokeWebServer", InvokeWebServer);
		L.RegFunction("IsCanEquip", IsCanEquip);
		L.RegFunction("IsMyEnemy", IsMyEnemy);
		L.RegFunction("IsOurChannel", IsOurChannel);
		L.RegFunction("LaunchAction", LaunchAction);
		L.RegFunction("MultiplyPrecision", MultiplyPrecision);
		L.RegFunction("NumEntoCh", NumEntoCh);
		L.RegFunction("OnchangeBuildingPet", OnchangeBuildingPet);
		L.RegFunction("OnQuickRepair", OnQuickRepair);
		L.RegFunction("OnReceiveChatMsg", OnReceiveChatMsg);
		L.RegFunction("CheckFuctionOnCondition", CheckFuctionOnCondition);
		L.RegFunction("CheckFuctionOnConditionByMission", CheckFuctionOnConditionByMission);
		L.RegFunction("GetCurMainMissionId", GetCurMainMissionId);
		L.RegFunction("GetMainMissionOrderByFunctionId", GetMainMissionOrderByFunctionId);
		L.RegFunction("CheckFuctionOnConditionByLevel", CheckFuctionOnConditionByLevel);
		L.RegFunction("PkValueToColorId", PkValueToColorId);
		L.RegFunction("PushMessageTip", PushMessageTip);
		L.RegFunction("ReplaceSensitiveString", ReplaceSensitiveString);
		L.RegFunction("ResetEffect", ResetEffect);
		L.RegFunction("ServerStringAnalysis", ServerStringAnalysis);
		L.RegFunction("SetAttribute", SetAttribute);
		L.RegFunction("SetAttributeBase", SetAttributeBase);
		L.RegFunction("SetSpriteGrey", SetSpriteGrey);
		L.RegFunction("SetSpriteIcon", SetSpriteIcon);
		L.RegFunction("ShowHintTip", ShowHintTip);
		L.RegFunction("ShowItemDataTip", ShowItemDataTip);
		L.RegFunction("ShowItemIdTip", ShowItemIdTip);
		L.RegFunction("ShowLoginTimeOutTip", ShowLoginTimeOutTip);
		L.RegFunction("ShowNetErrorHint", ShowNetErrorHint);
		L.RegFunction("StringToColor", StringToColor);
		L.RegFunction("TimeString", TimeString);
		L.RegFunction("TimeStringHM", TimeStringHM);
		L.RegFunction("TimeStringMS", TimeStringMS);
		L.RegFunction("TitleAddAttr", TitleAddAttr);
		L.RegFunction("UnicodeToString", UnicodeToString);
		L.RegFunction("SplitString", SplitString);
		L.RegFunction("UseItem", UseItem);
		L.RegFunction("IsQuickBuyGift", IsQuickBuyGift);
		L.RegFunction("CheckEnoughItems", CheckEnoughItems);
		L.RegFunction("Vector3PlaneDistance", Vector3PlaneDistance);
		L.RegFunction("ViewBigValueStr", ViewBigValueStr);
		L.RegConstant("_PRECISION", 0.00999999977648258);
		L.RegConstant("PRECISION", 100);
		L.RegVar("AchieveFlagConfig", get_AchieveFlagConfig, set_AchieveFlagConfig);
		L.RegVar("AttrName", get_AttrName, set_AttrName);
		L.RegVar("AutoFightLongDistance", get_AutoFightLongDistance, set_AutoFightLongDistance);
		L.RegVar("AutoFightShortDistance", get_AutoFightShortDistance, set_AutoFightShortDistance);
		L.RegVar("AutoMedicineHpCd", get_AutoMedicineHpCd, set_AutoMedicineHpCd);
		L.RegVar("AutoMedicineMpCd", get_AutoMedicineMpCd, set_AutoMedicineMpCd);
		L.RegVar("AutoPickUpDistance", get_AutoPickUpDistance, set_AutoPickUpDistance);
		L.RegVar("AutoPickUpDistanceMax", get_AutoPickUpDistanceMax, set_AutoPickUpDistanceMax);
		L.RegVar("BeginCoclorStrRegex", get_BeginCoclorStrRegex, set_BeginCoclorStrRegex);
		L.RegVar("BlockLayerDuration", get_BlockLayerDuration, set_BlockLayerDuration);
		L.RegVar("ChatWorldCount", get_ChatWorldCount, set_ChatWorldCount);
		L.RegVar("ConditionToFlag", get_ConditionToFlag, set_ConditionToFlag);
		L.RegVar("DistanceRemoveTarget", get_DistanceRemoveTarget, set_DistanceRemoveTarget);
		L.RegVar("DungeonShowDelay", get_DungeonShowDelay, set_DungeonShowDelay);
		L.RegVar("ElfFlagConfig", get_ElfFlagConfig, set_ElfFlagConfig);
		L.RegVar("ElfSecondCondition", get_ElfSecondCondition, set_ElfSecondCondition);
		L.RegVar("ElfThirdCondition", get_ElfThirdCondition, set_ElfThirdCondition);
		L.RegVar("EndCoclorStrRegex", get_EndCoclorStrRegex, set_EndCoclorStrRegex);
		L.RegVar("EquipValueRef", get_EquipValueRef, set_EquipValueRef);
		L.RegVar("FriendFlagConfig", get_FriendFlagConfig, set_FriendFlagConfig);
		L.RegVar("FubenStar1Time", get_FubenStar1Time, set_FubenStar1Time);
		L.RegVar("FubenStar2Time", get_FubenStar2Time, set_FubenStar2Time);
		L.RegVar("FubenStar3Time", get_FubenStar3Time, set_FubenStar3Time);
		L.RegVar("GianItemTip", get_GianItemTip, set_GianItemTip);
		L.RegVar("green", get_green, set_green);
		L.RegVar("grey", get_grey, set_grey);
		L.RegVar("HandBookGroupFlagConfig", get_HandBookGroupFlagConfig, set_HandBookGroupFlagConfig);
		L.RegVar("HandBookWantedFlagConfig", get_HandBookWantedFlagConfig, set_HandBookWantedFlagConfig);
		L.RegVar("HornWorldCount", get_HornWorldCount, set_HornWorldCount);
		L.RegVar("MailFlagConfig", get_MailFlagConfig, set_MailFlagConfig);
		L.RegVar("MaxLevel", get_MaxLevel, set_MaxLevel);
		L.RegVar("MaxMailCount", get_MaxMailCount, set_MaxMailCount);
		L.RegVar("OfflineExpRatelimit", get_OfflineExpRatelimit, set_OfflineExpRatelimit);
		L.RegVar("OrderRefreshCost", get_OrderRefreshCost, set_OrderRefreshCost);
		L.RegVar("PlayerInfoCacheTime", get_PlayerInfoCacheTime, set_PlayerInfoCacheTime);
		L.RegVar("RankFlagConfig", get_RankFlagConfig, set_RankFlagConfig);
		L.RegVar("RankWorshipAction", get_RankWorshipAction, set_RankWorshipAction);
		L.RegVar("SkillInnateFlagConfig", get_SkillInnateFlagConfig, set_SkillInnateFlagConfig);
		L.RegVar("SkillTalentFlagConfig", get_SkillTalentFlagConfig, set_SkillTalentFlagConfig);
		L.RegVar("StarIcon", get_StarIcon, set_StarIcon);
		L.RegVar("SweepCouponId", get_SweepCouponId, set_SweepCouponId);
		L.RegVar("SystemNoticeRollingScreenLimit", get_SystemNoticeRollingScreenLimit, set_SystemNoticeRollingScreenLimit);
		L.RegVar("SystemNoticeScrollingSpeed", get_SystemNoticeScrollingSpeed, set_SystemNoticeScrollingSpeed);
		L.RegVar("TeamFlagConfig", get_TeamFlagConfig, set_TeamFlagConfig);
		L.RegVar("TimeOver", get_TimeOver, set_TimeOver);
		L.RegVar("TrumpeMoveSpeedt", get_TrumpeMoveSpeedt, set_TrumpeMoveSpeedt);
		L.RegVar("TrumpetDurationTime", get_TrumpetDurationTime, set_TrumpetDurationTime);
		L.RegVar("UnionFlagConfig", get_UnionFlagConfig, set_UnionFlagConfig);
		L.RegVar("WingQualityMax", get_WingQualityMax, set_WingQualityMax);
		L.RegVar("WishFlagReward", get_WishFlagReward, set_WishFlagReward);
		L.RegVar("LanguageIndex", get_LanguageIndex, set_LanguageIndex);
		L.EndStaticLibs();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int AddAttribute(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 4);
			System.Collections.ObjectModel.ObservableCollection<ClientDataModel.AttributeChangeDataModel> arg0 = (System.Collections.ObjectModel.ObservableCollection<ClientDataModel.AttributeChangeDataModel>)ToLua.CheckObject(L, 1, typeof(System.Collections.ObjectModel.ObservableCollection<ClientDataModel.AttributeChangeDataModel>));
			int arg1 = (int)LuaDLL.luaL_checknumber(L, 2);
			int arg2 = (int)LuaDLL.luaL_checknumber(L, 3);
			int arg3 = (int)LuaDLL.luaL_checknumber(L, 4);
			GameUtils.AddAttribute(arg0, arg1, arg2, arg3);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int AnalyseChatInfoNodeArg(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			string arg0 = ToLua.CheckString(L, 1);
			string o = GameUtils.AnalyseChatInfoNodeArg(arg0);
			LuaDLL.lua_pushstring(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int AttributeName(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 1);
			string o = GameUtils.AttributeName(arg0);
			LuaDLL.lua_pushstring(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int AttributeValue(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 1);
			int arg1 = (int)LuaDLL.luaL_checknumber(L, 2);
			bool arg2 = LuaDLL.luaL_checkboolean(L, 3);
			string o = GameUtils.AttributeValue(arg0, arg1, arg2);
			LuaDLL.lua_pushstring(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int CalculateExpByLevel(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 1);
			int arg1 = (int)LuaDLL.luaL_checknumber(L, 2);
			int o = GameUtils.CalculateExpByLevel(arg0, arg1);
			LuaDLL.lua_pushinteger(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int CharacterIdIsRobot(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			ulong arg0 = LuaDLL.tolua_checkuint64(L, 1);
			bool o = GameUtils.CharacterIdIsRobot(arg0);
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int CheckInheritType(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			DataTable.ItemBaseRecord arg0 = (DataTable.ItemBaseRecord)ToLua.CheckObject(L, 1, typeof(DataTable.ItemBaseRecord));
			DataTable.ItemBaseRecord arg1 = (DataTable.ItemBaseRecord)ToLua.CheckObject(L, 2, typeof(DataTable.ItemBaseRecord));
			bool o = GameUtils.CheckInheritType(arg0, arg1);
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int CheckLanguageName(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			string arg0 = ToLua.CheckString(L, 1);
			bool o = GameUtils.CheckLanguageName(arg0);
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int CheckName(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			string arg0 = ToLua.CheckString(L, 1);
			bool o = GameUtils.CheckName(arg0);
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int CheckSensitiveName(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			string arg0 = ToLua.CheckString(L, 1);
			bool o = GameUtils.CheckSensitiveName(arg0);
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int CleanGrid(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			UnityEngine.GameObject arg0 = (UnityEngine.GameObject)ToLua.CheckUnityObject(L, 1, typeof(UnityEngine.GameObject));
			GameUtils.CleanGrid(arg0);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ColorToString(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			UnityEngine.Color arg0 = ToLua.ToColor(L, 1);
			string o = GameUtils.ColorToString(arg0);
			LuaDLL.lua_pushstring(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ContainEmoji(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			string arg0 = ToLua.CheckString(L, 1);
			bool o = GameUtils.ContainEmoji(arg0);
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ConvertChatContent(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			string arg0 = ToLua.CheckString(L, 1);
			string o = GameUtils.ConvertChatContent(arg0);
			LuaDLL.lua_pushstring(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ConvertChatInfoNode(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			DataContract.ChatInfoNodeData arg0 = (DataContract.ChatInfoNodeData)ToLua.CheckObject(L, 1, typeof(DataContract.ChatInfoNodeData));
			string o = GameUtils.ConvertChatInfoNode(arg0);
			LuaDLL.lua_pushstring(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int DividePrecision(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 1);
			float o = GameUtils.DividePrecision(arg0);
			LuaDLL.lua_pushnumber(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int EnterFuben(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 1);
			GameUtils.EnterFuben(arg0);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int EquipAttrValueRef(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 1);
			int arg1 = (int)LuaDLL.luaL_checknumber(L, 2);
			int o = GameUtils.EquipAttrValueRef(arg0, arg1);
			LuaDLL.lua_pushinteger(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int EquipAttrValueRefEx(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 1);
			int arg1 = (int)LuaDLL.luaL_checknumber(L, 2);
			int o = GameUtils.EquipAttrValueRefEx(arg0, arg1);
			LuaDLL.lua_pushinteger(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int EquipRandomAttribute(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			ClientDataModel.BagItemDataModel arg0 = (ClientDataModel.BagItemDataModel)ToLua.CheckObject(L, 1, typeof(ClientDataModel.BagItemDataModel));
			GameUtils.EquipRandomAttribute(arg0);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ExitLogin(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			System.Action arg0 = null;
			LuaTypes funcType1 = LuaDLL.lua_type(L, 1);

			if (funcType1 != LuaTypes.LUA_TFUNCTION)
			{
				 arg0 = (System.Action)ToLua.CheckObject(L, 1, typeof(System.Action));
			}
			else
			{
				LuaFunction func = ToLua.ToLuaFunction(L, 1);
				arg0 = DelegateFactory.CreateDelegate(typeof(System.Action), func) as System.Action;
			}

			GameUtils.ExitLogin(arg0);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int FlyTo(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 4);
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 1);
			float arg1 = (float)LuaDLL.luaL_checknumber(L, 2);
			float arg2 = (float)LuaDLL.luaL_checknumber(L, 3);
			System.Action<int> arg3 = null;
			LuaTypes funcType4 = LuaDLL.lua_type(L, 4);

			if (funcType4 != LuaTypes.LUA_TFUNCTION)
			{
				 arg3 = (System.Action<int>)ToLua.CheckObject(L, 4, typeof(System.Action<int>));
			}
			else
			{
				LuaFunction func = ToLua.ToLuaFunction(L, 4);
				arg3 = DelegateFactory.CreateDelegate(typeof(System.Action<int>), func) as System.Action<int>;
			}

			GameUtils.FlyTo(arg0, arg1, arg2, arg3);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int FastReach(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 4);
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 1);
			float arg1 = (float)LuaDLL.luaL_checknumber(L, 2);
			float arg2 = (float)LuaDLL.luaL_checknumber(L, 3);
			System.Action<int> arg3 = null;
			LuaTypes funcType4 = LuaDLL.lua_type(L, 4);

			if (funcType4 != LuaTypes.LUA_TFUNCTION)
			{
				 arg3 = (System.Action<int>)ToLua.CheckObject(L, 4, typeof(System.Action<int>));
			}
			else
			{
				LuaFunction func = ToLua.ToLuaFunction(L, 4);
				arg3 = DelegateFactory.CreateDelegate(typeof(System.Action<int>), func) as System.Action<int>;
			}

			GameUtils.FastReach(arg0, arg1, arg2, arg3);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetAllSkillTalentCount(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 0);
			int o = GameUtils.GetAllSkillTalentCount();
			LuaDLL.lua_pushinteger(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetAttibuteFormat(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 1);
			int arg1 = (int)LuaDLL.luaL_checknumber(L, 2);
			int arg2 = (int)LuaDLL.luaL_checknumber(L, 3);
			string o = GameUtils.GetAttibuteFormat(arg0, arg1, arg2);
			LuaDLL.lua_pushstring(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetAttrId(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 1);
			int o = GameUtils.GetAttrId(arg0);
			LuaDLL.lua_pushinteger(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetAttrIndex(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 1);
			int o = GameUtils.GetAttrIndex(arg0);
			LuaDLL.lua_pushinteger(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetAttrIndexElf(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 1);
			int o = GameUtils.GetAttrIndexElf(arg0);
			LuaDLL.lua_pushinteger(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetBaseAttr(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 4);
			DataTable.EquipBaseRecord arg0 = (DataTable.EquipBaseRecord)ToLua.CheckObject(L, 1, typeof(DataTable.EquipBaseRecord));
			int arg1 = (int)LuaDLL.luaL_checknumber(L, 2);
			int arg2 = (int)LuaDLL.luaL_checknumber(L, 3);
			int arg3 = (int)LuaDLL.luaL_checknumber(L, 4);
			int o = GameUtils.GetBaseAttr(arg0, arg1, arg2, arg3);
			LuaDLL.lua_pushinteger(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetBaseAttrIdElf(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 1);
			int o = GameUtils.GetBaseAttrIdElf(arg0);
			LuaDLL.lua_pushinteger(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetBigValueStr(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 1);
			string o = GameUtils.GetBigValueStr(arg0);
			LuaDLL.lua_pushstring(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetBSParamByIndex(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 4);
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 1);
			DataTable.BuildingServiceRecord arg1 = (DataTable.BuildingServiceRecord)ToLua.CheckObject(L, 2, typeof(DataTable.BuildingServiceRecord));
			System.Collections.Generic.List<int> arg2 = (System.Collections.Generic.List<int>)ToLua.CheckObject(L, 3, typeof(System.Collections.Generic.List<int>));
			int arg3 = (int)LuaDLL.luaL_checknumber(L, 4);
			int o = GameUtils.GetBSParamByIndex(arg0, arg1, arg2, arg3);
			LuaDLL.lua_pushinteger(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetChannelString(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 0);
			string o = GameUtils.GetChannelString();
			LuaDLL.lua_pushstring(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetDictionaryText(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 1);
			string o = GameUtils.GetDictionaryText(arg0);
			LuaDLL.lua_pushstring(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetEquipBagId(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			DataTable.EquipBaseRecord arg0 = (DataTable.EquipBaseRecord)ToLua.CheckObject(L, 1, typeof(DataTable.EquipBaseRecord));
			int o = GameUtils.GetEquipBagId(arg0);
			LuaDLL.lua_pushinteger(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetFullPath(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			UnityEngine.Transform arg0 = (UnityEngine.Transform)ToLua.CheckUnityObject(L, 1, typeof(UnityEngine.Transform));
			string o = GameUtils.GetFullPath(arg0);
			LuaDLL.lua_pushstring(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetIntFromFile(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			string arg0 = ToLua.CheckString(L, 1);
			int arg1;
			bool o = GameUtils.GetIntFromFile(arg0, out arg1);
			LuaDLL.lua_pushboolean(L, o);
			LuaDLL.lua_pushinteger(L, arg1);
			return 2;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetItemInfoType(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 1);
			eItemInfoType o = GameUtils.GetItemInfoType(arg0);
			ToLua.Push(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetLastTimeDiffString(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 1 && TypeChecker.CheckTypes(L, 1, typeof(System.TimeSpan)))
			{
				System.TimeSpan arg0 = (System.TimeSpan)ToLua.ToObject(L, 1);
				string o = GameUtils.GetLastTimeDiffString(arg0);
				LuaDLL.lua_pushstring(L, o);
				return 1;
			}
			else if (count == 1 && TypeChecker.CheckTypes(L, 1, typeof(System.DateTime)))
			{
				System.DateTime arg0 = (System.DateTime)ToLua.ToObject(L, 1);
				string o = GameUtils.GetLastTimeDiffString(arg0);
				LuaDLL.lua_pushstring(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: GameUtils.GetLastTimeDiffString");
			}
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetMd5Hash(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			string arg0 = ToLua.CheckString(L, 1);
			string o = GameUtils.GetMd5Hash(arg0);
			LuaDLL.lua_pushstring(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetNoCacheUrl(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			string arg0 = ToLua.CheckString(L, 1);
			string o = GameUtils.GetNoCacheUrl(arg0);
			LuaDLL.lua_pushstring(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetResolutionRadio(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 0);
			float o = GameUtils.GetResolutionRadio();
			LuaDLL.lua_pushnumber(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetRewardCount(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 4);
			DataTable.FubenRecord arg0 = (DataTable.FubenRecord)ToLua.CheckObject(L, 1, typeof(DataTable.FubenRecord));
			int arg1 = (int)LuaDLL.luaL_checknumber(L, 2);
			int arg2 = (int)LuaDLL.luaL_checknumber(L, 3);
			int arg3 = (int)LuaDLL.luaL_checknumber(L, 4);
			int o = GameUtils.GetRewardCount(arg0, arg1, arg2, arg3);
			LuaDLL.lua_pushinteger(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetServerAddress(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 0);
			string o = GameUtils.GetServerAddress();
			LuaDLL.lua_pushstring(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetServerName(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 1);
			string o = GameUtils.GetServerName(arg0);
			LuaDLL.lua_pushstring(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetStreamingAssetPath(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 0);
			string o = GameUtils.GetStreamingAssetPath();
			LuaDLL.lua_pushstring(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetStringFromFile(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			string arg0 = ToLua.CheckString(L, 1);
			string arg1 = null;
			bool o = GameUtils.GetStringFromFile(arg0, out arg1);
			LuaDLL.lua_pushboolean(L, o);
			LuaDLL.lua_pushstring(L, arg1);
			return 2;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetStringFromPackage(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			string arg0 = ToLua.CheckString(L, 1);
			string arg1 = null;
			bool o = GameUtils.GetStringFromPackage(arg0, out arg1);
			LuaDLL.lua_pushboolean(L, o);
			LuaDLL.lua_pushstring(L, arg1);
			return 2;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetTableColor(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 1);
			UnityEngine.Color o = GameUtils.GetTableColor(arg0);
			ToLua.Push(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetTableColorString(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 1);
			string o = GameUtils.GetTableColorString(arg0);
			LuaDLL.lua_pushstring(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetTimeDiffString(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 2 && TypeChecker.CheckTypes(L, 1, typeof(System.DateTime), typeof(bool)))
			{
				System.DateTime arg0 = (System.DateTime)ToLua.ToObject(L, 1);
				bool arg1 = LuaDLL.lua_toboolean(L, 2);
				string o = GameUtils.GetTimeDiffString(arg0, arg1);
				LuaDLL.lua_pushstring(L, o);
				return 1;
			}
			else if (count == 2 && TypeChecker.CheckTypes(L, 1, typeof(int), typeof(bool)))
			{
				int arg0 = (int)LuaDLL.lua_tonumber(L, 1);
				bool arg1 = LuaDLL.lua_toboolean(L, 2);
				string o = GameUtils.GetTimeDiffString(arg0, arg1);
				LuaDLL.lua_pushstring(L, o);
				return 1;
			}
			else if (count == 2 && TypeChecker.CheckTypes(L, 1, typeof(System.TimeSpan), typeof(bool)))
			{
				System.TimeSpan arg0 = (System.TimeSpan)ToLua.ToObject(L, 1);
				bool arg1 = LuaDLL.lua_toboolean(L, 2);
				string o = GameUtils.GetTimeDiffString(arg0, arg1);
				LuaDLL.lua_pushstring(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: GameUtils.GetTimeDiffString");
			}
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GotoUiTab(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 4);
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 1);
			int arg1 = (int)LuaDLL.luaL_checknumber(L, 2);
			int arg2 = (int)LuaDLL.luaL_checknumber(L, 3);
			int arg3 = (int)LuaDLL.luaL_checknumber(L, 4);
			GameUtils.GotoUiTab(arg0, arg1, arg2, arg3);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GuideToBuyVip(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 1 && TypeChecker.CheckTypes(L, 1, typeof(string)))
			{
				string arg0 = ToLua.ToString(L, 1);
				GameUtils.GuideToBuyVip(arg0);
				return 0;
			}
			else if (count == 2 && TypeChecker.CheckTypes(L, 1, typeof(int), typeof(int)))
			{
				int arg0 = (int)LuaDLL.lua_tonumber(L, 1);
				int arg1 = (int)LuaDLL.lua_tonumber(L, 2);
				GameUtils.GuideToBuyVip(arg0, arg1);
				return 0;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: GameUtils.GuideToBuyVip");
			}
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Init(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 0);
			GameUtils.Init();
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int InitAddAttr(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			ClientDataModel.BagItemDataModel arg0 = (ClientDataModel.BagItemDataModel)ToLua.CheckObject(L, 1, typeof(ClientDataModel.BagItemDataModel));
			int arg1 = (int)LuaDLL.luaL_checknumber(L, 2);
			GameUtils.InitAddAttr(arg0, arg1);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int InitSkillBook(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			ClientDataModel.ItemInfoDataModel arg0 = (ClientDataModel.ItemInfoDataModel)ToLua.CheckObject(L, 1, typeof(ClientDataModel.ItemInfoDataModel));
			GameUtils.InitSkillBook(arg0);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int InvokeWebServer(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			string arg0 = ToLua.CheckString(L, 1);
			System.Action<System.IO.Stream> arg1 = null;
			LuaTypes funcType2 = LuaDLL.lua_type(L, 2);

			if (funcType2 != LuaTypes.LUA_TFUNCTION)
			{
				 arg1 = (System.Action<System.IO.Stream>)ToLua.CheckObject(L, 2, typeof(System.Action<System.IO.Stream>));
			}
			else
			{
				LuaFunction func = ToLua.ToLuaFunction(L, 2);
				arg1 = DelegateFactory.CreateDelegate(typeof(System.Action<System.IO.Stream>), func) as System.Action<System.IO.Stream>;
			}

			GameUtils.InvokeWebServer(arg0, arg1);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int IsCanEquip(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			DataTable.EquipBaseRecord arg0 = (DataTable.EquipBaseRecord)ToLua.CheckObject(L, 1, typeof(DataTable.EquipBaseRecord));
			int arg1 = (int)LuaDLL.luaL_checknumber(L, 2);
			bool o = GameUtils.IsCanEquip(arg0, arg1);
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int IsMyEnemy(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 1);
			int arg1 = (int)LuaDLL.luaL_checknumber(L, 2);
			bool o = GameUtils.IsMyEnemy(arg0, arg1);
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int IsOurChannel(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 0);
			bool o = GameUtils.IsOurChannel();
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int LaunchAction(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 4);
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 1);
			float arg1 = (float)LuaDLL.luaL_checknumber(L, 2);
			System.Action arg2 = null;
			LuaTypes funcType3 = LuaDLL.lua_type(L, 3);

			if (funcType3 != LuaTypes.LUA_TFUNCTION)
			{
				 arg2 = (System.Action)ToLua.CheckObject(L, 3, typeof(System.Action));
			}
			else
			{
				LuaFunction func = ToLua.ToLuaFunction(L, 3);
				arg2 = DelegateFactory.CreateDelegate(typeof(System.Action), func) as System.Action;
			}

			System.Action arg3 = null;
			LuaTypes funcType4 = LuaDLL.lua_type(L, 4);

			if (funcType4 != LuaTypes.LUA_TFUNCTION)
			{
				 arg3 = (System.Action)ToLua.CheckObject(L, 4, typeof(System.Action));
			}
			else
			{
				LuaFunction func = ToLua.ToLuaFunction(L, 4);
				arg3 = DelegateFactory.CreateDelegate(typeof(System.Action), func) as System.Action;
			}

			System.Collections.IEnumerator o = GameUtils.LaunchAction(arg0, arg1, arg2, arg3);
			ToLua.Push(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int MultiplyPrecision(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			float arg0 = (float)LuaDLL.luaL_checknumber(L, 1);
			int o = GameUtils.MultiplyPrecision(arg0);
			LuaDLL.lua_pushinteger(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int NumEntoCh(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 1);
			string o = GameUtils.NumEntoCh(arg0);
			LuaDLL.lua_pushstring(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int OnchangeBuildingPet(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 3 && TypeChecker.CheckTypes(L, 1, typeof(System.Collections.Generic.List<int>), typeof(int), typeof(System.Collections.Generic.List<DataTable.PetSkillRecord>)))
			{
				System.Collections.Generic.List<int> arg0 = (System.Collections.Generic.List<int>)ToLua.ToObject(L, 1);
				int arg1 = (int)LuaDLL.lua_tonumber(L, 2);
				System.Collections.Generic.List<DataTable.PetSkillRecord> arg2 = (System.Collections.Generic.List<DataTable.PetSkillRecord>)ToLua.ToObject(L, 3);
				GameUtils.OnchangeBuildingPet(arg0, arg1, arg2);
				return 0;
			}
			else if (count == 3 && TypeChecker.CheckTypes(L, 1, typeof(ClientDataModel.ReadonlyList<int>), typeof(int), typeof(System.Collections.Generic.List<DataTable.PetSkillRecord>)))
			{
				ClientDataModel.ReadonlyList<int> arg0 = (ClientDataModel.ReadonlyList<int>)ToLua.ToObject(L, 1);
				int arg1 = (int)LuaDLL.lua_tonumber(L, 2);
				System.Collections.Generic.List<DataTable.PetSkillRecord> arg2 = (System.Collections.Generic.List<DataTable.PetSkillRecord>)ToLua.ToObject(L, 3);
				GameUtils.OnchangeBuildingPet(arg0, arg1, arg2);
				return 0;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: GameUtils.OnchangeBuildingPet");
			}
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int OnQuickRepair(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 0);
			GameUtils.OnQuickRepair();
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int OnReceiveChatMsg(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 5);
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 1);
			ulong arg1 = LuaDLL.tolua_checkuint64(L, 2);
			string arg2 = ToLua.CheckString(L, 3);
			DataContract.ChatMessageContent arg3 = (DataContract.ChatMessageContent)ToLua.CheckObject(L, 4, typeof(DataContract.ChatMessageContent));
			string arg4 = ToLua.CheckString(L, 5);
			GameUtils.OnReceiveChatMsg(arg0, arg1, arg2, arg3, arg4);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int CheckFuctionOnCondition(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 1);
			int arg1 = (int)LuaDLL.luaL_checknumber(L, 2);
			int arg2 = (int)LuaDLL.luaL_checknumber(L, 3);
			int o = GameUtils.CheckFuctionOnCondition(arg0, arg1, arg2);
			LuaDLL.lua_pushinteger(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int CheckFuctionOnConditionByMission(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 1);
			int o = GameUtils.CheckFuctionOnConditionByMission(arg0);
			LuaDLL.lua_pushinteger(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetCurMainMissionId(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 0);
			int o = GameUtils.GetCurMainMissionId();
			LuaDLL.lua_pushinteger(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetMainMissionOrderByFunctionId(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 1);
			int o = GameUtils.GetMainMissionOrderByFunctionId(arg0);
			LuaDLL.lua_pushinteger(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int CheckFuctionOnConditionByLevel(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 1);
			int o = GameUtils.CheckFuctionOnConditionByLevel(arg0);
			LuaDLL.lua_pushinteger(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int PkValueToColorId(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 1);
			int o = GameUtils.PkValueToColorId(arg0);
			LuaDLL.lua_pushinteger(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int PushMessageTip(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 1);
			string arg1 = ToLua.CheckString(L, 2);
			GameUtils.PushMessageTip(arg0, arg1);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ReplaceSensitiveString(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			string arg0 = ToLua.CheckString(L, 1);
			string o = GameUtils.ReplaceSensitiveString(arg0);
			LuaDLL.lua_pushstring(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ResetEffect(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			UnityEngine.GameObject arg0 = (UnityEngine.GameObject)ToLua.CheckUnityObject(L, 1, typeof(UnityEngine.GameObject));
			GameUtils.ResetEffect(arg0);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ServerStringAnalysis(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			string arg0 = ToLua.CheckString(L, 1);
			string o = GameUtils.ServerStringAnalysis(arg0);
			LuaDLL.lua_pushstring(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SetAttribute(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 5);
			ClientDataModel.ReadonlyObjectList<ClientDataModel.AttributeChangeDataModel> arg0 = (ClientDataModel.ReadonlyObjectList<ClientDataModel.AttributeChangeDataModel>)ToLua.CheckObject(L, 1, typeof(ClientDataModel.ReadonlyObjectList<ClientDataModel.AttributeChangeDataModel>));
			int arg1 = (int)LuaDLL.luaL_checknumber(L, 2);
			int arg2 = (int)LuaDLL.luaL_checknumber(L, 3);
			int arg3 = (int)LuaDLL.luaL_checknumber(L, 4);
			int arg4 = (int)LuaDLL.luaL_checknumber(L, 5);
			GameUtils.SetAttribute(arg0, arg1, arg2, arg3, arg4);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SetAttributeBase(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 4);
			ClientDataModel.ReadonlyObjectList<ClientDataModel.AttributeBaseDataModel> arg0 = (ClientDataModel.ReadonlyObjectList<ClientDataModel.AttributeBaseDataModel>)ToLua.CheckObject(L, 1, typeof(ClientDataModel.ReadonlyObjectList<ClientDataModel.AttributeBaseDataModel>));
			int arg1 = (int)LuaDLL.luaL_checknumber(L, 2);
			int arg2 = (int)LuaDLL.luaL_checknumber(L, 3);
			int arg3 = (int)LuaDLL.luaL_checknumber(L, 4);
			GameUtils.SetAttributeBase(arg0, arg1, arg2, arg3);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SetSpriteGrey(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			UISprite arg0 = (UISprite)ToLua.CheckUnityObject(L, 1, typeof(UISprite));
			bool arg1 = LuaDLL.luaL_checkboolean(L, 2);
			GameUtils.SetSpriteGrey(arg0, arg1);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SetSpriteIcon(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 2 && TypeChecker.CheckTypes(L, 1, typeof(UISprite), typeof(int)))
			{
				UISprite arg0 = (UISprite)ToLua.ToObject(L, 1);
				int arg1 = (int)LuaDLL.lua_tonumber(L, 2);
				GameUtils.SetSpriteIcon(arg0, arg1);
				return 0;
			}
			else if (count == 3 && TypeChecker.CheckTypes(L, 1, typeof(UISprite), typeof(string), typeof(string)))
			{
				UISprite arg0 = (UISprite)ToLua.ToObject(L, 1);
				string arg1 = ToLua.ToString(L, 2);
				string arg2 = ToLua.ToString(L, 3);
				GameUtils.SetSpriteIcon(arg0, arg1, arg2);
				return 0;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: GameUtils.SetSpriteIcon");
			}
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ShowHintTip(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 1 && TypeChecker.CheckTypes(L, 1, typeof(string)))
			{
				string arg0 = ToLua.ToString(L, 1);
				GameUtils.ShowHintTip(arg0);
				return 0;
			}
			else if (count == 1 && TypeChecker.CheckTypes(L, 1, typeof(int)))
			{
				int arg0 = (int)LuaDLL.lua_tonumber(L, 1);
				GameUtils.ShowHintTip(arg0);
				return 0;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: GameUtils.ShowHintTip");
			}
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ShowItemDataTip(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			ClientDataModel.BagItemDataModel arg0 = (ClientDataModel.BagItemDataModel)ToLua.CheckObject(L, 1, typeof(ClientDataModel.BagItemDataModel));
			eEquipBtnShow arg1 = (eEquipBtnShow)ToLua.CheckObject(L, 2, typeof(eEquipBtnShow));
			int arg2 = (int)LuaDLL.luaL_checknumber(L, 3);
			GameUtils.ShowItemDataTip(arg0, arg1, arg2);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ShowItemIdTip(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 1);
			int arg1 = (int)LuaDLL.luaL_checknumber(L, 2);
			GameUtils.ShowItemIdTip(arg0, arg1);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ShowLoginTimeOutTip(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 0);
			GameUtils.ShowLoginTimeOutTip();
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ShowNetErrorHint(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 1);
			GameUtils.ShowNetErrorHint(arg0);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int StringToColor(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			string arg0 = ToLua.CheckString(L, 1);
			UnityEngine.Color o = GameUtils.StringToColor(arg0);
			ToLua.Push(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int TimeString(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 1 && TypeChecker.CheckTypes(L, 1, typeof(System.TimeSpan)))
			{
				System.TimeSpan arg0 = (System.TimeSpan)ToLua.ToObject(L, 1);
				string o = GameUtils.TimeString(arg0);
				LuaDLL.lua_pushstring(L, o);
				return 1;
			}
			else if (count == 3 && TypeChecker.CheckTypes(L, 1, typeof(int), typeof(int), typeof(int)))
			{
				int arg0 = (int)LuaDLL.lua_tonumber(L, 1);
				int arg1 = (int)LuaDLL.lua_tonumber(L, 2);
				int arg2 = (int)LuaDLL.lua_tonumber(L, 3);
				string o = GameUtils.TimeString(arg0, arg1, arg2);
				LuaDLL.lua_pushstring(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: GameUtils.TimeString");
			}
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int TimeStringHM(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 1);
			int arg1 = (int)LuaDLL.luaL_checknumber(L, 2);
			string o = GameUtils.TimeStringHM(arg0, arg1);
			LuaDLL.lua_pushstring(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int TimeStringMS(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 1);
			int arg1 = (int)LuaDLL.luaL_checknumber(L, 2);
			string o = GameUtils.TimeStringMS(arg0, arg1);
			LuaDLL.lua_pushstring(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int TitleAddAttr(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			ClientDataModel.TitleItemDataModel arg0 = (ClientDataModel.TitleItemDataModel)ToLua.CheckObject(L, 1, typeof(ClientDataModel.TitleItemDataModel));
			DataTable.NameTitleRecord arg1 = (DataTable.NameTitleRecord)ToLua.CheckObject(L, 2, typeof(DataTable.NameTitleRecord));
			GameUtils.TitleAddAttr(arg0, arg1);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int UnicodeToString(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			string arg0 = ToLua.CheckString(L, 1);
			string o = GameUtils.UnicodeToString(arg0);
			LuaDLL.lua_pushstring(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SplitString(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			string arg0 = ToLua.CheckString(L, 1);
			char arg1 = (char)LuaDLL.luaL_checknumber(L, 2);
			string[] o = GameUtils.SplitString(arg0, arg1);
			ToLua.Push(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int UseItem(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 1 && TypeChecker.CheckTypes(L, 1, typeof(ClientDataModel.ItemInfoDataModel)))
			{
				ClientDataModel.ItemInfoDataModel arg0 = (ClientDataModel.ItemInfoDataModel)ToLua.ToObject(L, 1);
				GameUtils.UseItem(arg0);
				return 0;
			}
			else if (count == 1 && TypeChecker.CheckTypes(L, 1, typeof(ClientDataModel.BagItemDataModel)))
			{
				ClientDataModel.BagItemDataModel arg0 = (ClientDataModel.BagItemDataModel)ToLua.ToObject(L, 1);
				GameUtils.UseItem(arg0);
				return 0;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: GameUtils.UseItem");
			}
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int IsQuickBuyGift(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 1);
			bool o = GameUtils.IsQuickBuyGift(arg0);
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int CheckEnoughItems(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 2 && TypeChecker.CheckTypes(L, 1, typeof(System.Collections.Generic.Dictionary<int,int>), typeof(bool)))
			{
				System.Collections.Generic.Dictionary<int,int> arg0 = (System.Collections.Generic.Dictionary<int,int>)ToLua.ToObject(L, 1);
				bool arg1 = LuaDLL.lua_toboolean(L, 2);
				bool o = GameUtils.CheckEnoughItems(arg0, arg1);
				LuaDLL.lua_pushboolean(L, o);
				return 1;
			}
			else if (count == 3 && TypeChecker.CheckTypes(L, 1, typeof(int), typeof(int), typeof(bool)))
			{
				int arg0 = (int)LuaDLL.lua_tonumber(L, 1);
				int arg1 = (int)LuaDLL.lua_tonumber(L, 2);
				bool arg2 = LuaDLL.lua_toboolean(L, 3);
				bool o = GameUtils.CheckEnoughItems(arg0, arg1, arg2);
				LuaDLL.lua_pushboolean(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: GameUtils.CheckEnoughItems");
			}
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Vector3PlaneDistance(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			UnityEngine.Vector3 arg0 = ToLua.ToVector3(L, 1);
			UnityEngine.Vector3 arg1 = ToLua.ToVector3(L, 2);
			float o = GameUtils.Vector3PlaneDistance(arg0, arg1);
			LuaDLL.lua_pushnumber(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ViewBigValueStr(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 1);
			string o = GameUtils.ViewBigValueStr(arg0);
			LuaDLL.lua_pushstring(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_AchieveFlagConfig(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushinteger(L, GameUtils.AchieveFlagConfig);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_AttrName(IntPtr L)
	{
		try
		{
			ToLua.PushObject(L, GameUtils.AttrName);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_AutoFightLongDistance(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushinteger(L, GameUtils.AutoFightLongDistance);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_AutoFightShortDistance(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushinteger(L, GameUtils.AutoFightShortDistance);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_AutoMedicineHpCd(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushinteger(L, GameUtils.AutoMedicineHpCd);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_AutoMedicineMpCd(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushinteger(L, GameUtils.AutoMedicineMpCd);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_AutoPickUpDistance(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushnumber(L, GameUtils.AutoPickUpDistance);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_AutoPickUpDistanceMax(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushnumber(L, GameUtils.AutoPickUpDistanceMax);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_BeginCoclorStrRegex(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushstring(L, GameUtils.BeginCoclorStrRegex);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_BlockLayerDuration(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushnumber(L, GameUtils.BlockLayerDuration);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_ChatWorldCount(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushinteger(L, GameUtils.ChatWorldCount);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_ConditionToFlag(IntPtr L)
	{
		try
		{
			ToLua.PushObject(L, GameUtils.ConditionToFlag);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_DistanceRemoveTarget(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushinteger(L, GameUtils.DistanceRemoveTarget);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_DungeonShowDelay(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushinteger(L, GameUtils.DungeonShowDelay);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_ElfFlagConfig(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushinteger(L, GameUtils.ElfFlagConfig);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_ElfSecondCondition(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushinteger(L, GameUtils.ElfSecondCondition);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_ElfThirdCondition(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushinteger(L, GameUtils.ElfThirdCondition);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_EndCoclorStrRegex(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushstring(L, GameUtils.EndCoclorStrRegex);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_EquipValueRef(IntPtr L)
	{
		try
		{
			ToLua.PushObject(L, GameUtils.EquipValueRef);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_FriendFlagConfig(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushinteger(L, GameUtils.FriendFlagConfig);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_FubenStar1Time(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushinteger(L, GameUtils.FubenStar1Time);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_FubenStar2Time(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushinteger(L, GameUtils.FubenStar2Time);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_FubenStar3Time(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushinteger(L, GameUtils.FubenStar3Time);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_GianItemTip(IntPtr L)
	{
		try
		{
			ToLua.PushObject(L, GameUtils.GianItemTip);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_green(IntPtr L)
	{
		try
		{
			ToLua.Push(L, GameUtils.green);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_grey(IntPtr L)
	{
		try
		{
			ToLua.Push(L, GameUtils.grey);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_HandBookGroupFlagConfig(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushinteger(L, GameUtils.HandBookGroupFlagConfig);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_HandBookWantedFlagConfig(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushinteger(L, GameUtils.HandBookWantedFlagConfig);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_HornWorldCount(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushinteger(L, GameUtils.HornWorldCount);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_MailFlagConfig(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushinteger(L, GameUtils.MailFlagConfig);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_MaxLevel(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushinteger(L, GameUtils.MaxLevel);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_MaxMailCount(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushinteger(L, GameUtils.MaxMailCount);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_OfflineExpRatelimit(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushnumber(L, GameUtils.OfflineExpRatelimit);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_OrderRefreshCost(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushinteger(L, GameUtils.OrderRefreshCost);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_PlayerInfoCacheTime(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushinteger(L, GameUtils.PlayerInfoCacheTime);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_RankFlagConfig(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushinteger(L, GameUtils.RankFlagConfig);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_RankWorshipAction(IntPtr L)
	{
		try
		{
			ToLua.Push(L, GameUtils.RankWorshipAction);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_SkillInnateFlagConfig(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushinteger(L, GameUtils.SkillInnateFlagConfig);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_SkillTalentFlagConfig(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushinteger(L, GameUtils.SkillTalentFlagConfig);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_StarIcon(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushstring(L, GameUtils.StarIcon);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_SweepCouponId(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushinteger(L, GameUtils.SweepCouponId);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_SystemNoticeRollingScreenLimit(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushinteger(L, GameUtils.SystemNoticeRollingScreenLimit);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_SystemNoticeScrollingSpeed(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushinteger(L, GameUtils.SystemNoticeScrollingSpeed);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_TeamFlagConfig(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushinteger(L, GameUtils.TeamFlagConfig);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_TimeOver(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushstring(L, GameUtils.TimeOver);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_TrumpeMoveSpeedt(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushinteger(L, GameUtils.TrumpeMoveSpeedt);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_TrumpetDurationTime(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushnumber(L, GameUtils.TrumpetDurationTime);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_UnionFlagConfig(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushinteger(L, GameUtils.UnionFlagConfig);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_WingQualityMax(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushinteger(L, GameUtils.WingQualityMax);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_WishFlagReward(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushinteger(L, GameUtils.WishFlagReward);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_LanguageIndex(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushinteger(L, GameUtils.LanguageIndex);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_AchieveFlagConfig(IntPtr L)
	{
		try
		{
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			GameUtils.AchieveFlagConfig = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_AttrName(IntPtr L)
	{
		try
		{
			System.Collections.Generic.Dictionary<int,string> arg0 = (System.Collections.Generic.Dictionary<int,string>)ToLua.CheckObject(L, 2, typeof(System.Collections.Generic.Dictionary<int,string>));
			GameUtils.AttrName = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_AutoFightLongDistance(IntPtr L)
	{
		try
		{
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			GameUtils.AutoFightLongDistance = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_AutoFightShortDistance(IntPtr L)
	{
		try
		{
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			GameUtils.AutoFightShortDistance = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_AutoMedicineHpCd(IntPtr L)
	{
		try
		{
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			GameUtils.AutoMedicineHpCd = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_AutoMedicineMpCd(IntPtr L)
	{
		try
		{
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			GameUtils.AutoMedicineMpCd = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_AutoPickUpDistance(IntPtr L)
	{
		try
		{
			float arg0 = (float)LuaDLL.luaL_checknumber(L, 2);
			GameUtils.AutoPickUpDistance = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_AutoPickUpDistanceMax(IntPtr L)
	{
		try
		{
			float arg0 = (float)LuaDLL.luaL_checknumber(L, 2);
			GameUtils.AutoPickUpDistanceMax = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_BeginCoclorStrRegex(IntPtr L)
	{
		try
		{
			string arg0 = ToLua.CheckString(L, 2);
			GameUtils.BeginCoclorStrRegex = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_BlockLayerDuration(IntPtr L)
	{
		try
		{
			float arg0 = (float)LuaDLL.luaL_checknumber(L, 2);
			GameUtils.BlockLayerDuration = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_ChatWorldCount(IntPtr L)
	{
		try
		{
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			GameUtils.ChatWorldCount = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_ConditionToFlag(IntPtr L)
	{
		try
		{
			System.Collections.Generic.Dictionary<int,int> arg0 = (System.Collections.Generic.Dictionary<int,int>)ToLua.CheckObject(L, 2, typeof(System.Collections.Generic.Dictionary<int,int>));
			GameUtils.ConditionToFlag = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_DistanceRemoveTarget(IntPtr L)
	{
		try
		{
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			GameUtils.DistanceRemoveTarget = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_DungeonShowDelay(IntPtr L)
	{
		try
		{
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			GameUtils.DungeonShowDelay = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_ElfFlagConfig(IntPtr L)
	{
		try
		{
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			GameUtils.ElfFlagConfig = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_ElfSecondCondition(IntPtr L)
	{
		try
		{
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			GameUtils.ElfSecondCondition = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_ElfThirdCondition(IntPtr L)
	{
		try
		{
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			GameUtils.ElfThirdCondition = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_EndCoclorStrRegex(IntPtr L)
	{
		try
		{
			string arg0 = ToLua.CheckString(L, 2);
			GameUtils.EndCoclorStrRegex = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_EquipValueRef(IntPtr L)
	{
		try
		{
			System.Collections.Generic.Dictionary<int,int> arg0 = (System.Collections.Generic.Dictionary<int,int>)ToLua.CheckObject(L, 2, typeof(System.Collections.Generic.Dictionary<int,int>));
			GameUtils.EquipValueRef = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_FriendFlagConfig(IntPtr L)
	{
		try
		{
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			GameUtils.FriendFlagConfig = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_FubenStar1Time(IntPtr L)
	{
		try
		{
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			GameUtils.FubenStar1Time = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_FubenStar2Time(IntPtr L)
	{
		try
		{
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			GameUtils.FubenStar2Time = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_FubenStar3Time(IntPtr L)
	{
		try
		{
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			GameUtils.FubenStar3Time = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_GianItemTip(IntPtr L)
	{
		try
		{
			DataTable.DictionaryRecord arg0 = (DataTable.DictionaryRecord)ToLua.CheckObject(L, 2, typeof(DataTable.DictionaryRecord));
			GameUtils.GianItemTip = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_green(IntPtr L)
	{
		try
		{
			UnityEngine.Color arg0 = ToLua.ToColor(L, 2);
			GameUtils.green = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_grey(IntPtr L)
	{
		try
		{
			UnityEngine.Color arg0 = ToLua.ToColor(L, 2);
			GameUtils.grey = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_HandBookGroupFlagConfig(IntPtr L)
	{
		try
		{
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			GameUtils.HandBookGroupFlagConfig = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_HandBookWantedFlagConfig(IntPtr L)
	{
		try
		{
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			GameUtils.HandBookWantedFlagConfig = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_HornWorldCount(IntPtr L)
	{
		try
		{
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			GameUtils.HornWorldCount = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_MailFlagConfig(IntPtr L)
	{
		try
		{
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			GameUtils.MailFlagConfig = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_MaxLevel(IntPtr L)
	{
		try
		{
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			GameUtils.MaxLevel = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_MaxMailCount(IntPtr L)
	{
		try
		{
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			GameUtils.MaxMailCount = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_OfflineExpRatelimit(IntPtr L)
	{
		try
		{
			float arg0 = (float)LuaDLL.luaL_checknumber(L, 2);
			GameUtils.OfflineExpRatelimit = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_OrderRefreshCost(IntPtr L)
	{
		try
		{
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			GameUtils.OrderRefreshCost = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_PlayerInfoCacheTime(IntPtr L)
	{
		try
		{
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			GameUtils.PlayerInfoCacheTime = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_RankFlagConfig(IntPtr L)
	{
		try
		{
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			GameUtils.RankFlagConfig = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_RankWorshipAction(IntPtr L)
	{
		try
		{
			int[] arg0 = ToLua.CheckNumberArray<int>(L, 2);
			GameUtils.RankWorshipAction = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_SkillInnateFlagConfig(IntPtr L)
	{
		try
		{
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			GameUtils.SkillInnateFlagConfig = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_SkillTalentFlagConfig(IntPtr L)
	{
		try
		{
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			GameUtils.SkillTalentFlagConfig = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_StarIcon(IntPtr L)
	{
		try
		{
			string arg0 = ToLua.CheckString(L, 2);
			GameUtils.StarIcon = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_SweepCouponId(IntPtr L)
	{
		try
		{
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			GameUtils.SweepCouponId = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_SystemNoticeRollingScreenLimit(IntPtr L)
	{
		try
		{
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			GameUtils.SystemNoticeRollingScreenLimit = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_SystemNoticeScrollingSpeed(IntPtr L)
	{
		try
		{
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			GameUtils.SystemNoticeScrollingSpeed = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_TeamFlagConfig(IntPtr L)
	{
		try
		{
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			GameUtils.TeamFlagConfig = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_TimeOver(IntPtr L)
	{
		try
		{
			string arg0 = ToLua.CheckString(L, 2);
			GameUtils.TimeOver = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_TrumpeMoveSpeedt(IntPtr L)
	{
		try
		{
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			GameUtils.TrumpeMoveSpeedt = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_TrumpetDurationTime(IntPtr L)
	{
		try
		{
			float arg0 = (float)LuaDLL.luaL_checknumber(L, 2);
			GameUtils.TrumpetDurationTime = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_UnionFlagConfig(IntPtr L)
	{
		try
		{
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			GameUtils.UnionFlagConfig = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_WingQualityMax(IntPtr L)
	{
		try
		{
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			GameUtils.WingQualityMax = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_WishFlagReward(IntPtr L)
	{
		try
		{
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			GameUtils.WishFlagReward = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_LanguageIndex(IntPtr L)
	{
		try
		{
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			GameUtils.LanguageIndex = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}
}

