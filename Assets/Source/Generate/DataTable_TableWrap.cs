//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class DataTable_TableWrap
{
	public static void Register(LuaState L)
	{
		L.BeginStaticLibs("Table");
		L.RegFunction("NewTableRecord", NewTableRecord);
		L.RegFunction("Init", Init);
		L.RegFunction("GetTableNames", GetTableNames);
		L.RegFunction("GetTableByFileName", GetTableByFileName);
		L.RegFunction("GetTableData", GetTableData);
		L.RegFunction("ForeachIcon", ForeachIcon);
		L.RegFunction("GetIcon", GetIcon);
		L.RegFunction("ForeachSound", ForeachSound);
		L.RegFunction("GetSound", GetSound);
		L.RegFunction("ForeachConditionTable", ForeachConditionTable);
		L.RegFunction("GetConditionTable", GetConditionTable);
		L.RegFunction("ForeachExdata", ForeachExdata);
		L.RegFunction("GetExdata", GetExdata);
		L.RegFunction("ForeachDictionary", ForeachDictionary);
		L.RegFunction("GetDictionary", GetDictionary);
		L.RegFunction("ForeachSceneNpc", ForeachSceneNpc);
		L.RegFunction("GetSceneNpc", GetSceneNpc);
		L.RegFunction("ForeachCharModel", ForeachCharModel);
		L.RegFunction("GetCharModel", GetCharModel);
		L.RegFunction("ForeachAnimation", ForeachAnimation);
		L.RegFunction("GetAnimation", GetAnimation);
		L.RegFunction("ForeachSkill", ForeachSkill);
		L.RegFunction("GetSkill", GetSkill);
		L.RegFunction("ForeachScene", ForeachScene);
		L.RegFunction("GetScene", GetScene);
		L.RegFunction("ForeachCharacterBase", ForeachCharacterBase);
		L.RegFunction("GetCharacterBase", GetCharacterBase);
		L.RegFunction("ForeachEquipBase", ForeachEquipBase);
		L.RegFunction("GetEquipBase", GetEquipBase);
		L.RegFunction("ForeachActor", ForeachActor);
		L.RegFunction("GetActor", GetActor);
		L.RegFunction("ForeachTalent", ForeachTalent);
		L.RegFunction("GetTalent", GetTalent);
		L.RegFunction("ForeachBagBase", ForeachBagBase);
		L.RegFunction("GetBagBase", GetBagBase);
		L.RegFunction("ForeachItemBase", ForeachItemBase);
		L.RegFunction("GetItemBase", GetItemBase);
		L.RegFunction("ForeachItemType", ForeachItemType);
		L.RegFunction("GetItemType", GetItemType);
		L.RegFunction("ForeachColorBase", ForeachColorBase);
		L.RegFunction("GetColorBase", GetColorBase);
		L.RegFunction("ForeachBuff", ForeachBuff);
		L.RegFunction("GetBuff", GetBuff);
		L.RegFunction("ForeachMissionBase", ForeachMissionBase);
		L.RegFunction("GetMissionBase", GetMissionBase);
		L.RegFunction("ForeachAttrRef", ForeachAttrRef);
		L.RegFunction("GetAttrRef", GetAttrRef);
		L.RegFunction("ForeachEquipRelate", ForeachEquipRelate);
		L.RegFunction("GetEquipRelate", GetEquipRelate);
		L.RegFunction("ForeachEquipEnchant", ForeachEquipEnchant);
		L.RegFunction("GetEquipEnchant", GetEquipEnchant);
		L.RegFunction("ForeachEquipEnchantChance", ForeachEquipEnchantChance);
		L.RegFunction("GetEquipEnchantChance", GetEquipEnchantChance);
		L.RegFunction("ForeachTitle", ForeachTitle);
		L.RegFunction("GetTitle", GetTitle);
		L.RegFunction("ForeachEquipEnchance", ForeachEquipEnchance);
		L.RegFunction("GetEquipEnchance", GetEquipEnchance);
		L.RegFunction("ForeachLevelData", ForeachLevelData);
		L.RegFunction("GetLevelData", GetLevelData);
		L.RegFunction("ForeachBullet", ForeachBullet);
		L.RegFunction("GetBullet", GetBullet);
		L.RegFunction("ForeachNpcBase", ForeachNpcBase);
		L.RegFunction("GetNpcBase", GetNpcBase);
		L.RegFunction("ForeachSkillUpgrading", ForeachSkillUpgrading);
		L.RegFunction("GetSkillUpgrading", GetSkillUpgrading);
		L.RegFunction("ForeachAchievement", ForeachAchievement);
		L.RegFunction("GetAchievement", GetAchievement);
		L.RegFunction("ForeachEquipTie", ForeachEquipTie);
		L.RegFunction("GetEquipTie", GetEquipTie);
		L.RegFunction("ForeachEffect", ForeachEffect);
		L.RegFunction("GetEffect", GetEffect);
		L.RegFunction("ForeachTransfer", ForeachTransfer);
		L.RegFunction("GetTransfer", GetTransfer);
		L.RegFunction("ForeachClientConfig", ForeachClientConfig);
		L.RegFunction("GetClientConfig", GetClientConfig);
		L.RegFunction("ForeachWeaponMount", ForeachWeaponMount);
		L.RegFunction("GetWeaponMount", GetWeaponMount);
		L.RegFunction("ForeachCombatText", ForeachCombatText);
		L.RegFunction("GetCombatText", GetCombatText);
		L.RegFunction("ForeachRandName", ForeachRandName);
		L.RegFunction("GetRandName", GetRandName);
		L.RegFunction("ForeachOperationList", ForeachOperationList);
		L.RegFunction("GetOperationList", GetOperationList);
		L.RegFunction("ForeachUI", ForeachUI);
		L.RegFunction("GetUI", GetUI);
		L.RegFunction("ForeachGift", ForeachGift);
		L.RegFunction("GetGift", GetGift);
		L.RegFunction("ForeachEquipBlessing", ForeachEquipBlessing);
		L.RegFunction("GetEquipBlessing", GetEquipBlessing);
		L.RegFunction("ForeachEquipAdditional", ForeachEquipAdditional);
		L.RegFunction("GetEquipAdditional", GetEquipAdditional);
		L.RegFunction("ForeachEquipExcellent", ForeachEquipExcellent);
		L.RegFunction("GetEquipExcellent", GetEquipExcellent);
		L.RegFunction("ForeachEquipModelView", ForeachEquipModelView);
		L.RegFunction("GetEquipModelView", GetEquipModelView);
		L.RegFunction("ForeachTalk", ForeachTalk);
		L.RegFunction("GetTalk", GetTalk);
		L.RegFunction("ForeachChatInfo", ForeachChatInfo);
		L.RegFunction("GetChatInfo", GetChatInfo);
		L.RegFunction("ForeachHandBook", ForeachHandBook);
		L.RegFunction("GetHandBook", GetHandBook);
		L.RegFunction("ForeachBookGroup", ForeachBookGroup);
		L.RegFunction("GetBookGroup", GetBookGroup);
		L.RegFunction("ForeachItemCompose", ForeachItemCompose);
		L.RegFunction("GetItemCompose", GetItemCompose);
		L.RegFunction("ForeachCamp", ForeachCamp);
		L.RegFunction("GetCamp", GetCamp);
		L.RegFunction("ForeachDropModel", ForeachDropModel);
		L.RegFunction("GetDropModel", GetDropModel);
		L.RegFunction("ForeachFuben", ForeachFuben);
		L.RegFunction("GetFuben", GetFuben);
		L.RegFunction("ForeachStats", ForeachStats);
		L.RegFunction("GetStats", GetStats);
		L.RegFunction("ForeachPlotFuben", ForeachPlotFuben);
		L.RegFunction("GetPlotFuben", GetPlotFuben);
		L.RegFunction("ForeachStore", ForeachStore);
		L.RegFunction("GetStore", GetStore);
		L.RegFunction("ForeachStory", ForeachStory);
		L.RegFunction("GetStory", GetStory);
		L.RegFunction("ForeachBuilding", ForeachBuilding);
		L.RegFunction("GetBuilding", GetBuilding);
		L.RegFunction("ForeachBuildingRes", ForeachBuildingRes);
		L.RegFunction("GetBuildingRes", GetBuildingRes);
		L.RegFunction("ForeachBuildingRule", ForeachBuildingRule);
		L.RegFunction("GetBuildingRule", GetBuildingRule);
		L.RegFunction("ForeachBuildingService", ForeachBuildingService);
		L.RegFunction("GetBuildingService", GetBuildingService);
		L.RegFunction("ForeachHomeSence", ForeachHomeSence);
		L.RegFunction("GetHomeSence", GetHomeSence);
		L.RegFunction("ForeachPet", ForeachPet);
		L.RegFunction("GetPet", GetPet);
		L.RegFunction("ForeachPetSkill", ForeachPetSkill);
		L.RegFunction("GetPetSkill", GetPetSkill);
		L.RegFunction("ForeachService", ForeachService);
		L.RegFunction("GetService", GetService);
		L.RegFunction("ForeachStoreType", ForeachStoreType);
		L.RegFunction("GetStoreType", GetStoreType);
		L.RegFunction("ForeachElf", ForeachElf);
		L.RegFunction("GetElf", GetElf);
		L.RegFunction("ForeachElfGroup", ForeachElfGroup);
		L.RegFunction("GetElfGroup", GetElfGroup);
		L.RegFunction("ForeachQueue", ForeachQueue);
		L.RegFunction("GetQueue", GetQueue);
		L.RegFunction("ForeachDraw", ForeachDraw);
		L.RegFunction("GetDraw", GetDraw);
		L.RegFunction("ForeachPlant", ForeachPlant);
		L.RegFunction("GetPlant", GetPlant);
		L.RegFunction("ForeachSeqFrame", ForeachSeqFrame);
		L.RegFunction("GetSeqFrame", GetSeqFrame);
		L.RegFunction("ForeachMedal", ForeachMedal);
		L.RegFunction("GetMedal", GetMedal);
		L.RegFunction("ForeachSailing", ForeachSailing);
		L.RegFunction("GetSailing", GetSailing);
		L.RegFunction("ForeachWingTrain", ForeachWingTrain);
		L.RegFunction("GetWingTrain", GetWingTrain);
		L.RegFunction("ForeachWingQuality", ForeachWingQuality);
		L.RegFunction("GetWingQuality", GetWingQuality);
		L.RegFunction("ForeachPVPRule", ForeachPVPRule);
		L.RegFunction("GetPVPRule", GetPVPRule);
		L.RegFunction("ForeachArenaReward", ForeachArenaReward);
		L.RegFunction("GetArenaReward", GetArenaReward);
		L.RegFunction("ForeachArenaLevel", ForeachArenaLevel);
		L.RegFunction("GetArenaLevel", GetArenaLevel);
		L.RegFunction("ForeachHonor", ForeachHonor);
		L.RegFunction("GetHonor", GetHonor);
		L.RegFunction("ForeachJJCRoot", ForeachJJCRoot);
		L.RegFunction("GetJJCRoot", GetJJCRoot);
		L.RegFunction("ForeachStatue", ForeachStatue);
		L.RegFunction("GetStatue", GetStatue);
		L.RegFunction("ForeachEquipAdditional1", ForeachEquipAdditional1);
		L.RegFunction("GetEquipAdditional1", GetEquipAdditional1);
		L.RegFunction("ForeachTriggerArea", ForeachTriggerArea);
		L.RegFunction("GetTriggerArea", GetTriggerArea);
		L.RegFunction("ForeachGuild", ForeachGuild);
		L.RegFunction("GetGuild", GetGuild);
		L.RegFunction("ForeachGuildBuff", ForeachGuildBuff);
		L.RegFunction("GetGuildBuff", GetGuildBuff);
		L.RegFunction("ForeachGuildBoss", ForeachGuildBoss);
		L.RegFunction("GetGuildBoss", GetGuildBoss);
		L.RegFunction("ForeachGuildAccess", ForeachGuildAccess);
		L.RegFunction("GetGuildAccess", GetGuildAccess);
		L.RegFunction("ForeachExpInfo", ForeachExpInfo);
		L.RegFunction("GetExpInfo", GetExpInfo);
		L.RegFunction("ForeachGroupShop", ForeachGroupShop);
		L.RegFunction("GetGroupShop", GetGroupShop);
		L.RegFunction("ForeachPKMode", ForeachPKMode);
		L.RegFunction("GetPKMode", GetPKMode);
		L.RegFunction("Foreachforged", Foreachforged);
		L.RegFunction("Getforged", Getforged);
		L.RegFunction("ForeachEquipUpdate", ForeachEquipUpdate);
		L.RegFunction("GetEquipUpdate", GetEquipUpdate);
		L.RegFunction("ForeachGuildMission", ForeachGuildMission);
		L.RegFunction("GetGuildMission", GetGuildMission);
		L.RegFunction("ForeachOrderForm", ForeachOrderForm);
		L.RegFunction("GetOrderForm", GetOrderForm);
		L.RegFunction("ForeachOrderUpdate", ForeachOrderUpdate);
		L.RegFunction("GetOrderUpdate", GetOrderUpdate);
		L.RegFunction("ForeachTrade", ForeachTrade);
		L.RegFunction("GetTrade", GetTrade);
		L.RegFunction("ForeachGem", ForeachGem);
		L.RegFunction("GetGem", GetGem);
		L.RegFunction("ForeachGemGroup", ForeachGemGroup);
		L.RegFunction("GetGemGroup", GetGemGroup);
		L.RegFunction("ForeachSensitiveWord", ForeachSensitiveWord);
		L.RegFunction("GetSensitiveWord", GetSensitiveWord);
		L.RegFunction("ForeachGuidance", ForeachGuidance);
		L.RegFunction("GetGuidance", GetGuidance);
		L.RegFunction("ForeachMapTransfer", ForeachMapTransfer);
		L.RegFunction("GetMapTransfer", GetMapTransfer);
		L.RegFunction("ForeachSceneEffect", ForeachSceneEffect);
		L.RegFunction("GetSceneEffect", GetSceneEffect);
		L.RegFunction("ForeachPVPBattle", ForeachPVPBattle);
		L.RegFunction("GetPVPBattle", GetPVPBattle);
		L.RegFunction("ForeachStepByStep", ForeachStepByStep);
		L.RegFunction("GetStepByStep", GetStepByStep);
		L.RegFunction("ForeachWorldBOSS", ForeachWorldBOSS);
		L.RegFunction("GetWorldBOSS", GetWorldBOSS);
		L.RegFunction("ForeachPKValue", ForeachPKValue);
		L.RegFunction("GetPKValue", GetPKValue);
		L.RegFunction("ForeachTransmigration", ForeachTransmigration);
		L.RegFunction("GetTransmigration", GetTransmigration);
		L.RegFunction("ForeachAttachPoint", ForeachAttachPoint);
		L.RegFunction("GetAttachPoint", GetAttachPoint);
		L.RegFunction("ForeachFubenInfo", ForeachFubenInfo);
		L.RegFunction("GetFubenInfo", GetFubenInfo);
		L.RegFunction("ForeachFubenLogic", ForeachFubenLogic);
		L.RegFunction("GetFubenLogic", GetFubenLogic);
		L.RegFunction("ForeachFace", ForeachFace);
		L.RegFunction("GetFace", GetFace);
		L.RegFunction("ForeachServerName", ForeachServerName);
		L.RegFunction("GetServerName", GetServerName);
		L.RegFunction("ForeachLoadingTest", ForeachLoadingTest);
		L.RegFunction("GetLoadingTest", GetLoadingTest);
		L.RegFunction("ForeachGetMissionInfo", ForeachGetMissionInfo);
		L.RegFunction("GetGetMissionInfo", GetGetMissionInfo);
		L.RegFunction("ForeachMissionConditionInfo", ForeachMissionConditionInfo);
		L.RegFunction("GetMissionConditionInfo", GetMissionConditionInfo);
		L.RegFunction("ForeachGetMissionReward", ForeachGetMissionReward);
		L.RegFunction("GetGetMissionReward", GetGetMissionReward);
		L.RegFunction("ForeachGetMissionIcon", ForeachGetMissionIcon);
		L.RegFunction("GetGetMissionIcon", GetGetMissionIcon);
		L.RegFunction("ForeachSubject", ForeachSubject);
		L.RegFunction("GetSubject", GetSubject);
		L.RegFunction("ForeachItemGetInfo", ForeachItemGetInfo);
		L.RegFunction("GetItemGetInfo", GetItemGetInfo);
		L.RegFunction("ForeachDynamicActivity", ForeachDynamicActivity);
		L.RegFunction("GetDynamicActivity", GetDynamicActivity);
		L.RegFunction("ForeachCompensation", ForeachCompensation);
		L.RegFunction("GetCompensation", GetCompensation);
		L.RegFunction("ForeachCityTalk", ForeachCityTalk);
		L.RegFunction("GetCityTalk", GetCityTalk);
		L.RegFunction("ForeachDailyActivity", ForeachDailyActivity);
		L.RegFunction("GetDailyActivity", GetDailyActivity);
		L.RegFunction("ForeachRecharge", ForeachRecharge);
		L.RegFunction("GetRecharge", GetRecharge);
		L.RegFunction("ForeachRewardInfo", ForeachRewardInfo);
		L.RegFunction("GetRewardInfo", GetRewardInfo);
		L.RegFunction("ForeachNameTitle", ForeachNameTitle);
		L.RegFunction("GetNameTitle", GetNameTitle);
		L.RegFunction("ForeachVIP", ForeachVIP);
		L.RegFunction("GetVIP", GetVIP);
		L.RegFunction("ForeachLevelupTips", ForeachLevelupTips);
		L.RegFunction("GetLevelupTips", GetLevelupTips);
		L.RegFunction("ForeachStrongType", ForeachStrongType);
		L.RegFunction("GetStrongType", GetStrongType);
		L.RegFunction("ForeachStrongData", ForeachStrongData);
		L.RegFunction("GetStrongData", GetStrongData);
		L.RegFunction("ForeachMail", ForeachMail);
		L.RegFunction("GetMail", GetMail);
		L.RegFunction("ForeachGMCommand", ForeachGMCommand);
		L.RegFunction("GetGMCommand", GetGMCommand);
		L.RegFunction("ForeachAuctionType1", ForeachAuctionType1);
		L.RegFunction("GetAuctionType1", GetAuctionType1);
		L.RegFunction("ForeachAuctionType2", ForeachAuctionType2);
		L.RegFunction("GetAuctionType2", GetAuctionType2);
		L.RegFunction("ForeachAuctionType3", ForeachAuctionType3);
		L.RegFunction("GetAuctionType3", GetAuctionType3);
		L.RegFunction("ForeachFirstRecharge", ForeachFirstRecharge);
		L.RegFunction("GetFirstRecharge", GetFirstRecharge);
		L.RegFunction("ForeachMieShi", ForeachMieShi);
		L.RegFunction("GetMieShi", GetMieShi);
		L.RegFunction("ForeachMieShiPublic", ForeachMieShiPublic);
		L.RegFunction("GetMieShiPublic", GetMieShiPublic);
		L.RegFunction("ForeachDefendCityReward", ForeachDefendCityReward);
		L.RegFunction("GetDefendCityReward", GetDefendCityReward);
		L.RegFunction("ForeachDefendCityDevoteReward", ForeachDefendCityDevoteReward);
		L.RegFunction("GetDefendCityDevoteReward", GetDefendCityDevoteReward);
		L.RegFunction("ForeachBatteryLevel", ForeachBatteryLevel);
		L.RegFunction("GetBatteryLevel", GetBatteryLevel);
		L.RegFunction("ForeachBatteryBase", ForeachBatteryBase);
		L.RegFunction("GetBatteryBase", GetBatteryBase);
		L.RegFunction("ForeachMieShiFighting", ForeachMieShiFighting);
		L.RegFunction("GetMieShiFighting", GetMieShiFighting);
		L.RegFunction("ForeachFunctionOn", ForeachFunctionOn);
		L.RegFunction("GetFunctionOn", GetFunctionOn);
		L.RegFunction("ForeachBangBuff", ForeachBangBuff);
		L.RegFunction("GetBangBuff", GetBangBuff);
		L.RegFunction("ForeachBuffGroup", ForeachBuffGroup);
		L.RegFunction("GetBuffGroup", GetBuffGroup);
		L.RegFunction("ForeachMieshiTowerReward", ForeachMieshiTowerReward);
		L.RegFunction("GetMieshiTowerReward", GetMieshiTowerReward);
		L.EndStaticLibs();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int NewTableRecord(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			DataTable.TableType arg0 = (DataTable.TableType)ToLua.CheckObject(L, 1, typeof(DataTable.TableType));
			System.Func<DataTable.IRecord> o = DataTable.Table.NewTableRecord(arg0);
			ToLua.Push(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Init(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 0);
			DataTable.Table.Init();
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetTableNames(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 0);
			System.Collections.Generic.IEnumerable<string> o = DataTable.Table.GetTableNames();
			ToLua.PushObject(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetTableByFileName(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			string arg0 = ToLua.CheckString(L, 1);
			object o = DataTable.Table.GetTableByFileName(arg0);
			ToLua.Push(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetTableData(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			string arg0 = ToLua.CheckString(L, 1);
			int arg1 = (int)LuaDLL.luaL_checknumber(L, 2);
			string arg2 = ToLua.CheckString(L, 3);
			object o = DataTable.Table.GetTableData(arg0, arg1, arg2);
			ToLua.Push(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ForeachIcon(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			System.Func<DataTable.IconRecord,bool> arg0 = null;
			LuaTypes funcType1 = LuaDLL.lua_type(L, 1);

			if (funcType1 != LuaTypes.LUA_TFUNCTION)
			{
				 arg0 = (System.Func<DataTable.IconRecord,bool>)ToLua.CheckObject(L, 1, typeof(System.Func<DataTable.IconRecord,bool>));
			}
			else
			{
				LuaFunction func = ToLua.ToLuaFunction(L, 1);
				arg0 = DelegateFactory.CreateDelegate(typeof(System.Func<DataTable.IconRecord,bool>), func) as System.Func<DataTable.IconRecord,bool>;
			}

			DataTable.Table.ForeachIcon(arg0);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetIcon(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 1);
			DataTable.IconRecord o = DataTable.Table.GetIcon(arg0);
			ToLua.PushObject(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ForeachSound(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			System.Func<DataTable.SoundRecord,bool> arg0 = null;
			LuaTypes funcType1 = LuaDLL.lua_type(L, 1);

			if (funcType1 != LuaTypes.LUA_TFUNCTION)
			{
				 arg0 = (System.Func<DataTable.SoundRecord,bool>)ToLua.CheckObject(L, 1, typeof(System.Func<DataTable.SoundRecord,bool>));
			}
			else
			{
				LuaFunction func = ToLua.ToLuaFunction(L, 1);
				arg0 = DelegateFactory.CreateDelegate(typeof(System.Func<DataTable.SoundRecord,bool>), func) as System.Func<DataTable.SoundRecord,bool>;
			}

			DataTable.Table.ForeachSound(arg0);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetSound(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 1);
			DataTable.SoundRecord o = DataTable.Table.GetSound(arg0);
			ToLua.PushObject(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ForeachConditionTable(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			System.Func<DataTable.ConditionTableRecord,bool> arg0 = null;
			LuaTypes funcType1 = LuaDLL.lua_type(L, 1);

			if (funcType1 != LuaTypes.LUA_TFUNCTION)
			{
				 arg0 = (System.Func<DataTable.ConditionTableRecord,bool>)ToLua.CheckObject(L, 1, typeof(System.Func<DataTable.ConditionTableRecord,bool>));
			}
			else
			{
				LuaFunction func = ToLua.ToLuaFunction(L, 1);
				arg0 = DelegateFactory.CreateDelegate(typeof(System.Func<DataTable.ConditionTableRecord,bool>), func) as System.Func<DataTable.ConditionTableRecord,bool>;
			}

			DataTable.Table.ForeachConditionTable(arg0);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetConditionTable(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 1);
			DataTable.ConditionTableRecord o = DataTable.Table.GetConditionTable(arg0);
			ToLua.PushObject(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ForeachExdata(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			System.Func<DataTable.ExdataRecord,bool> arg0 = null;
			LuaTypes funcType1 = LuaDLL.lua_type(L, 1);

			if (funcType1 != LuaTypes.LUA_TFUNCTION)
			{
				 arg0 = (System.Func<DataTable.ExdataRecord,bool>)ToLua.CheckObject(L, 1, typeof(System.Func<DataTable.ExdataRecord,bool>));
			}
			else
			{
				LuaFunction func = ToLua.ToLuaFunction(L, 1);
				arg0 = DelegateFactory.CreateDelegate(typeof(System.Func<DataTable.ExdataRecord,bool>), func) as System.Func<DataTable.ExdataRecord,bool>;
			}

			DataTable.Table.ForeachExdata(arg0);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetExdata(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 1);
			DataTable.ExdataRecord o = DataTable.Table.GetExdata(arg0);
			ToLua.PushObject(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ForeachDictionary(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			System.Func<DataTable.DictionaryRecord,bool> arg0 = null;
			LuaTypes funcType1 = LuaDLL.lua_type(L, 1);

			if (funcType1 != LuaTypes.LUA_TFUNCTION)
			{
				 arg0 = (System.Func<DataTable.DictionaryRecord,bool>)ToLua.CheckObject(L, 1, typeof(System.Func<DataTable.DictionaryRecord,bool>));
			}
			else
			{
				LuaFunction func = ToLua.ToLuaFunction(L, 1);
				arg0 = DelegateFactory.CreateDelegate(typeof(System.Func<DataTable.DictionaryRecord,bool>), func) as System.Func<DataTable.DictionaryRecord,bool>;
			}

			DataTable.Table.ForeachDictionary(arg0);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetDictionary(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 1);
			DataTable.DictionaryRecord o = DataTable.Table.GetDictionary(arg0);
			ToLua.PushObject(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ForeachSceneNpc(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			System.Func<DataTable.SceneNpcRecord,bool> arg0 = null;
			LuaTypes funcType1 = LuaDLL.lua_type(L, 1);

			if (funcType1 != LuaTypes.LUA_TFUNCTION)
			{
				 arg0 = (System.Func<DataTable.SceneNpcRecord,bool>)ToLua.CheckObject(L, 1, typeof(System.Func<DataTable.SceneNpcRecord,bool>));
			}
			else
			{
				LuaFunction func = ToLua.ToLuaFunction(L, 1);
				arg0 = DelegateFactory.CreateDelegate(typeof(System.Func<DataTable.SceneNpcRecord,bool>), func) as System.Func<DataTable.SceneNpcRecord,bool>;
			}

			DataTable.Table.ForeachSceneNpc(arg0);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetSceneNpc(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 1);
			DataTable.SceneNpcRecord o = DataTable.Table.GetSceneNpc(arg0);
			ToLua.PushObject(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ForeachCharModel(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			System.Func<DataTable.CharModelRecord,bool> arg0 = null;
			LuaTypes funcType1 = LuaDLL.lua_type(L, 1);

			if (funcType1 != LuaTypes.LUA_TFUNCTION)
			{
				 arg0 = (System.Func<DataTable.CharModelRecord,bool>)ToLua.CheckObject(L, 1, typeof(System.Func<DataTable.CharModelRecord,bool>));
			}
			else
			{
				LuaFunction func = ToLua.ToLuaFunction(L, 1);
				arg0 = DelegateFactory.CreateDelegate(typeof(System.Func<DataTable.CharModelRecord,bool>), func) as System.Func<DataTable.CharModelRecord,bool>;
			}

			DataTable.Table.ForeachCharModel(arg0);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetCharModel(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 1);
			DataTable.CharModelRecord o = DataTable.Table.GetCharModel(arg0);
			ToLua.PushObject(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ForeachAnimation(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			System.Func<DataTable.AnimationRecord,bool> arg0 = null;
			LuaTypes funcType1 = LuaDLL.lua_type(L, 1);

			if (funcType1 != LuaTypes.LUA_TFUNCTION)
			{
				 arg0 = (System.Func<DataTable.AnimationRecord,bool>)ToLua.CheckObject(L, 1, typeof(System.Func<DataTable.AnimationRecord,bool>));
			}
			else
			{
				LuaFunction func = ToLua.ToLuaFunction(L, 1);
				arg0 = DelegateFactory.CreateDelegate(typeof(System.Func<DataTable.AnimationRecord,bool>), func) as System.Func<DataTable.AnimationRecord,bool>;
			}

			DataTable.Table.ForeachAnimation(arg0);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetAnimation(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 1);
			DataTable.AnimationRecord o = DataTable.Table.GetAnimation(arg0);
			ToLua.PushObject(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ForeachSkill(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			System.Func<DataTable.SkillRecord,bool> arg0 = null;
			LuaTypes funcType1 = LuaDLL.lua_type(L, 1);

			if (funcType1 != LuaTypes.LUA_TFUNCTION)
			{
				 arg0 = (System.Func<DataTable.SkillRecord,bool>)ToLua.CheckObject(L, 1, typeof(System.Func<DataTable.SkillRecord,bool>));
			}
			else
			{
				LuaFunction func = ToLua.ToLuaFunction(L, 1);
				arg0 = DelegateFactory.CreateDelegate(typeof(System.Func<DataTable.SkillRecord,bool>), func) as System.Func<DataTable.SkillRecord,bool>;
			}

			DataTable.Table.ForeachSkill(arg0);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetSkill(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 1);
			DataTable.SkillRecord o = DataTable.Table.GetSkill(arg0);
			ToLua.PushObject(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ForeachScene(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			System.Func<DataTable.SceneRecord,bool> arg0 = null;
			LuaTypes funcType1 = LuaDLL.lua_type(L, 1);

			if (funcType1 != LuaTypes.LUA_TFUNCTION)
			{
				 arg0 = (System.Func<DataTable.SceneRecord,bool>)ToLua.CheckObject(L, 1, typeof(System.Func<DataTable.SceneRecord,bool>));
			}
			else
			{
				LuaFunction func = ToLua.ToLuaFunction(L, 1);
				arg0 = DelegateFactory.CreateDelegate(typeof(System.Func<DataTable.SceneRecord,bool>), func) as System.Func<DataTable.SceneRecord,bool>;
			}

			DataTable.Table.ForeachScene(arg0);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetScene(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 1);
			DataTable.SceneRecord o = DataTable.Table.GetScene(arg0);
			ToLua.PushObject(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ForeachCharacterBase(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			System.Func<DataTable.CharacterBaseRecord,bool> arg0 = null;
			LuaTypes funcType1 = LuaDLL.lua_type(L, 1);

			if (funcType1 != LuaTypes.LUA_TFUNCTION)
			{
				 arg0 = (System.Func<DataTable.CharacterBaseRecord,bool>)ToLua.CheckObject(L, 1, typeof(System.Func<DataTable.CharacterBaseRecord,bool>));
			}
			else
			{
				LuaFunction func = ToLua.ToLuaFunction(L, 1);
				arg0 = DelegateFactory.CreateDelegate(typeof(System.Func<DataTable.CharacterBaseRecord,bool>), func) as System.Func<DataTable.CharacterBaseRecord,bool>;
			}

			DataTable.Table.ForeachCharacterBase(arg0);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetCharacterBase(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 1);
			DataTable.CharacterBaseRecord o = DataTable.Table.GetCharacterBase(arg0);
			ToLua.PushObject(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ForeachEquipBase(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			System.Func<DataTable.EquipBaseRecord,bool> arg0 = null;
			LuaTypes funcType1 = LuaDLL.lua_type(L, 1);

			if (funcType1 != LuaTypes.LUA_TFUNCTION)
			{
				 arg0 = (System.Func<DataTable.EquipBaseRecord,bool>)ToLua.CheckObject(L, 1, typeof(System.Func<DataTable.EquipBaseRecord,bool>));
			}
			else
			{
				LuaFunction func = ToLua.ToLuaFunction(L, 1);
				arg0 = DelegateFactory.CreateDelegate(typeof(System.Func<DataTable.EquipBaseRecord,bool>), func) as System.Func<DataTable.EquipBaseRecord,bool>;
			}

			DataTable.Table.ForeachEquipBase(arg0);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetEquipBase(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 1);
			DataTable.EquipBaseRecord o = DataTable.Table.GetEquipBase(arg0);
			ToLua.PushObject(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ForeachActor(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			System.Func<DataTable.ActorRecord,bool> arg0 = null;
			LuaTypes funcType1 = LuaDLL.lua_type(L, 1);

			if (funcType1 != LuaTypes.LUA_TFUNCTION)
			{
				 arg0 = (System.Func<DataTable.ActorRecord,bool>)ToLua.CheckObject(L, 1, typeof(System.Func<DataTable.ActorRecord,bool>));
			}
			else
			{
				LuaFunction func = ToLua.ToLuaFunction(L, 1);
				arg0 = DelegateFactory.CreateDelegate(typeof(System.Func<DataTable.ActorRecord,bool>), func) as System.Func<DataTable.ActorRecord,bool>;
			}

			DataTable.Table.ForeachActor(arg0);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetActor(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 1);
			DataTable.ActorRecord o = DataTable.Table.GetActor(arg0);
			ToLua.PushObject(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ForeachTalent(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			System.Func<DataTable.TalentRecord,bool> arg0 = null;
			LuaTypes funcType1 = LuaDLL.lua_type(L, 1);

			if (funcType1 != LuaTypes.LUA_TFUNCTION)
			{
				 arg0 = (System.Func<DataTable.TalentRecord,bool>)ToLua.CheckObject(L, 1, typeof(System.Func<DataTable.TalentRecord,bool>));
			}
			else
			{
				LuaFunction func = ToLua.ToLuaFunction(L, 1);
				arg0 = DelegateFactory.CreateDelegate(typeof(System.Func<DataTable.TalentRecord,bool>), func) as System.Func<DataTable.TalentRecord,bool>;
			}

			DataTable.Table.ForeachTalent(arg0);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetTalent(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 1);
			DataTable.TalentRecord o = DataTable.Table.GetTalent(arg0);
			ToLua.PushObject(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ForeachBagBase(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			System.Func<DataTable.BagBaseRecord,bool> arg0 = null;
			LuaTypes funcType1 = LuaDLL.lua_type(L, 1);

			if (funcType1 != LuaTypes.LUA_TFUNCTION)
			{
				 arg0 = (System.Func<DataTable.BagBaseRecord,bool>)ToLua.CheckObject(L, 1, typeof(System.Func<DataTable.BagBaseRecord,bool>));
			}
			else
			{
				LuaFunction func = ToLua.ToLuaFunction(L, 1);
				arg0 = DelegateFactory.CreateDelegate(typeof(System.Func<DataTable.BagBaseRecord,bool>), func) as System.Func<DataTable.BagBaseRecord,bool>;
			}

			DataTable.Table.ForeachBagBase(arg0);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetBagBase(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 1);
			DataTable.BagBaseRecord o = DataTable.Table.GetBagBase(arg0);
			ToLua.PushObject(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ForeachItemBase(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			System.Func<DataTable.ItemBaseRecord,bool> arg0 = null;
			LuaTypes funcType1 = LuaDLL.lua_type(L, 1);

			if (funcType1 != LuaTypes.LUA_TFUNCTION)
			{
				 arg0 = (System.Func<DataTable.ItemBaseRecord,bool>)ToLua.CheckObject(L, 1, typeof(System.Func<DataTable.ItemBaseRecord,bool>));
			}
			else
			{
				LuaFunction func = ToLua.ToLuaFunction(L, 1);
				arg0 = DelegateFactory.CreateDelegate(typeof(System.Func<DataTable.ItemBaseRecord,bool>), func) as System.Func<DataTable.ItemBaseRecord,bool>;
			}

			DataTable.Table.ForeachItemBase(arg0);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetItemBase(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 1);
			DataTable.ItemBaseRecord o = DataTable.Table.GetItemBase(arg0);
			ToLua.PushObject(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ForeachItemType(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			System.Func<DataTable.ItemTypeRecord,bool> arg0 = null;
			LuaTypes funcType1 = LuaDLL.lua_type(L, 1);

			if (funcType1 != LuaTypes.LUA_TFUNCTION)
			{
				 arg0 = (System.Func<DataTable.ItemTypeRecord,bool>)ToLua.CheckObject(L, 1, typeof(System.Func<DataTable.ItemTypeRecord,bool>));
			}
			else
			{
				LuaFunction func = ToLua.ToLuaFunction(L, 1);
				arg0 = DelegateFactory.CreateDelegate(typeof(System.Func<DataTable.ItemTypeRecord,bool>), func) as System.Func<DataTable.ItemTypeRecord,bool>;
			}

			DataTable.Table.ForeachItemType(arg0);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetItemType(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 1);
			DataTable.ItemTypeRecord o = DataTable.Table.GetItemType(arg0);
			ToLua.PushObject(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ForeachColorBase(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			System.Func<DataTable.ColorBaseRecord,bool> arg0 = null;
			LuaTypes funcType1 = LuaDLL.lua_type(L, 1);

			if (funcType1 != LuaTypes.LUA_TFUNCTION)
			{
				 arg0 = (System.Func<DataTable.ColorBaseRecord,bool>)ToLua.CheckObject(L, 1, typeof(System.Func<DataTable.ColorBaseRecord,bool>));
			}
			else
			{
				LuaFunction func = ToLua.ToLuaFunction(L, 1);
				arg0 = DelegateFactory.CreateDelegate(typeof(System.Func<DataTable.ColorBaseRecord,bool>), func) as System.Func<DataTable.ColorBaseRecord,bool>;
			}

			DataTable.Table.ForeachColorBase(arg0);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetColorBase(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 1);
			DataTable.ColorBaseRecord o = DataTable.Table.GetColorBase(arg0);
			ToLua.PushObject(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ForeachBuff(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			System.Func<DataTable.BuffRecord,bool> arg0 = null;
			LuaTypes funcType1 = LuaDLL.lua_type(L, 1);

			if (funcType1 != LuaTypes.LUA_TFUNCTION)
			{
				 arg0 = (System.Func<DataTable.BuffRecord,bool>)ToLua.CheckObject(L, 1, typeof(System.Func<DataTable.BuffRecord,bool>));
			}
			else
			{
				LuaFunction func = ToLua.ToLuaFunction(L, 1);
				arg0 = DelegateFactory.CreateDelegate(typeof(System.Func<DataTable.BuffRecord,bool>), func) as System.Func<DataTable.BuffRecord,bool>;
			}

			DataTable.Table.ForeachBuff(arg0);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetBuff(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 1);
			DataTable.BuffRecord o = DataTable.Table.GetBuff(arg0);
			ToLua.PushObject(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ForeachMissionBase(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			System.Func<DataTable.MissionBaseRecord,bool> arg0 = null;
			LuaTypes funcType1 = LuaDLL.lua_type(L, 1);

			if (funcType1 != LuaTypes.LUA_TFUNCTION)
			{
				 arg0 = (System.Func<DataTable.MissionBaseRecord,bool>)ToLua.CheckObject(L, 1, typeof(System.Func<DataTable.MissionBaseRecord,bool>));
			}
			else
			{
				LuaFunction func = ToLua.ToLuaFunction(L, 1);
				arg0 = DelegateFactory.CreateDelegate(typeof(System.Func<DataTable.MissionBaseRecord,bool>), func) as System.Func<DataTable.MissionBaseRecord,bool>;
			}

			DataTable.Table.ForeachMissionBase(arg0);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetMissionBase(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 1);
			DataTable.MissionBaseRecord o = DataTable.Table.GetMissionBase(arg0);
			ToLua.PushObject(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ForeachAttrRef(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			System.Func<DataTable.AttrRefRecord,bool> arg0 = null;
			LuaTypes funcType1 = LuaDLL.lua_type(L, 1);

			if (funcType1 != LuaTypes.LUA_TFUNCTION)
			{
				 arg0 = (System.Func<DataTable.AttrRefRecord,bool>)ToLua.CheckObject(L, 1, typeof(System.Func<DataTable.AttrRefRecord,bool>));
			}
			else
			{
				LuaFunction func = ToLua.ToLuaFunction(L, 1);
				arg0 = DelegateFactory.CreateDelegate(typeof(System.Func<DataTable.AttrRefRecord,bool>), func) as System.Func<DataTable.AttrRefRecord,bool>;
			}

			DataTable.Table.ForeachAttrRef(arg0);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetAttrRef(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 1);
			DataTable.AttrRefRecord o = DataTable.Table.GetAttrRef(arg0);
			ToLua.PushObject(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ForeachEquipRelate(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			System.Func<DataTable.EquipRelateRecord,bool> arg0 = null;
			LuaTypes funcType1 = LuaDLL.lua_type(L, 1);

			if (funcType1 != LuaTypes.LUA_TFUNCTION)
			{
				 arg0 = (System.Func<DataTable.EquipRelateRecord,bool>)ToLua.CheckObject(L, 1, typeof(System.Func<DataTable.EquipRelateRecord,bool>));
			}
			else
			{
				LuaFunction func = ToLua.ToLuaFunction(L, 1);
				arg0 = DelegateFactory.CreateDelegate(typeof(System.Func<DataTable.EquipRelateRecord,bool>), func) as System.Func<DataTable.EquipRelateRecord,bool>;
			}

			DataTable.Table.ForeachEquipRelate(arg0);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetEquipRelate(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 1);
			DataTable.EquipRelateRecord o = DataTable.Table.GetEquipRelate(arg0);
			ToLua.PushObject(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ForeachEquipEnchant(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			System.Func<DataTable.EquipEnchantRecord,bool> arg0 = null;
			LuaTypes funcType1 = LuaDLL.lua_type(L, 1);

			if (funcType1 != LuaTypes.LUA_TFUNCTION)
			{
				 arg0 = (System.Func<DataTable.EquipEnchantRecord,bool>)ToLua.CheckObject(L, 1, typeof(System.Func<DataTable.EquipEnchantRecord,bool>));
			}
			else
			{
				LuaFunction func = ToLua.ToLuaFunction(L, 1);
				arg0 = DelegateFactory.CreateDelegate(typeof(System.Func<DataTable.EquipEnchantRecord,bool>), func) as System.Func<DataTable.EquipEnchantRecord,bool>;
			}

			DataTable.Table.ForeachEquipEnchant(arg0);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetEquipEnchant(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 1);
			DataTable.EquipEnchantRecord o = DataTable.Table.GetEquipEnchant(arg0);
			ToLua.PushObject(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ForeachEquipEnchantChance(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			System.Func<DataTable.EquipEnchantChanceRecord,bool> arg0 = null;
			LuaTypes funcType1 = LuaDLL.lua_type(L, 1);

			if (funcType1 != LuaTypes.LUA_TFUNCTION)
			{
				 arg0 = (System.Func<DataTable.EquipEnchantChanceRecord,bool>)ToLua.CheckObject(L, 1, typeof(System.Func<DataTable.EquipEnchantChanceRecord,bool>));
			}
			else
			{
				LuaFunction func = ToLua.ToLuaFunction(L, 1);
				arg0 = DelegateFactory.CreateDelegate(typeof(System.Func<DataTable.EquipEnchantChanceRecord,bool>), func) as System.Func<DataTable.EquipEnchantChanceRecord,bool>;
			}

			DataTable.Table.ForeachEquipEnchantChance(arg0);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetEquipEnchantChance(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 1);
			DataTable.EquipEnchantChanceRecord o = DataTable.Table.GetEquipEnchantChance(arg0);
			ToLua.PushObject(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ForeachTitle(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			System.Func<DataTable.TitleRecord,bool> arg0 = null;
			LuaTypes funcType1 = LuaDLL.lua_type(L, 1);

			if (funcType1 != LuaTypes.LUA_TFUNCTION)
			{
				 arg0 = (System.Func<DataTable.TitleRecord,bool>)ToLua.CheckObject(L, 1, typeof(System.Func<DataTable.TitleRecord,bool>));
			}
			else
			{
				LuaFunction func = ToLua.ToLuaFunction(L, 1);
				arg0 = DelegateFactory.CreateDelegate(typeof(System.Func<DataTable.TitleRecord,bool>), func) as System.Func<DataTable.TitleRecord,bool>;
			}

			DataTable.Table.ForeachTitle(arg0);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetTitle(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 1);
			DataTable.TitleRecord o = DataTable.Table.GetTitle(arg0);
			ToLua.PushObject(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ForeachEquipEnchance(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			System.Func<DataTable.EquipEnchanceRecord,bool> arg0 = null;
			LuaTypes funcType1 = LuaDLL.lua_type(L, 1);

			if (funcType1 != LuaTypes.LUA_TFUNCTION)
			{
				 arg0 = (System.Func<DataTable.EquipEnchanceRecord,bool>)ToLua.CheckObject(L, 1, typeof(System.Func<DataTable.EquipEnchanceRecord,bool>));
			}
			else
			{
				LuaFunction func = ToLua.ToLuaFunction(L, 1);
				arg0 = DelegateFactory.CreateDelegate(typeof(System.Func<DataTable.EquipEnchanceRecord,bool>), func) as System.Func<DataTable.EquipEnchanceRecord,bool>;
			}

			DataTable.Table.ForeachEquipEnchance(arg0);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetEquipEnchance(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 1);
			DataTable.EquipEnchanceRecord o = DataTable.Table.GetEquipEnchance(arg0);
			ToLua.PushObject(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ForeachLevelData(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			System.Func<DataTable.LevelDataRecord,bool> arg0 = null;
			LuaTypes funcType1 = LuaDLL.lua_type(L, 1);

			if (funcType1 != LuaTypes.LUA_TFUNCTION)
			{
				 arg0 = (System.Func<DataTable.LevelDataRecord,bool>)ToLua.CheckObject(L, 1, typeof(System.Func<DataTable.LevelDataRecord,bool>));
			}
			else
			{
				LuaFunction func = ToLua.ToLuaFunction(L, 1);
				arg0 = DelegateFactory.CreateDelegate(typeof(System.Func<DataTable.LevelDataRecord,bool>), func) as System.Func<DataTable.LevelDataRecord,bool>;
			}

			DataTable.Table.ForeachLevelData(arg0);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetLevelData(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 1);
			DataTable.LevelDataRecord o = DataTable.Table.GetLevelData(arg0);
			ToLua.PushObject(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ForeachBullet(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			System.Func<DataTable.BulletRecord,bool> arg0 = null;
			LuaTypes funcType1 = LuaDLL.lua_type(L, 1);

			if (funcType1 != LuaTypes.LUA_TFUNCTION)
			{
				 arg0 = (System.Func<DataTable.BulletRecord,bool>)ToLua.CheckObject(L, 1, typeof(System.Func<DataTable.BulletRecord,bool>));
			}
			else
			{
				LuaFunction func = ToLua.ToLuaFunction(L, 1);
				arg0 = DelegateFactory.CreateDelegate(typeof(System.Func<DataTable.BulletRecord,bool>), func) as System.Func<DataTable.BulletRecord,bool>;
			}

			DataTable.Table.ForeachBullet(arg0);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetBullet(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 1);
			DataTable.BulletRecord o = DataTable.Table.GetBullet(arg0);
			ToLua.PushObject(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ForeachNpcBase(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			System.Func<DataTable.NpcBaseRecord,bool> arg0 = null;
			LuaTypes funcType1 = LuaDLL.lua_type(L, 1);

			if (funcType1 != LuaTypes.LUA_TFUNCTION)
			{
				 arg0 = (System.Func<DataTable.NpcBaseRecord,bool>)ToLua.CheckObject(L, 1, typeof(System.Func<DataTable.NpcBaseRecord,bool>));
			}
			else
			{
				LuaFunction func = ToLua.ToLuaFunction(L, 1);
				arg0 = DelegateFactory.CreateDelegate(typeof(System.Func<DataTable.NpcBaseRecord,bool>), func) as System.Func<DataTable.NpcBaseRecord,bool>;
			}

			DataTable.Table.ForeachNpcBase(arg0);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetNpcBase(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 1);
			DataTable.NpcBaseRecord o = DataTable.Table.GetNpcBase(arg0);
			ToLua.PushObject(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ForeachSkillUpgrading(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			System.Func<DataTable.SkillUpgradingRecord,bool> arg0 = null;
			LuaTypes funcType1 = LuaDLL.lua_type(L, 1);

			if (funcType1 != LuaTypes.LUA_TFUNCTION)
			{
				 arg0 = (System.Func<DataTable.SkillUpgradingRecord,bool>)ToLua.CheckObject(L, 1, typeof(System.Func<DataTable.SkillUpgradingRecord,bool>));
			}
			else
			{
				LuaFunction func = ToLua.ToLuaFunction(L, 1);
				arg0 = DelegateFactory.CreateDelegate(typeof(System.Func<DataTable.SkillUpgradingRecord,bool>), func) as System.Func<DataTable.SkillUpgradingRecord,bool>;
			}

			DataTable.Table.ForeachSkillUpgrading(arg0);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetSkillUpgrading(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 1);
			DataTable.SkillUpgradingRecord o = DataTable.Table.GetSkillUpgrading(arg0);
			ToLua.PushObject(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ForeachAchievement(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			System.Func<DataTable.AchievementRecord,bool> arg0 = null;
			LuaTypes funcType1 = LuaDLL.lua_type(L, 1);

			if (funcType1 != LuaTypes.LUA_TFUNCTION)
			{
				 arg0 = (System.Func<DataTable.AchievementRecord,bool>)ToLua.CheckObject(L, 1, typeof(System.Func<DataTable.AchievementRecord,bool>));
			}
			else
			{
				LuaFunction func = ToLua.ToLuaFunction(L, 1);
				arg0 = DelegateFactory.CreateDelegate(typeof(System.Func<DataTable.AchievementRecord,bool>), func) as System.Func<DataTable.AchievementRecord,bool>;
			}

			DataTable.Table.ForeachAchievement(arg0);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetAchievement(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 1);
			DataTable.AchievementRecord o = DataTable.Table.GetAchievement(arg0);
			ToLua.PushObject(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ForeachEquipTie(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			System.Func<DataTable.EquipTieRecord,bool> arg0 = null;
			LuaTypes funcType1 = LuaDLL.lua_type(L, 1);

			if (funcType1 != LuaTypes.LUA_TFUNCTION)
			{
				 arg0 = (System.Func<DataTable.EquipTieRecord,bool>)ToLua.CheckObject(L, 1, typeof(System.Func<DataTable.EquipTieRecord,bool>));
			}
			else
			{
				LuaFunction func = ToLua.ToLuaFunction(L, 1);
				arg0 = DelegateFactory.CreateDelegate(typeof(System.Func<DataTable.EquipTieRecord,bool>), func) as System.Func<DataTable.EquipTieRecord,bool>;
			}

			DataTable.Table.ForeachEquipTie(arg0);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetEquipTie(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 1);
			DataTable.EquipTieRecord o = DataTable.Table.GetEquipTie(arg0);
			ToLua.PushObject(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ForeachEffect(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			System.Func<DataTable.EffectRecord,bool> arg0 = null;
			LuaTypes funcType1 = LuaDLL.lua_type(L, 1);

			if (funcType1 != LuaTypes.LUA_TFUNCTION)
			{
				 arg0 = (System.Func<DataTable.EffectRecord,bool>)ToLua.CheckObject(L, 1, typeof(System.Func<DataTable.EffectRecord,bool>));
			}
			else
			{
				LuaFunction func = ToLua.ToLuaFunction(L, 1);
				arg0 = DelegateFactory.CreateDelegate(typeof(System.Func<DataTable.EffectRecord,bool>), func) as System.Func<DataTable.EffectRecord,bool>;
			}

			DataTable.Table.ForeachEffect(arg0);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetEffect(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 1);
			DataTable.EffectRecord o = DataTable.Table.GetEffect(arg0);
			ToLua.PushObject(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ForeachTransfer(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			System.Func<DataTable.TransferRecord,bool> arg0 = null;
			LuaTypes funcType1 = LuaDLL.lua_type(L, 1);

			if (funcType1 != LuaTypes.LUA_TFUNCTION)
			{
				 arg0 = (System.Func<DataTable.TransferRecord,bool>)ToLua.CheckObject(L, 1, typeof(System.Func<DataTable.TransferRecord,bool>));
			}
			else
			{
				LuaFunction func = ToLua.ToLuaFunction(L, 1);
				arg0 = DelegateFactory.CreateDelegate(typeof(System.Func<DataTable.TransferRecord,bool>), func) as System.Func<DataTable.TransferRecord,bool>;
			}

			DataTable.Table.ForeachTransfer(arg0);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetTransfer(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 1);
			DataTable.TransferRecord o = DataTable.Table.GetTransfer(arg0);
			ToLua.PushObject(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ForeachClientConfig(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			System.Func<DataTable.ClientConfigRecord,bool> arg0 = null;
			LuaTypes funcType1 = LuaDLL.lua_type(L, 1);

			if (funcType1 != LuaTypes.LUA_TFUNCTION)
			{
				 arg0 = (System.Func<DataTable.ClientConfigRecord,bool>)ToLua.CheckObject(L, 1, typeof(System.Func<DataTable.ClientConfigRecord,bool>));
			}
			else
			{
				LuaFunction func = ToLua.ToLuaFunction(L, 1);
				arg0 = DelegateFactory.CreateDelegate(typeof(System.Func<DataTable.ClientConfigRecord,bool>), func) as System.Func<DataTable.ClientConfigRecord,bool>;
			}

			DataTable.Table.ForeachClientConfig(arg0);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetClientConfig(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 1);
			DataTable.ClientConfigRecord o = DataTable.Table.GetClientConfig(arg0);
			ToLua.PushObject(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ForeachWeaponMount(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			System.Func<DataTable.WeaponMountRecord,bool> arg0 = null;
			LuaTypes funcType1 = LuaDLL.lua_type(L, 1);

			if (funcType1 != LuaTypes.LUA_TFUNCTION)
			{
				 arg0 = (System.Func<DataTable.WeaponMountRecord,bool>)ToLua.CheckObject(L, 1, typeof(System.Func<DataTable.WeaponMountRecord,bool>));
			}
			else
			{
				LuaFunction func = ToLua.ToLuaFunction(L, 1);
				arg0 = DelegateFactory.CreateDelegate(typeof(System.Func<DataTable.WeaponMountRecord,bool>), func) as System.Func<DataTable.WeaponMountRecord,bool>;
			}

			DataTable.Table.ForeachWeaponMount(arg0);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetWeaponMount(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 1);
			DataTable.WeaponMountRecord o = DataTable.Table.GetWeaponMount(arg0);
			ToLua.PushObject(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ForeachCombatText(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			System.Func<DataTable.CombatTextRecord,bool> arg0 = null;
			LuaTypes funcType1 = LuaDLL.lua_type(L, 1);

			if (funcType1 != LuaTypes.LUA_TFUNCTION)
			{
				 arg0 = (System.Func<DataTable.CombatTextRecord,bool>)ToLua.CheckObject(L, 1, typeof(System.Func<DataTable.CombatTextRecord,bool>));
			}
			else
			{
				LuaFunction func = ToLua.ToLuaFunction(L, 1);
				arg0 = DelegateFactory.CreateDelegate(typeof(System.Func<DataTable.CombatTextRecord,bool>), func) as System.Func<DataTable.CombatTextRecord,bool>;
			}

			DataTable.Table.ForeachCombatText(arg0);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetCombatText(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 1);
			DataTable.CombatTextRecord o = DataTable.Table.GetCombatText(arg0);
			ToLua.PushObject(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ForeachRandName(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			System.Func<DataTable.RandNameRecord,bool> arg0 = null;
			LuaTypes funcType1 = LuaDLL.lua_type(L, 1);

			if (funcType1 != LuaTypes.LUA_TFUNCTION)
			{
				 arg0 = (System.Func<DataTable.RandNameRecord,bool>)ToLua.CheckObject(L, 1, typeof(System.Func<DataTable.RandNameRecord,bool>));
			}
			else
			{
				LuaFunction func = ToLua.ToLuaFunction(L, 1);
				arg0 = DelegateFactory.CreateDelegate(typeof(System.Func<DataTable.RandNameRecord,bool>), func) as System.Func<DataTable.RandNameRecord,bool>;
			}

			DataTable.Table.ForeachRandName(arg0);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetRandName(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 1);
			DataTable.RandNameRecord o = DataTable.Table.GetRandName(arg0);
			ToLua.PushObject(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ForeachOperationList(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			System.Func<DataTable.OperationListRecord,bool> arg0 = null;
			LuaTypes funcType1 = LuaDLL.lua_type(L, 1);

			if (funcType1 != LuaTypes.LUA_TFUNCTION)
			{
				 arg0 = (System.Func<DataTable.OperationListRecord,bool>)ToLua.CheckObject(L, 1, typeof(System.Func<DataTable.OperationListRecord,bool>));
			}
			else
			{
				LuaFunction func = ToLua.ToLuaFunction(L, 1);
				arg0 = DelegateFactory.CreateDelegate(typeof(System.Func<DataTable.OperationListRecord,bool>), func) as System.Func<DataTable.OperationListRecord,bool>;
			}

			DataTable.Table.ForeachOperationList(arg0);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetOperationList(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 1);
			DataTable.OperationListRecord o = DataTable.Table.GetOperationList(arg0);
			ToLua.PushObject(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ForeachUI(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			System.Func<DataTable.UIRecord,bool> arg0 = null;
			LuaTypes funcType1 = LuaDLL.lua_type(L, 1);

			if (funcType1 != LuaTypes.LUA_TFUNCTION)
			{
				 arg0 = (System.Func<DataTable.UIRecord,bool>)ToLua.CheckObject(L, 1, typeof(System.Func<DataTable.UIRecord,bool>));
			}
			else
			{
				LuaFunction func = ToLua.ToLuaFunction(L, 1);
				arg0 = DelegateFactory.CreateDelegate(typeof(System.Func<DataTable.UIRecord,bool>), func) as System.Func<DataTable.UIRecord,bool>;
			}

			DataTable.Table.ForeachUI(arg0);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetUI(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 1);
			DataTable.UIRecord o = DataTable.Table.GetUI(arg0);
			ToLua.PushObject(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ForeachGift(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			System.Func<DataTable.GiftRecord,bool> arg0 = null;
			LuaTypes funcType1 = LuaDLL.lua_type(L, 1);

			if (funcType1 != LuaTypes.LUA_TFUNCTION)
			{
				 arg0 = (System.Func<DataTable.GiftRecord,bool>)ToLua.CheckObject(L, 1, typeof(System.Func<DataTable.GiftRecord,bool>));
			}
			else
			{
				LuaFunction func = ToLua.ToLuaFunction(L, 1);
				arg0 = DelegateFactory.CreateDelegate(typeof(System.Func<DataTable.GiftRecord,bool>), func) as System.Func<DataTable.GiftRecord,bool>;
			}

			DataTable.Table.ForeachGift(arg0);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetGift(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 1);
			DataTable.GiftRecord o = DataTable.Table.GetGift(arg0);
			ToLua.PushObject(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ForeachEquipBlessing(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			System.Func<DataTable.EquipBlessingRecord,bool> arg0 = null;
			LuaTypes funcType1 = LuaDLL.lua_type(L, 1);

			if (funcType1 != LuaTypes.LUA_TFUNCTION)
			{
				 arg0 = (System.Func<DataTable.EquipBlessingRecord,bool>)ToLua.CheckObject(L, 1, typeof(System.Func<DataTable.EquipBlessingRecord,bool>));
			}
			else
			{
				LuaFunction func = ToLua.ToLuaFunction(L, 1);
				arg0 = DelegateFactory.CreateDelegate(typeof(System.Func<DataTable.EquipBlessingRecord,bool>), func) as System.Func<DataTable.EquipBlessingRecord,bool>;
			}

			DataTable.Table.ForeachEquipBlessing(arg0);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetEquipBlessing(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 1);
			DataTable.EquipBlessingRecord o = DataTable.Table.GetEquipBlessing(arg0);
			ToLua.PushObject(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ForeachEquipAdditional(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			System.Func<DataTable.EquipAdditionalRecord,bool> arg0 = null;
			LuaTypes funcType1 = LuaDLL.lua_type(L, 1);

			if (funcType1 != LuaTypes.LUA_TFUNCTION)
			{
				 arg0 = (System.Func<DataTable.EquipAdditionalRecord,bool>)ToLua.CheckObject(L, 1, typeof(System.Func<DataTable.EquipAdditionalRecord,bool>));
			}
			else
			{
				LuaFunction func = ToLua.ToLuaFunction(L, 1);
				arg0 = DelegateFactory.CreateDelegate(typeof(System.Func<DataTable.EquipAdditionalRecord,bool>), func) as System.Func<DataTable.EquipAdditionalRecord,bool>;
			}

			DataTable.Table.ForeachEquipAdditional(arg0);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetEquipAdditional(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 1);
			DataTable.EquipAdditionalRecord o = DataTable.Table.GetEquipAdditional(arg0);
			ToLua.PushObject(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ForeachEquipExcellent(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			System.Func<DataTable.EquipExcellentRecord,bool> arg0 = null;
			LuaTypes funcType1 = LuaDLL.lua_type(L, 1);

			if (funcType1 != LuaTypes.LUA_TFUNCTION)
			{
				 arg0 = (System.Func<DataTable.EquipExcellentRecord,bool>)ToLua.CheckObject(L, 1, typeof(System.Func<DataTable.EquipExcellentRecord,bool>));
			}
			else
			{
				LuaFunction func = ToLua.ToLuaFunction(L, 1);
				arg0 = DelegateFactory.CreateDelegate(typeof(System.Func<DataTable.EquipExcellentRecord,bool>), func) as System.Func<DataTable.EquipExcellentRecord,bool>;
			}

			DataTable.Table.ForeachEquipExcellent(arg0);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetEquipExcellent(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 1);
			DataTable.EquipExcellentRecord o = DataTable.Table.GetEquipExcellent(arg0);
			ToLua.PushObject(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ForeachEquipModelView(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			System.Func<DataTable.EquipModelViewRecord,bool> arg0 = null;
			LuaTypes funcType1 = LuaDLL.lua_type(L, 1);

			if (funcType1 != LuaTypes.LUA_TFUNCTION)
			{
				 arg0 = (System.Func<DataTable.EquipModelViewRecord,bool>)ToLua.CheckObject(L, 1, typeof(System.Func<DataTable.EquipModelViewRecord,bool>));
			}
			else
			{
				LuaFunction func = ToLua.ToLuaFunction(L, 1);
				arg0 = DelegateFactory.CreateDelegate(typeof(System.Func<DataTable.EquipModelViewRecord,bool>), func) as System.Func<DataTable.EquipModelViewRecord,bool>;
			}

			DataTable.Table.ForeachEquipModelView(arg0);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetEquipModelView(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 1);
			DataTable.EquipModelViewRecord o = DataTable.Table.GetEquipModelView(arg0);
			ToLua.PushObject(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ForeachTalk(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			System.Func<DataTable.TalkRecord,bool> arg0 = null;
			LuaTypes funcType1 = LuaDLL.lua_type(L, 1);

			if (funcType1 != LuaTypes.LUA_TFUNCTION)
			{
				 arg0 = (System.Func<DataTable.TalkRecord,bool>)ToLua.CheckObject(L, 1, typeof(System.Func<DataTable.TalkRecord,bool>));
			}
			else
			{
				LuaFunction func = ToLua.ToLuaFunction(L, 1);
				arg0 = DelegateFactory.CreateDelegate(typeof(System.Func<DataTable.TalkRecord,bool>), func) as System.Func<DataTable.TalkRecord,bool>;
			}

			DataTable.Table.ForeachTalk(arg0);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetTalk(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 1);
			DataTable.TalkRecord o = DataTable.Table.GetTalk(arg0);
			ToLua.PushObject(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ForeachChatInfo(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			System.Func<DataTable.ChatInfoRecord,bool> arg0 = null;
			LuaTypes funcType1 = LuaDLL.lua_type(L, 1);

			if (funcType1 != LuaTypes.LUA_TFUNCTION)
			{
				 arg0 = (System.Func<DataTable.ChatInfoRecord,bool>)ToLua.CheckObject(L, 1, typeof(System.Func<DataTable.ChatInfoRecord,bool>));
			}
			else
			{
				LuaFunction func = ToLua.ToLuaFunction(L, 1);
				arg0 = DelegateFactory.CreateDelegate(typeof(System.Func<DataTable.ChatInfoRecord,bool>), func) as System.Func<DataTable.ChatInfoRecord,bool>;
			}

			DataTable.Table.ForeachChatInfo(arg0);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetChatInfo(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 1);
			DataTable.ChatInfoRecord o = DataTable.Table.GetChatInfo(arg0);
			ToLua.PushObject(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ForeachHandBook(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			System.Func<DataTable.HandBookRecord,bool> arg0 = null;
			LuaTypes funcType1 = LuaDLL.lua_type(L, 1);

			if (funcType1 != LuaTypes.LUA_TFUNCTION)
			{
				 arg0 = (System.Func<DataTable.HandBookRecord,bool>)ToLua.CheckObject(L, 1, typeof(System.Func<DataTable.HandBookRecord,bool>));
			}
			else
			{
				LuaFunction func = ToLua.ToLuaFunction(L, 1);
				arg0 = DelegateFactory.CreateDelegate(typeof(System.Func<DataTable.HandBookRecord,bool>), func) as System.Func<DataTable.HandBookRecord,bool>;
			}

			DataTable.Table.ForeachHandBook(arg0);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetHandBook(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 1);
			DataTable.HandBookRecord o = DataTable.Table.GetHandBook(arg0);
			ToLua.PushObject(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ForeachBookGroup(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			System.Func<DataTable.BookGroupRecord,bool> arg0 = null;
			LuaTypes funcType1 = LuaDLL.lua_type(L, 1);

			if (funcType1 != LuaTypes.LUA_TFUNCTION)
			{
				 arg0 = (System.Func<DataTable.BookGroupRecord,bool>)ToLua.CheckObject(L, 1, typeof(System.Func<DataTable.BookGroupRecord,bool>));
			}
			else
			{
				LuaFunction func = ToLua.ToLuaFunction(L, 1);
				arg0 = DelegateFactory.CreateDelegate(typeof(System.Func<DataTable.BookGroupRecord,bool>), func) as System.Func<DataTable.BookGroupRecord,bool>;
			}

			DataTable.Table.ForeachBookGroup(arg0);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetBookGroup(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 1);
			DataTable.BookGroupRecord o = DataTable.Table.GetBookGroup(arg0);
			ToLua.PushObject(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ForeachItemCompose(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			System.Func<DataTable.ItemComposeRecord,bool> arg0 = null;
			LuaTypes funcType1 = LuaDLL.lua_type(L, 1);

			if (funcType1 != LuaTypes.LUA_TFUNCTION)
			{
				 arg0 = (System.Func<DataTable.ItemComposeRecord,bool>)ToLua.CheckObject(L, 1, typeof(System.Func<DataTable.ItemComposeRecord,bool>));
			}
			else
			{
				LuaFunction func = ToLua.ToLuaFunction(L, 1);
				arg0 = DelegateFactory.CreateDelegate(typeof(System.Func<DataTable.ItemComposeRecord,bool>), func) as System.Func<DataTable.ItemComposeRecord,bool>;
			}

			DataTable.Table.ForeachItemCompose(arg0);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetItemCompose(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 1);
			DataTable.ItemComposeRecord o = DataTable.Table.GetItemCompose(arg0);
			ToLua.PushObject(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ForeachCamp(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			System.Func<DataTable.CampRecord,bool> arg0 = null;
			LuaTypes funcType1 = LuaDLL.lua_type(L, 1);

			if (funcType1 != LuaTypes.LUA_TFUNCTION)
			{
				 arg0 = (System.Func<DataTable.CampRecord,bool>)ToLua.CheckObject(L, 1, typeof(System.Func<DataTable.CampRecord,bool>));
			}
			else
			{
				LuaFunction func = ToLua.ToLuaFunction(L, 1);
				arg0 = DelegateFactory.CreateDelegate(typeof(System.Func<DataTable.CampRecord,bool>), func) as System.Func<DataTable.CampRecord,bool>;
			}

			DataTable.Table.ForeachCamp(arg0);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetCamp(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 1);
			DataTable.CampRecord o = DataTable.Table.GetCamp(arg0);
			ToLua.PushObject(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ForeachDropModel(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			System.Func<DataTable.DropModelRecord,bool> arg0 = null;
			LuaTypes funcType1 = LuaDLL.lua_type(L, 1);

			if (funcType1 != LuaTypes.LUA_TFUNCTION)
			{
				 arg0 = (System.Func<DataTable.DropModelRecord,bool>)ToLua.CheckObject(L, 1, typeof(System.Func<DataTable.DropModelRecord,bool>));
			}
			else
			{
				LuaFunction func = ToLua.ToLuaFunction(L, 1);
				arg0 = DelegateFactory.CreateDelegate(typeof(System.Func<DataTable.DropModelRecord,bool>), func) as System.Func<DataTable.DropModelRecord,bool>;
			}

			DataTable.Table.ForeachDropModel(arg0);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetDropModel(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 1);
			DataTable.DropModelRecord o = DataTable.Table.GetDropModel(arg0);
			ToLua.PushObject(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ForeachFuben(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			System.Func<DataTable.FubenRecord,bool> arg0 = null;
			LuaTypes funcType1 = LuaDLL.lua_type(L, 1);

			if (funcType1 != LuaTypes.LUA_TFUNCTION)
			{
				 arg0 = (System.Func<DataTable.FubenRecord,bool>)ToLua.CheckObject(L, 1, typeof(System.Func<DataTable.FubenRecord,bool>));
			}
			else
			{
				LuaFunction func = ToLua.ToLuaFunction(L, 1);
				arg0 = DelegateFactory.CreateDelegate(typeof(System.Func<DataTable.FubenRecord,bool>), func) as System.Func<DataTable.FubenRecord,bool>;
			}

			DataTable.Table.ForeachFuben(arg0);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetFuben(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 1);
			DataTable.FubenRecord o = DataTable.Table.GetFuben(arg0);
			ToLua.PushObject(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ForeachStats(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			System.Func<DataTable.StatsRecord,bool> arg0 = null;
			LuaTypes funcType1 = LuaDLL.lua_type(L, 1);

			if (funcType1 != LuaTypes.LUA_TFUNCTION)
			{
				 arg0 = (System.Func<DataTable.StatsRecord,bool>)ToLua.CheckObject(L, 1, typeof(System.Func<DataTable.StatsRecord,bool>));
			}
			else
			{
				LuaFunction func = ToLua.ToLuaFunction(L, 1);
				arg0 = DelegateFactory.CreateDelegate(typeof(System.Func<DataTable.StatsRecord,bool>), func) as System.Func<DataTable.StatsRecord,bool>;
			}

			DataTable.Table.ForeachStats(arg0);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetStats(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 1);
			DataTable.StatsRecord o = DataTable.Table.GetStats(arg0);
			ToLua.PushObject(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ForeachPlotFuben(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			System.Func<DataTable.PlotFubenRecord,bool> arg0 = null;
			LuaTypes funcType1 = LuaDLL.lua_type(L, 1);

			if (funcType1 != LuaTypes.LUA_TFUNCTION)
			{
				 arg0 = (System.Func<DataTable.PlotFubenRecord,bool>)ToLua.CheckObject(L, 1, typeof(System.Func<DataTable.PlotFubenRecord,bool>));
			}
			else
			{
				LuaFunction func = ToLua.ToLuaFunction(L, 1);
				arg0 = DelegateFactory.CreateDelegate(typeof(System.Func<DataTable.PlotFubenRecord,bool>), func) as System.Func<DataTable.PlotFubenRecord,bool>;
			}

			DataTable.Table.ForeachPlotFuben(arg0);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetPlotFuben(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 1);
			DataTable.PlotFubenRecord o = DataTable.Table.GetPlotFuben(arg0);
			ToLua.PushObject(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ForeachStore(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			System.Func<DataTable.StoreRecord,bool> arg0 = null;
			LuaTypes funcType1 = LuaDLL.lua_type(L, 1);

			if (funcType1 != LuaTypes.LUA_TFUNCTION)
			{
				 arg0 = (System.Func<DataTable.StoreRecord,bool>)ToLua.CheckObject(L, 1, typeof(System.Func<DataTable.StoreRecord,bool>));
			}
			else
			{
				LuaFunction func = ToLua.ToLuaFunction(L, 1);
				arg0 = DelegateFactory.CreateDelegate(typeof(System.Func<DataTable.StoreRecord,bool>), func) as System.Func<DataTable.StoreRecord,bool>;
			}

			DataTable.Table.ForeachStore(arg0);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetStore(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 1);
			DataTable.StoreRecord o = DataTable.Table.GetStore(arg0);
			ToLua.PushObject(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ForeachStory(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			System.Func<DataTable.StoryRecord,bool> arg0 = null;
			LuaTypes funcType1 = LuaDLL.lua_type(L, 1);

			if (funcType1 != LuaTypes.LUA_TFUNCTION)
			{
				 arg0 = (System.Func<DataTable.StoryRecord,bool>)ToLua.CheckObject(L, 1, typeof(System.Func<DataTable.StoryRecord,bool>));
			}
			else
			{
				LuaFunction func = ToLua.ToLuaFunction(L, 1);
				arg0 = DelegateFactory.CreateDelegate(typeof(System.Func<DataTable.StoryRecord,bool>), func) as System.Func<DataTable.StoryRecord,bool>;
			}

			DataTable.Table.ForeachStory(arg0);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetStory(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 1);
			DataTable.StoryRecord o = DataTable.Table.GetStory(arg0);
			ToLua.PushObject(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ForeachBuilding(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			System.Func<DataTable.BuildingRecord,bool> arg0 = null;
			LuaTypes funcType1 = LuaDLL.lua_type(L, 1);

			if (funcType1 != LuaTypes.LUA_TFUNCTION)
			{
				 arg0 = (System.Func<DataTable.BuildingRecord,bool>)ToLua.CheckObject(L, 1, typeof(System.Func<DataTable.BuildingRecord,bool>));
			}
			else
			{
				LuaFunction func = ToLua.ToLuaFunction(L, 1);
				arg0 = DelegateFactory.CreateDelegate(typeof(System.Func<DataTable.BuildingRecord,bool>), func) as System.Func<DataTable.BuildingRecord,bool>;
			}

			DataTable.Table.ForeachBuilding(arg0);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetBuilding(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 1);
			DataTable.BuildingRecord o = DataTable.Table.GetBuilding(arg0);
			ToLua.PushObject(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ForeachBuildingRes(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			System.Func<DataTable.BuildingResRecord,bool> arg0 = null;
			LuaTypes funcType1 = LuaDLL.lua_type(L, 1);

			if (funcType1 != LuaTypes.LUA_TFUNCTION)
			{
				 arg0 = (System.Func<DataTable.BuildingResRecord,bool>)ToLua.CheckObject(L, 1, typeof(System.Func<DataTable.BuildingResRecord,bool>));
			}
			else
			{
				LuaFunction func = ToLua.ToLuaFunction(L, 1);
				arg0 = DelegateFactory.CreateDelegate(typeof(System.Func<DataTable.BuildingResRecord,bool>), func) as System.Func<DataTable.BuildingResRecord,bool>;
			}

			DataTable.Table.ForeachBuildingRes(arg0);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetBuildingRes(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 1);
			DataTable.BuildingResRecord o = DataTable.Table.GetBuildingRes(arg0);
			ToLua.PushObject(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ForeachBuildingRule(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			System.Func<DataTable.BuildingRuleRecord,bool> arg0 = null;
			LuaTypes funcType1 = LuaDLL.lua_type(L, 1);

			if (funcType1 != LuaTypes.LUA_TFUNCTION)
			{
				 arg0 = (System.Func<DataTable.BuildingRuleRecord,bool>)ToLua.CheckObject(L, 1, typeof(System.Func<DataTable.BuildingRuleRecord,bool>));
			}
			else
			{
				LuaFunction func = ToLua.ToLuaFunction(L, 1);
				arg0 = DelegateFactory.CreateDelegate(typeof(System.Func<DataTable.BuildingRuleRecord,bool>), func) as System.Func<DataTable.BuildingRuleRecord,bool>;
			}

			DataTable.Table.ForeachBuildingRule(arg0);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetBuildingRule(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 1);
			DataTable.BuildingRuleRecord o = DataTable.Table.GetBuildingRule(arg0);
			ToLua.PushObject(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ForeachBuildingService(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			System.Func<DataTable.BuildingServiceRecord,bool> arg0 = null;
			LuaTypes funcType1 = LuaDLL.lua_type(L, 1);

			if (funcType1 != LuaTypes.LUA_TFUNCTION)
			{
				 arg0 = (System.Func<DataTable.BuildingServiceRecord,bool>)ToLua.CheckObject(L, 1, typeof(System.Func<DataTable.BuildingServiceRecord,bool>));
			}
			else
			{
				LuaFunction func = ToLua.ToLuaFunction(L, 1);
				arg0 = DelegateFactory.CreateDelegate(typeof(System.Func<DataTable.BuildingServiceRecord,bool>), func) as System.Func<DataTable.BuildingServiceRecord,bool>;
			}

			DataTable.Table.ForeachBuildingService(arg0);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetBuildingService(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 1);
			DataTable.BuildingServiceRecord o = DataTable.Table.GetBuildingService(arg0);
			ToLua.PushObject(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ForeachHomeSence(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			System.Func<DataTable.HomeSenceRecord,bool> arg0 = null;
			LuaTypes funcType1 = LuaDLL.lua_type(L, 1);

			if (funcType1 != LuaTypes.LUA_TFUNCTION)
			{
				 arg0 = (System.Func<DataTable.HomeSenceRecord,bool>)ToLua.CheckObject(L, 1, typeof(System.Func<DataTable.HomeSenceRecord,bool>));
			}
			else
			{
				LuaFunction func = ToLua.ToLuaFunction(L, 1);
				arg0 = DelegateFactory.CreateDelegate(typeof(System.Func<DataTable.HomeSenceRecord,bool>), func) as System.Func<DataTable.HomeSenceRecord,bool>;
			}

			DataTable.Table.ForeachHomeSence(arg0);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetHomeSence(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 1);
			DataTable.HomeSenceRecord o = DataTable.Table.GetHomeSence(arg0);
			ToLua.PushObject(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ForeachPet(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			System.Func<DataTable.PetRecord,bool> arg0 = null;
			LuaTypes funcType1 = LuaDLL.lua_type(L, 1);

			if (funcType1 != LuaTypes.LUA_TFUNCTION)
			{
				 arg0 = (System.Func<DataTable.PetRecord,bool>)ToLua.CheckObject(L, 1, typeof(System.Func<DataTable.PetRecord,bool>));
			}
			else
			{
				LuaFunction func = ToLua.ToLuaFunction(L, 1);
				arg0 = DelegateFactory.CreateDelegate(typeof(System.Func<DataTable.PetRecord,bool>), func) as System.Func<DataTable.PetRecord,bool>;
			}

			DataTable.Table.ForeachPet(arg0);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetPet(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 1);
			DataTable.PetRecord o = DataTable.Table.GetPet(arg0);
			ToLua.PushObject(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ForeachPetSkill(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			System.Func<DataTable.PetSkillRecord,bool> arg0 = null;
			LuaTypes funcType1 = LuaDLL.lua_type(L, 1);

			if (funcType1 != LuaTypes.LUA_TFUNCTION)
			{
				 arg0 = (System.Func<DataTable.PetSkillRecord,bool>)ToLua.CheckObject(L, 1, typeof(System.Func<DataTable.PetSkillRecord,bool>));
			}
			else
			{
				LuaFunction func = ToLua.ToLuaFunction(L, 1);
				arg0 = DelegateFactory.CreateDelegate(typeof(System.Func<DataTable.PetSkillRecord,bool>), func) as System.Func<DataTable.PetSkillRecord,bool>;
			}

			DataTable.Table.ForeachPetSkill(arg0);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetPetSkill(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 1);
			DataTable.PetSkillRecord o = DataTable.Table.GetPetSkill(arg0);
			ToLua.PushObject(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ForeachService(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			System.Func<DataTable.ServiceRecord,bool> arg0 = null;
			LuaTypes funcType1 = LuaDLL.lua_type(L, 1);

			if (funcType1 != LuaTypes.LUA_TFUNCTION)
			{
				 arg0 = (System.Func<DataTable.ServiceRecord,bool>)ToLua.CheckObject(L, 1, typeof(System.Func<DataTable.ServiceRecord,bool>));
			}
			else
			{
				LuaFunction func = ToLua.ToLuaFunction(L, 1);
				arg0 = DelegateFactory.CreateDelegate(typeof(System.Func<DataTable.ServiceRecord,bool>), func) as System.Func<DataTable.ServiceRecord,bool>;
			}

			DataTable.Table.ForeachService(arg0);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetService(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 1);
			DataTable.ServiceRecord o = DataTable.Table.GetService(arg0);
			ToLua.PushObject(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ForeachStoreType(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			System.Func<DataTable.StoreTypeRecord,bool> arg0 = null;
			LuaTypes funcType1 = LuaDLL.lua_type(L, 1);

			if (funcType1 != LuaTypes.LUA_TFUNCTION)
			{
				 arg0 = (System.Func<DataTable.StoreTypeRecord,bool>)ToLua.CheckObject(L, 1, typeof(System.Func<DataTable.StoreTypeRecord,bool>));
			}
			else
			{
				LuaFunction func = ToLua.ToLuaFunction(L, 1);
				arg0 = DelegateFactory.CreateDelegate(typeof(System.Func<DataTable.StoreTypeRecord,bool>), func) as System.Func<DataTable.StoreTypeRecord,bool>;
			}

			DataTable.Table.ForeachStoreType(arg0);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetStoreType(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 1);
			DataTable.StoreTypeRecord o = DataTable.Table.GetStoreType(arg0);
			ToLua.PushObject(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ForeachElf(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			System.Func<DataTable.ElfRecord,bool> arg0 = null;
			LuaTypes funcType1 = LuaDLL.lua_type(L, 1);

			if (funcType1 != LuaTypes.LUA_TFUNCTION)
			{
				 arg0 = (System.Func<DataTable.ElfRecord,bool>)ToLua.CheckObject(L, 1, typeof(System.Func<DataTable.ElfRecord,bool>));
			}
			else
			{
				LuaFunction func = ToLua.ToLuaFunction(L, 1);
				arg0 = DelegateFactory.CreateDelegate(typeof(System.Func<DataTable.ElfRecord,bool>), func) as System.Func<DataTable.ElfRecord,bool>;
			}

			DataTable.Table.ForeachElf(arg0);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetElf(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 1);
			DataTable.ElfRecord o = DataTable.Table.GetElf(arg0);
			ToLua.PushObject(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ForeachElfGroup(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			System.Func<DataTable.ElfGroupRecord,bool> arg0 = null;
			LuaTypes funcType1 = LuaDLL.lua_type(L, 1);

			if (funcType1 != LuaTypes.LUA_TFUNCTION)
			{
				 arg0 = (System.Func<DataTable.ElfGroupRecord,bool>)ToLua.CheckObject(L, 1, typeof(System.Func<DataTable.ElfGroupRecord,bool>));
			}
			else
			{
				LuaFunction func = ToLua.ToLuaFunction(L, 1);
				arg0 = DelegateFactory.CreateDelegate(typeof(System.Func<DataTable.ElfGroupRecord,bool>), func) as System.Func<DataTable.ElfGroupRecord,bool>;
			}

			DataTable.Table.ForeachElfGroup(arg0);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetElfGroup(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 1);
			DataTable.ElfGroupRecord o = DataTable.Table.GetElfGroup(arg0);
			ToLua.PushObject(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ForeachQueue(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			System.Func<DataTable.QueueRecord,bool> arg0 = null;
			LuaTypes funcType1 = LuaDLL.lua_type(L, 1);

			if (funcType1 != LuaTypes.LUA_TFUNCTION)
			{
				 arg0 = (System.Func<DataTable.QueueRecord,bool>)ToLua.CheckObject(L, 1, typeof(System.Func<DataTable.QueueRecord,bool>));
			}
			else
			{
				LuaFunction func = ToLua.ToLuaFunction(L, 1);
				arg0 = DelegateFactory.CreateDelegate(typeof(System.Func<DataTable.QueueRecord,bool>), func) as System.Func<DataTable.QueueRecord,bool>;
			}

			DataTable.Table.ForeachQueue(arg0);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetQueue(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 1);
			DataTable.QueueRecord o = DataTable.Table.GetQueue(arg0);
			ToLua.PushObject(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ForeachDraw(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			System.Func<DataTable.DrawRecord,bool> arg0 = null;
			LuaTypes funcType1 = LuaDLL.lua_type(L, 1);

			if (funcType1 != LuaTypes.LUA_TFUNCTION)
			{
				 arg0 = (System.Func<DataTable.DrawRecord,bool>)ToLua.CheckObject(L, 1, typeof(System.Func<DataTable.DrawRecord,bool>));
			}
			else
			{
				LuaFunction func = ToLua.ToLuaFunction(L, 1);
				arg0 = DelegateFactory.CreateDelegate(typeof(System.Func<DataTable.DrawRecord,bool>), func) as System.Func<DataTable.DrawRecord,bool>;
			}

			DataTable.Table.ForeachDraw(arg0);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetDraw(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 1);
			DataTable.DrawRecord o = DataTable.Table.GetDraw(arg0);
			ToLua.PushObject(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ForeachPlant(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			System.Func<DataTable.PlantRecord,bool> arg0 = null;
			LuaTypes funcType1 = LuaDLL.lua_type(L, 1);

			if (funcType1 != LuaTypes.LUA_TFUNCTION)
			{
				 arg0 = (System.Func<DataTable.PlantRecord,bool>)ToLua.CheckObject(L, 1, typeof(System.Func<DataTable.PlantRecord,bool>));
			}
			else
			{
				LuaFunction func = ToLua.ToLuaFunction(L, 1);
				arg0 = DelegateFactory.CreateDelegate(typeof(System.Func<DataTable.PlantRecord,bool>), func) as System.Func<DataTable.PlantRecord,bool>;
			}

			DataTable.Table.ForeachPlant(arg0);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetPlant(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 1);
			DataTable.PlantRecord o = DataTable.Table.GetPlant(arg0);
			ToLua.PushObject(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ForeachSeqFrame(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			System.Func<DataTable.SeqFrameRecord,bool> arg0 = null;
			LuaTypes funcType1 = LuaDLL.lua_type(L, 1);

			if (funcType1 != LuaTypes.LUA_TFUNCTION)
			{
				 arg0 = (System.Func<DataTable.SeqFrameRecord,bool>)ToLua.CheckObject(L, 1, typeof(System.Func<DataTable.SeqFrameRecord,bool>));
			}
			else
			{
				LuaFunction func = ToLua.ToLuaFunction(L, 1);
				arg0 = DelegateFactory.CreateDelegate(typeof(System.Func<DataTable.SeqFrameRecord,bool>), func) as System.Func<DataTable.SeqFrameRecord,bool>;
			}

			DataTable.Table.ForeachSeqFrame(arg0);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetSeqFrame(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 1);
			DataTable.SeqFrameRecord o = DataTable.Table.GetSeqFrame(arg0);
			ToLua.PushObject(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ForeachMedal(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			System.Func<DataTable.MedalRecord,bool> arg0 = null;
			LuaTypes funcType1 = LuaDLL.lua_type(L, 1);

			if (funcType1 != LuaTypes.LUA_TFUNCTION)
			{
				 arg0 = (System.Func<DataTable.MedalRecord,bool>)ToLua.CheckObject(L, 1, typeof(System.Func<DataTable.MedalRecord,bool>));
			}
			else
			{
				LuaFunction func = ToLua.ToLuaFunction(L, 1);
				arg0 = DelegateFactory.CreateDelegate(typeof(System.Func<DataTable.MedalRecord,bool>), func) as System.Func<DataTable.MedalRecord,bool>;
			}

			DataTable.Table.ForeachMedal(arg0);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetMedal(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 1);
			DataTable.MedalRecord o = DataTable.Table.GetMedal(arg0);
			ToLua.PushObject(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ForeachSailing(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			System.Func<DataTable.SailingRecord,bool> arg0 = null;
			LuaTypes funcType1 = LuaDLL.lua_type(L, 1);

			if (funcType1 != LuaTypes.LUA_TFUNCTION)
			{
				 arg0 = (System.Func<DataTable.SailingRecord,bool>)ToLua.CheckObject(L, 1, typeof(System.Func<DataTable.SailingRecord,bool>));
			}
			else
			{
				LuaFunction func = ToLua.ToLuaFunction(L, 1);
				arg0 = DelegateFactory.CreateDelegate(typeof(System.Func<DataTable.SailingRecord,bool>), func) as System.Func<DataTable.SailingRecord,bool>;
			}

			DataTable.Table.ForeachSailing(arg0);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetSailing(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 1);
			DataTable.SailingRecord o = DataTable.Table.GetSailing(arg0);
			ToLua.PushObject(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ForeachWingTrain(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			System.Func<DataTable.WingTrainRecord,bool> arg0 = null;
			LuaTypes funcType1 = LuaDLL.lua_type(L, 1);

			if (funcType1 != LuaTypes.LUA_TFUNCTION)
			{
				 arg0 = (System.Func<DataTable.WingTrainRecord,bool>)ToLua.CheckObject(L, 1, typeof(System.Func<DataTable.WingTrainRecord,bool>));
			}
			else
			{
				LuaFunction func = ToLua.ToLuaFunction(L, 1);
				arg0 = DelegateFactory.CreateDelegate(typeof(System.Func<DataTable.WingTrainRecord,bool>), func) as System.Func<DataTable.WingTrainRecord,bool>;
			}

			DataTable.Table.ForeachWingTrain(arg0);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetWingTrain(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 1);
			DataTable.WingTrainRecord o = DataTable.Table.GetWingTrain(arg0);
			ToLua.PushObject(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ForeachWingQuality(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			System.Func<DataTable.WingQualityRecord,bool> arg0 = null;
			LuaTypes funcType1 = LuaDLL.lua_type(L, 1);

			if (funcType1 != LuaTypes.LUA_TFUNCTION)
			{
				 arg0 = (System.Func<DataTable.WingQualityRecord,bool>)ToLua.CheckObject(L, 1, typeof(System.Func<DataTable.WingQualityRecord,bool>));
			}
			else
			{
				LuaFunction func = ToLua.ToLuaFunction(L, 1);
				arg0 = DelegateFactory.CreateDelegate(typeof(System.Func<DataTable.WingQualityRecord,bool>), func) as System.Func<DataTable.WingQualityRecord,bool>;
			}

			DataTable.Table.ForeachWingQuality(arg0);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetWingQuality(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 1);
			DataTable.WingQualityRecord o = DataTable.Table.GetWingQuality(arg0);
			ToLua.PushObject(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ForeachPVPRule(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			System.Func<DataTable.PVPRuleRecord,bool> arg0 = null;
			LuaTypes funcType1 = LuaDLL.lua_type(L, 1);

			if (funcType1 != LuaTypes.LUA_TFUNCTION)
			{
				 arg0 = (System.Func<DataTable.PVPRuleRecord,bool>)ToLua.CheckObject(L, 1, typeof(System.Func<DataTable.PVPRuleRecord,bool>));
			}
			else
			{
				LuaFunction func = ToLua.ToLuaFunction(L, 1);
				arg0 = DelegateFactory.CreateDelegate(typeof(System.Func<DataTable.PVPRuleRecord,bool>), func) as System.Func<DataTable.PVPRuleRecord,bool>;
			}

			DataTable.Table.ForeachPVPRule(arg0);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetPVPRule(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 1);
			DataTable.PVPRuleRecord o = DataTable.Table.GetPVPRule(arg0);
			ToLua.PushObject(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ForeachArenaReward(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			System.Func<DataTable.ArenaRewardRecord,bool> arg0 = null;
			LuaTypes funcType1 = LuaDLL.lua_type(L, 1);

			if (funcType1 != LuaTypes.LUA_TFUNCTION)
			{
				 arg0 = (System.Func<DataTable.ArenaRewardRecord,bool>)ToLua.CheckObject(L, 1, typeof(System.Func<DataTable.ArenaRewardRecord,bool>));
			}
			else
			{
				LuaFunction func = ToLua.ToLuaFunction(L, 1);
				arg0 = DelegateFactory.CreateDelegate(typeof(System.Func<DataTable.ArenaRewardRecord,bool>), func) as System.Func<DataTable.ArenaRewardRecord,bool>;
			}

			DataTable.Table.ForeachArenaReward(arg0);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetArenaReward(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 1);
			DataTable.ArenaRewardRecord o = DataTable.Table.GetArenaReward(arg0);
			ToLua.PushObject(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ForeachArenaLevel(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			System.Func<DataTable.ArenaLevelRecord,bool> arg0 = null;
			LuaTypes funcType1 = LuaDLL.lua_type(L, 1);

			if (funcType1 != LuaTypes.LUA_TFUNCTION)
			{
				 arg0 = (System.Func<DataTable.ArenaLevelRecord,bool>)ToLua.CheckObject(L, 1, typeof(System.Func<DataTable.ArenaLevelRecord,bool>));
			}
			else
			{
				LuaFunction func = ToLua.ToLuaFunction(L, 1);
				arg0 = DelegateFactory.CreateDelegate(typeof(System.Func<DataTable.ArenaLevelRecord,bool>), func) as System.Func<DataTable.ArenaLevelRecord,bool>;
			}

			DataTable.Table.ForeachArenaLevel(arg0);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetArenaLevel(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 1);
			DataTable.ArenaLevelRecord o = DataTable.Table.GetArenaLevel(arg0);
			ToLua.PushObject(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ForeachHonor(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			System.Func<DataTable.HonorRecord,bool> arg0 = null;
			LuaTypes funcType1 = LuaDLL.lua_type(L, 1);

			if (funcType1 != LuaTypes.LUA_TFUNCTION)
			{
				 arg0 = (System.Func<DataTable.HonorRecord,bool>)ToLua.CheckObject(L, 1, typeof(System.Func<DataTable.HonorRecord,bool>));
			}
			else
			{
				LuaFunction func = ToLua.ToLuaFunction(L, 1);
				arg0 = DelegateFactory.CreateDelegate(typeof(System.Func<DataTable.HonorRecord,bool>), func) as System.Func<DataTable.HonorRecord,bool>;
			}

			DataTable.Table.ForeachHonor(arg0);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetHonor(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 1);
			DataTable.HonorRecord o = DataTable.Table.GetHonor(arg0);
			ToLua.PushObject(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ForeachJJCRoot(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			System.Func<DataTable.JJCRootRecord,bool> arg0 = null;
			LuaTypes funcType1 = LuaDLL.lua_type(L, 1);

			if (funcType1 != LuaTypes.LUA_TFUNCTION)
			{
				 arg0 = (System.Func<DataTable.JJCRootRecord,bool>)ToLua.CheckObject(L, 1, typeof(System.Func<DataTable.JJCRootRecord,bool>));
			}
			else
			{
				LuaFunction func = ToLua.ToLuaFunction(L, 1);
				arg0 = DelegateFactory.CreateDelegate(typeof(System.Func<DataTable.JJCRootRecord,bool>), func) as System.Func<DataTable.JJCRootRecord,bool>;
			}

			DataTable.Table.ForeachJJCRoot(arg0);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetJJCRoot(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 1);
			DataTable.JJCRootRecord o = DataTable.Table.GetJJCRoot(arg0);
			ToLua.PushObject(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ForeachStatue(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			System.Func<DataTable.StatueRecord,bool> arg0 = null;
			LuaTypes funcType1 = LuaDLL.lua_type(L, 1);

			if (funcType1 != LuaTypes.LUA_TFUNCTION)
			{
				 arg0 = (System.Func<DataTable.StatueRecord,bool>)ToLua.CheckObject(L, 1, typeof(System.Func<DataTable.StatueRecord,bool>));
			}
			else
			{
				LuaFunction func = ToLua.ToLuaFunction(L, 1);
				arg0 = DelegateFactory.CreateDelegate(typeof(System.Func<DataTable.StatueRecord,bool>), func) as System.Func<DataTable.StatueRecord,bool>;
			}

			DataTable.Table.ForeachStatue(arg0);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetStatue(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 1);
			DataTable.StatueRecord o = DataTable.Table.GetStatue(arg0);
			ToLua.PushObject(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ForeachEquipAdditional1(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			System.Func<DataTable.EquipAdditional1Record,bool> arg0 = null;
			LuaTypes funcType1 = LuaDLL.lua_type(L, 1);

			if (funcType1 != LuaTypes.LUA_TFUNCTION)
			{
				 arg0 = (System.Func<DataTable.EquipAdditional1Record,bool>)ToLua.CheckObject(L, 1, typeof(System.Func<DataTable.EquipAdditional1Record,bool>));
			}
			else
			{
				LuaFunction func = ToLua.ToLuaFunction(L, 1);
				arg0 = DelegateFactory.CreateDelegate(typeof(System.Func<DataTable.EquipAdditional1Record,bool>), func) as System.Func<DataTable.EquipAdditional1Record,bool>;
			}

			DataTable.Table.ForeachEquipAdditional1(arg0);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetEquipAdditional1(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 1);
			DataTable.EquipAdditional1Record o = DataTable.Table.GetEquipAdditional1(arg0);
			ToLua.PushObject(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ForeachTriggerArea(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			System.Func<DataTable.TriggerAreaRecord,bool> arg0 = null;
			LuaTypes funcType1 = LuaDLL.lua_type(L, 1);

			if (funcType1 != LuaTypes.LUA_TFUNCTION)
			{
				 arg0 = (System.Func<DataTable.TriggerAreaRecord,bool>)ToLua.CheckObject(L, 1, typeof(System.Func<DataTable.TriggerAreaRecord,bool>));
			}
			else
			{
				LuaFunction func = ToLua.ToLuaFunction(L, 1);
				arg0 = DelegateFactory.CreateDelegate(typeof(System.Func<DataTable.TriggerAreaRecord,bool>), func) as System.Func<DataTable.TriggerAreaRecord,bool>;
			}

			DataTable.Table.ForeachTriggerArea(arg0);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetTriggerArea(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 1);
			DataTable.TriggerAreaRecord o = DataTable.Table.GetTriggerArea(arg0);
			ToLua.PushObject(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ForeachGuild(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			System.Func<DataTable.GuildRecord,bool> arg0 = null;
			LuaTypes funcType1 = LuaDLL.lua_type(L, 1);

			if (funcType1 != LuaTypes.LUA_TFUNCTION)
			{
				 arg0 = (System.Func<DataTable.GuildRecord,bool>)ToLua.CheckObject(L, 1, typeof(System.Func<DataTable.GuildRecord,bool>));
			}
			else
			{
				LuaFunction func = ToLua.ToLuaFunction(L, 1);
				arg0 = DelegateFactory.CreateDelegate(typeof(System.Func<DataTable.GuildRecord,bool>), func) as System.Func<DataTable.GuildRecord,bool>;
			}

			DataTable.Table.ForeachGuild(arg0);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetGuild(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 1);
			DataTable.GuildRecord o = DataTable.Table.GetGuild(arg0);
			ToLua.PushObject(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ForeachGuildBuff(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			System.Func<DataTable.GuildBuffRecord,bool> arg0 = null;
			LuaTypes funcType1 = LuaDLL.lua_type(L, 1);

			if (funcType1 != LuaTypes.LUA_TFUNCTION)
			{
				 arg0 = (System.Func<DataTable.GuildBuffRecord,bool>)ToLua.CheckObject(L, 1, typeof(System.Func<DataTable.GuildBuffRecord,bool>));
			}
			else
			{
				LuaFunction func = ToLua.ToLuaFunction(L, 1);
				arg0 = DelegateFactory.CreateDelegate(typeof(System.Func<DataTable.GuildBuffRecord,bool>), func) as System.Func<DataTable.GuildBuffRecord,bool>;
			}

			DataTable.Table.ForeachGuildBuff(arg0);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetGuildBuff(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 1);
			DataTable.GuildBuffRecord o = DataTable.Table.GetGuildBuff(arg0);
			ToLua.PushObject(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ForeachGuildBoss(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			System.Func<DataTable.GuildBossRecord,bool> arg0 = null;
			LuaTypes funcType1 = LuaDLL.lua_type(L, 1);

			if (funcType1 != LuaTypes.LUA_TFUNCTION)
			{
				 arg0 = (System.Func<DataTable.GuildBossRecord,bool>)ToLua.CheckObject(L, 1, typeof(System.Func<DataTable.GuildBossRecord,bool>));
			}
			else
			{
				LuaFunction func = ToLua.ToLuaFunction(L, 1);
				arg0 = DelegateFactory.CreateDelegate(typeof(System.Func<DataTable.GuildBossRecord,bool>), func) as System.Func<DataTable.GuildBossRecord,bool>;
			}

			DataTable.Table.ForeachGuildBoss(arg0);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetGuildBoss(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 1);
			DataTable.GuildBossRecord o = DataTable.Table.GetGuildBoss(arg0);
			ToLua.PushObject(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ForeachGuildAccess(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			System.Func<DataTable.GuildAccessRecord,bool> arg0 = null;
			LuaTypes funcType1 = LuaDLL.lua_type(L, 1);

			if (funcType1 != LuaTypes.LUA_TFUNCTION)
			{
				 arg0 = (System.Func<DataTable.GuildAccessRecord,bool>)ToLua.CheckObject(L, 1, typeof(System.Func<DataTable.GuildAccessRecord,bool>));
			}
			else
			{
				LuaFunction func = ToLua.ToLuaFunction(L, 1);
				arg0 = DelegateFactory.CreateDelegate(typeof(System.Func<DataTable.GuildAccessRecord,bool>), func) as System.Func<DataTable.GuildAccessRecord,bool>;
			}

			DataTable.Table.ForeachGuildAccess(arg0);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetGuildAccess(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 1);
			DataTable.GuildAccessRecord o = DataTable.Table.GetGuildAccess(arg0);
			ToLua.PushObject(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ForeachExpInfo(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			System.Func<DataTable.ExpInfoRecord,bool> arg0 = null;
			LuaTypes funcType1 = LuaDLL.lua_type(L, 1);

			if (funcType1 != LuaTypes.LUA_TFUNCTION)
			{
				 arg0 = (System.Func<DataTable.ExpInfoRecord,bool>)ToLua.CheckObject(L, 1, typeof(System.Func<DataTable.ExpInfoRecord,bool>));
			}
			else
			{
				LuaFunction func = ToLua.ToLuaFunction(L, 1);
				arg0 = DelegateFactory.CreateDelegate(typeof(System.Func<DataTable.ExpInfoRecord,bool>), func) as System.Func<DataTable.ExpInfoRecord,bool>;
			}

			DataTable.Table.ForeachExpInfo(arg0);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetExpInfo(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 1);
			DataTable.ExpInfoRecord o = DataTable.Table.GetExpInfo(arg0);
			ToLua.PushObject(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ForeachGroupShop(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			System.Func<DataTable.GroupShopRecord,bool> arg0 = null;
			LuaTypes funcType1 = LuaDLL.lua_type(L, 1);

			if (funcType1 != LuaTypes.LUA_TFUNCTION)
			{
				 arg0 = (System.Func<DataTable.GroupShopRecord,bool>)ToLua.CheckObject(L, 1, typeof(System.Func<DataTable.GroupShopRecord,bool>));
			}
			else
			{
				LuaFunction func = ToLua.ToLuaFunction(L, 1);
				arg0 = DelegateFactory.CreateDelegate(typeof(System.Func<DataTable.GroupShopRecord,bool>), func) as System.Func<DataTable.GroupShopRecord,bool>;
			}

			DataTable.Table.ForeachGroupShop(arg0);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetGroupShop(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 1);
			DataTable.GroupShopRecord o = DataTable.Table.GetGroupShop(arg0);
			ToLua.PushObject(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ForeachPKMode(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			System.Func<DataTable.PKModeRecord,bool> arg0 = null;
			LuaTypes funcType1 = LuaDLL.lua_type(L, 1);

			if (funcType1 != LuaTypes.LUA_TFUNCTION)
			{
				 arg0 = (System.Func<DataTable.PKModeRecord,bool>)ToLua.CheckObject(L, 1, typeof(System.Func<DataTable.PKModeRecord,bool>));
			}
			else
			{
				LuaFunction func = ToLua.ToLuaFunction(L, 1);
				arg0 = DelegateFactory.CreateDelegate(typeof(System.Func<DataTable.PKModeRecord,bool>), func) as System.Func<DataTable.PKModeRecord,bool>;
			}

			DataTable.Table.ForeachPKMode(arg0);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetPKMode(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 1);
			DataTable.PKModeRecord o = DataTable.Table.GetPKMode(arg0);
			ToLua.PushObject(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Foreachforged(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			System.Func<DataTable.forgedRecord,bool> arg0 = null;
			LuaTypes funcType1 = LuaDLL.lua_type(L, 1);

			if (funcType1 != LuaTypes.LUA_TFUNCTION)
			{
				 arg0 = (System.Func<DataTable.forgedRecord,bool>)ToLua.CheckObject(L, 1, typeof(System.Func<DataTable.forgedRecord,bool>));
			}
			else
			{
				LuaFunction func = ToLua.ToLuaFunction(L, 1);
				arg0 = DelegateFactory.CreateDelegate(typeof(System.Func<DataTable.forgedRecord,bool>), func) as System.Func<DataTable.forgedRecord,bool>;
			}

			DataTable.Table.Foreachforged(arg0);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Getforged(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 1);
			DataTable.forgedRecord o = DataTable.Table.Getforged(arg0);
			ToLua.PushObject(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ForeachEquipUpdate(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			System.Func<DataTable.EquipUpdateRecord,bool> arg0 = null;
			LuaTypes funcType1 = LuaDLL.lua_type(L, 1);

			if (funcType1 != LuaTypes.LUA_TFUNCTION)
			{
				 arg0 = (System.Func<DataTable.EquipUpdateRecord,bool>)ToLua.CheckObject(L, 1, typeof(System.Func<DataTable.EquipUpdateRecord,bool>));
			}
			else
			{
				LuaFunction func = ToLua.ToLuaFunction(L, 1);
				arg0 = DelegateFactory.CreateDelegate(typeof(System.Func<DataTable.EquipUpdateRecord,bool>), func) as System.Func<DataTable.EquipUpdateRecord,bool>;
			}

			DataTable.Table.ForeachEquipUpdate(arg0);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetEquipUpdate(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 1);
			DataTable.EquipUpdateRecord o = DataTable.Table.GetEquipUpdate(arg0);
			ToLua.PushObject(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ForeachGuildMission(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			System.Func<DataTable.GuildMissionRecord,bool> arg0 = null;
			LuaTypes funcType1 = LuaDLL.lua_type(L, 1);

			if (funcType1 != LuaTypes.LUA_TFUNCTION)
			{
				 arg0 = (System.Func<DataTable.GuildMissionRecord,bool>)ToLua.CheckObject(L, 1, typeof(System.Func<DataTable.GuildMissionRecord,bool>));
			}
			else
			{
				LuaFunction func = ToLua.ToLuaFunction(L, 1);
				arg0 = DelegateFactory.CreateDelegate(typeof(System.Func<DataTable.GuildMissionRecord,bool>), func) as System.Func<DataTable.GuildMissionRecord,bool>;
			}

			DataTable.Table.ForeachGuildMission(arg0);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetGuildMission(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 1);
			DataTable.GuildMissionRecord o = DataTable.Table.GetGuildMission(arg0);
			ToLua.PushObject(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ForeachOrderForm(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			System.Func<DataTable.OrderFormRecord,bool> arg0 = null;
			LuaTypes funcType1 = LuaDLL.lua_type(L, 1);

			if (funcType1 != LuaTypes.LUA_TFUNCTION)
			{
				 arg0 = (System.Func<DataTable.OrderFormRecord,bool>)ToLua.CheckObject(L, 1, typeof(System.Func<DataTable.OrderFormRecord,bool>));
			}
			else
			{
				LuaFunction func = ToLua.ToLuaFunction(L, 1);
				arg0 = DelegateFactory.CreateDelegate(typeof(System.Func<DataTable.OrderFormRecord,bool>), func) as System.Func<DataTable.OrderFormRecord,bool>;
			}

			DataTable.Table.ForeachOrderForm(arg0);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetOrderForm(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 1);
			DataTable.OrderFormRecord o = DataTable.Table.GetOrderForm(arg0);
			ToLua.PushObject(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ForeachOrderUpdate(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			System.Func<DataTable.OrderUpdateRecord,bool> arg0 = null;
			LuaTypes funcType1 = LuaDLL.lua_type(L, 1);

			if (funcType1 != LuaTypes.LUA_TFUNCTION)
			{
				 arg0 = (System.Func<DataTable.OrderUpdateRecord,bool>)ToLua.CheckObject(L, 1, typeof(System.Func<DataTable.OrderUpdateRecord,bool>));
			}
			else
			{
				LuaFunction func = ToLua.ToLuaFunction(L, 1);
				arg0 = DelegateFactory.CreateDelegate(typeof(System.Func<DataTable.OrderUpdateRecord,bool>), func) as System.Func<DataTable.OrderUpdateRecord,bool>;
			}

			DataTable.Table.ForeachOrderUpdate(arg0);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetOrderUpdate(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 1);
			DataTable.OrderUpdateRecord o = DataTable.Table.GetOrderUpdate(arg0);
			ToLua.PushObject(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ForeachTrade(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			System.Func<DataTable.TradeRecord,bool> arg0 = null;
			LuaTypes funcType1 = LuaDLL.lua_type(L, 1);

			if (funcType1 != LuaTypes.LUA_TFUNCTION)
			{
				 arg0 = (System.Func<DataTable.TradeRecord,bool>)ToLua.CheckObject(L, 1, typeof(System.Func<DataTable.TradeRecord,bool>));
			}
			else
			{
				LuaFunction func = ToLua.ToLuaFunction(L, 1);
				arg0 = DelegateFactory.CreateDelegate(typeof(System.Func<DataTable.TradeRecord,bool>), func) as System.Func<DataTable.TradeRecord,bool>;
			}

			DataTable.Table.ForeachTrade(arg0);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetTrade(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 1);
			DataTable.TradeRecord o = DataTable.Table.GetTrade(arg0);
			ToLua.PushObject(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ForeachGem(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			System.Func<DataTable.GemRecord,bool> arg0 = null;
			LuaTypes funcType1 = LuaDLL.lua_type(L, 1);

			if (funcType1 != LuaTypes.LUA_TFUNCTION)
			{
				 arg0 = (System.Func<DataTable.GemRecord,bool>)ToLua.CheckObject(L, 1, typeof(System.Func<DataTable.GemRecord,bool>));
			}
			else
			{
				LuaFunction func = ToLua.ToLuaFunction(L, 1);
				arg0 = DelegateFactory.CreateDelegate(typeof(System.Func<DataTable.GemRecord,bool>), func) as System.Func<DataTable.GemRecord,bool>;
			}

			DataTable.Table.ForeachGem(arg0);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetGem(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 1);
			DataTable.GemRecord o = DataTable.Table.GetGem(arg0);
			ToLua.PushObject(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ForeachGemGroup(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			System.Func<DataTable.GemGroupRecord,bool> arg0 = null;
			LuaTypes funcType1 = LuaDLL.lua_type(L, 1);

			if (funcType1 != LuaTypes.LUA_TFUNCTION)
			{
				 arg0 = (System.Func<DataTable.GemGroupRecord,bool>)ToLua.CheckObject(L, 1, typeof(System.Func<DataTable.GemGroupRecord,bool>));
			}
			else
			{
				LuaFunction func = ToLua.ToLuaFunction(L, 1);
				arg0 = DelegateFactory.CreateDelegate(typeof(System.Func<DataTable.GemGroupRecord,bool>), func) as System.Func<DataTable.GemGroupRecord,bool>;
			}

			DataTable.Table.ForeachGemGroup(arg0);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetGemGroup(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 1);
			DataTable.GemGroupRecord o = DataTable.Table.GetGemGroup(arg0);
			ToLua.PushObject(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ForeachSensitiveWord(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			System.Func<DataTable.SensitiveWordRecord,bool> arg0 = null;
			LuaTypes funcType1 = LuaDLL.lua_type(L, 1);

			if (funcType1 != LuaTypes.LUA_TFUNCTION)
			{
				 arg0 = (System.Func<DataTable.SensitiveWordRecord,bool>)ToLua.CheckObject(L, 1, typeof(System.Func<DataTable.SensitiveWordRecord,bool>));
			}
			else
			{
				LuaFunction func = ToLua.ToLuaFunction(L, 1);
				arg0 = DelegateFactory.CreateDelegate(typeof(System.Func<DataTable.SensitiveWordRecord,bool>), func) as System.Func<DataTable.SensitiveWordRecord,bool>;
			}

			DataTable.Table.ForeachSensitiveWord(arg0);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetSensitiveWord(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 1);
			DataTable.SensitiveWordRecord o = DataTable.Table.GetSensitiveWord(arg0);
			ToLua.PushObject(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ForeachGuidance(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			System.Func<DataTable.GuidanceRecord,bool> arg0 = null;
			LuaTypes funcType1 = LuaDLL.lua_type(L, 1);

			if (funcType1 != LuaTypes.LUA_TFUNCTION)
			{
				 arg0 = (System.Func<DataTable.GuidanceRecord,bool>)ToLua.CheckObject(L, 1, typeof(System.Func<DataTable.GuidanceRecord,bool>));
			}
			else
			{
				LuaFunction func = ToLua.ToLuaFunction(L, 1);
				arg0 = DelegateFactory.CreateDelegate(typeof(System.Func<DataTable.GuidanceRecord,bool>), func) as System.Func<DataTable.GuidanceRecord,bool>;
			}

			DataTable.Table.ForeachGuidance(arg0);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetGuidance(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 1);
			DataTable.GuidanceRecord o = DataTable.Table.GetGuidance(arg0);
			ToLua.PushObject(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ForeachMapTransfer(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			System.Func<DataTable.MapTransferRecord,bool> arg0 = null;
			LuaTypes funcType1 = LuaDLL.lua_type(L, 1);

			if (funcType1 != LuaTypes.LUA_TFUNCTION)
			{
				 arg0 = (System.Func<DataTable.MapTransferRecord,bool>)ToLua.CheckObject(L, 1, typeof(System.Func<DataTable.MapTransferRecord,bool>));
			}
			else
			{
				LuaFunction func = ToLua.ToLuaFunction(L, 1);
				arg0 = DelegateFactory.CreateDelegate(typeof(System.Func<DataTable.MapTransferRecord,bool>), func) as System.Func<DataTable.MapTransferRecord,bool>;
			}

			DataTable.Table.ForeachMapTransfer(arg0);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetMapTransfer(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 1);
			DataTable.MapTransferRecord o = DataTable.Table.GetMapTransfer(arg0);
			ToLua.PushObject(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ForeachSceneEffect(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			System.Func<DataTable.SceneEffectRecord,bool> arg0 = null;
			LuaTypes funcType1 = LuaDLL.lua_type(L, 1);

			if (funcType1 != LuaTypes.LUA_TFUNCTION)
			{
				 arg0 = (System.Func<DataTable.SceneEffectRecord,bool>)ToLua.CheckObject(L, 1, typeof(System.Func<DataTable.SceneEffectRecord,bool>));
			}
			else
			{
				LuaFunction func = ToLua.ToLuaFunction(L, 1);
				arg0 = DelegateFactory.CreateDelegate(typeof(System.Func<DataTable.SceneEffectRecord,bool>), func) as System.Func<DataTable.SceneEffectRecord,bool>;
			}

			DataTable.Table.ForeachSceneEffect(arg0);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetSceneEffect(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 1);
			DataTable.SceneEffectRecord o = DataTable.Table.GetSceneEffect(arg0);
			ToLua.PushObject(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ForeachPVPBattle(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			System.Func<DataTable.PVPBattleRecord,bool> arg0 = null;
			LuaTypes funcType1 = LuaDLL.lua_type(L, 1);

			if (funcType1 != LuaTypes.LUA_TFUNCTION)
			{
				 arg0 = (System.Func<DataTable.PVPBattleRecord,bool>)ToLua.CheckObject(L, 1, typeof(System.Func<DataTable.PVPBattleRecord,bool>));
			}
			else
			{
				LuaFunction func = ToLua.ToLuaFunction(L, 1);
				arg0 = DelegateFactory.CreateDelegate(typeof(System.Func<DataTable.PVPBattleRecord,bool>), func) as System.Func<DataTable.PVPBattleRecord,bool>;
			}

			DataTable.Table.ForeachPVPBattle(arg0);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetPVPBattle(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 1);
			DataTable.PVPBattleRecord o = DataTable.Table.GetPVPBattle(arg0);
			ToLua.PushObject(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ForeachStepByStep(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			System.Func<DataTable.StepByStepRecord,bool> arg0 = null;
			LuaTypes funcType1 = LuaDLL.lua_type(L, 1);

			if (funcType1 != LuaTypes.LUA_TFUNCTION)
			{
				 arg0 = (System.Func<DataTable.StepByStepRecord,bool>)ToLua.CheckObject(L, 1, typeof(System.Func<DataTable.StepByStepRecord,bool>));
			}
			else
			{
				LuaFunction func = ToLua.ToLuaFunction(L, 1);
				arg0 = DelegateFactory.CreateDelegate(typeof(System.Func<DataTable.StepByStepRecord,bool>), func) as System.Func<DataTable.StepByStepRecord,bool>;
			}

			DataTable.Table.ForeachStepByStep(arg0);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetStepByStep(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 1);
			DataTable.StepByStepRecord o = DataTable.Table.GetStepByStep(arg0);
			ToLua.PushObject(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ForeachWorldBOSS(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			System.Func<DataTable.WorldBOSSRecord,bool> arg0 = null;
			LuaTypes funcType1 = LuaDLL.lua_type(L, 1);

			if (funcType1 != LuaTypes.LUA_TFUNCTION)
			{
				 arg0 = (System.Func<DataTable.WorldBOSSRecord,bool>)ToLua.CheckObject(L, 1, typeof(System.Func<DataTable.WorldBOSSRecord,bool>));
			}
			else
			{
				LuaFunction func = ToLua.ToLuaFunction(L, 1);
				arg0 = DelegateFactory.CreateDelegate(typeof(System.Func<DataTable.WorldBOSSRecord,bool>), func) as System.Func<DataTable.WorldBOSSRecord,bool>;
			}

			DataTable.Table.ForeachWorldBOSS(arg0);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetWorldBOSS(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 1);
			DataTable.WorldBOSSRecord o = DataTable.Table.GetWorldBOSS(arg0);
			ToLua.PushObject(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ForeachPKValue(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			System.Func<DataTable.PKValueRecord,bool> arg0 = null;
			LuaTypes funcType1 = LuaDLL.lua_type(L, 1);

			if (funcType1 != LuaTypes.LUA_TFUNCTION)
			{
				 arg0 = (System.Func<DataTable.PKValueRecord,bool>)ToLua.CheckObject(L, 1, typeof(System.Func<DataTable.PKValueRecord,bool>));
			}
			else
			{
				LuaFunction func = ToLua.ToLuaFunction(L, 1);
				arg0 = DelegateFactory.CreateDelegate(typeof(System.Func<DataTable.PKValueRecord,bool>), func) as System.Func<DataTable.PKValueRecord,bool>;
			}

			DataTable.Table.ForeachPKValue(arg0);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetPKValue(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 1);
			DataTable.PKValueRecord o = DataTable.Table.GetPKValue(arg0);
			ToLua.PushObject(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ForeachTransmigration(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			System.Func<DataTable.TransmigrationRecord,bool> arg0 = null;
			LuaTypes funcType1 = LuaDLL.lua_type(L, 1);

			if (funcType1 != LuaTypes.LUA_TFUNCTION)
			{
				 arg0 = (System.Func<DataTable.TransmigrationRecord,bool>)ToLua.CheckObject(L, 1, typeof(System.Func<DataTable.TransmigrationRecord,bool>));
			}
			else
			{
				LuaFunction func = ToLua.ToLuaFunction(L, 1);
				arg0 = DelegateFactory.CreateDelegate(typeof(System.Func<DataTable.TransmigrationRecord,bool>), func) as System.Func<DataTable.TransmigrationRecord,bool>;
			}

			DataTable.Table.ForeachTransmigration(arg0);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetTransmigration(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 1);
			DataTable.TransmigrationRecord o = DataTable.Table.GetTransmigration(arg0);
			ToLua.PushObject(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ForeachAttachPoint(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			System.Func<DataTable.AttachPointRecord,bool> arg0 = null;
			LuaTypes funcType1 = LuaDLL.lua_type(L, 1);

			if (funcType1 != LuaTypes.LUA_TFUNCTION)
			{
				 arg0 = (System.Func<DataTable.AttachPointRecord,bool>)ToLua.CheckObject(L, 1, typeof(System.Func<DataTable.AttachPointRecord,bool>));
			}
			else
			{
				LuaFunction func = ToLua.ToLuaFunction(L, 1);
				arg0 = DelegateFactory.CreateDelegate(typeof(System.Func<DataTable.AttachPointRecord,bool>), func) as System.Func<DataTable.AttachPointRecord,bool>;
			}

			DataTable.Table.ForeachAttachPoint(arg0);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetAttachPoint(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 1);
			DataTable.AttachPointRecord o = DataTable.Table.GetAttachPoint(arg0);
			ToLua.PushObject(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ForeachFubenInfo(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			System.Func<DataTable.FubenInfoRecord,bool> arg0 = null;
			LuaTypes funcType1 = LuaDLL.lua_type(L, 1);

			if (funcType1 != LuaTypes.LUA_TFUNCTION)
			{
				 arg0 = (System.Func<DataTable.FubenInfoRecord,bool>)ToLua.CheckObject(L, 1, typeof(System.Func<DataTable.FubenInfoRecord,bool>));
			}
			else
			{
				LuaFunction func = ToLua.ToLuaFunction(L, 1);
				arg0 = DelegateFactory.CreateDelegate(typeof(System.Func<DataTable.FubenInfoRecord,bool>), func) as System.Func<DataTable.FubenInfoRecord,bool>;
			}

			DataTable.Table.ForeachFubenInfo(arg0);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetFubenInfo(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 1);
			DataTable.FubenInfoRecord o = DataTable.Table.GetFubenInfo(arg0);
			ToLua.PushObject(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ForeachFubenLogic(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			System.Func<DataTable.FubenLogicRecord,bool> arg0 = null;
			LuaTypes funcType1 = LuaDLL.lua_type(L, 1);

			if (funcType1 != LuaTypes.LUA_TFUNCTION)
			{
				 arg0 = (System.Func<DataTable.FubenLogicRecord,bool>)ToLua.CheckObject(L, 1, typeof(System.Func<DataTable.FubenLogicRecord,bool>));
			}
			else
			{
				LuaFunction func = ToLua.ToLuaFunction(L, 1);
				arg0 = DelegateFactory.CreateDelegate(typeof(System.Func<DataTable.FubenLogicRecord,bool>), func) as System.Func<DataTable.FubenLogicRecord,bool>;
			}

			DataTable.Table.ForeachFubenLogic(arg0);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetFubenLogic(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 1);
			DataTable.FubenLogicRecord o = DataTable.Table.GetFubenLogic(arg0);
			ToLua.PushObject(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ForeachFace(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			System.Func<DataTable.FaceRecord,bool> arg0 = null;
			LuaTypes funcType1 = LuaDLL.lua_type(L, 1);

			if (funcType1 != LuaTypes.LUA_TFUNCTION)
			{
				 arg0 = (System.Func<DataTable.FaceRecord,bool>)ToLua.CheckObject(L, 1, typeof(System.Func<DataTable.FaceRecord,bool>));
			}
			else
			{
				LuaFunction func = ToLua.ToLuaFunction(L, 1);
				arg0 = DelegateFactory.CreateDelegate(typeof(System.Func<DataTable.FaceRecord,bool>), func) as System.Func<DataTable.FaceRecord,bool>;
			}

			DataTable.Table.ForeachFace(arg0);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetFace(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 1);
			DataTable.FaceRecord o = DataTable.Table.GetFace(arg0);
			ToLua.PushObject(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ForeachServerName(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			System.Func<DataTable.ServerNameRecord,bool> arg0 = null;
			LuaTypes funcType1 = LuaDLL.lua_type(L, 1);

			if (funcType1 != LuaTypes.LUA_TFUNCTION)
			{
				 arg0 = (System.Func<DataTable.ServerNameRecord,bool>)ToLua.CheckObject(L, 1, typeof(System.Func<DataTable.ServerNameRecord,bool>));
			}
			else
			{
				LuaFunction func = ToLua.ToLuaFunction(L, 1);
				arg0 = DelegateFactory.CreateDelegate(typeof(System.Func<DataTable.ServerNameRecord,bool>), func) as System.Func<DataTable.ServerNameRecord,bool>;
			}

			DataTable.Table.ForeachServerName(arg0);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetServerName(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 1);
			DataTable.ServerNameRecord o = DataTable.Table.GetServerName(arg0);
			ToLua.PushObject(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ForeachLoadingTest(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			System.Func<DataTable.LoadingTestRecord,bool> arg0 = null;
			LuaTypes funcType1 = LuaDLL.lua_type(L, 1);

			if (funcType1 != LuaTypes.LUA_TFUNCTION)
			{
				 arg0 = (System.Func<DataTable.LoadingTestRecord,bool>)ToLua.CheckObject(L, 1, typeof(System.Func<DataTable.LoadingTestRecord,bool>));
			}
			else
			{
				LuaFunction func = ToLua.ToLuaFunction(L, 1);
				arg0 = DelegateFactory.CreateDelegate(typeof(System.Func<DataTable.LoadingTestRecord,bool>), func) as System.Func<DataTable.LoadingTestRecord,bool>;
			}

			DataTable.Table.ForeachLoadingTest(arg0);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetLoadingTest(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 1);
			DataTable.LoadingTestRecord o = DataTable.Table.GetLoadingTest(arg0);
			ToLua.PushObject(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ForeachGetMissionInfo(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			System.Func<DataTable.GetMissionInfoRecord,bool> arg0 = null;
			LuaTypes funcType1 = LuaDLL.lua_type(L, 1);

			if (funcType1 != LuaTypes.LUA_TFUNCTION)
			{
				 arg0 = (System.Func<DataTable.GetMissionInfoRecord,bool>)ToLua.CheckObject(L, 1, typeof(System.Func<DataTable.GetMissionInfoRecord,bool>));
			}
			else
			{
				LuaFunction func = ToLua.ToLuaFunction(L, 1);
				arg0 = DelegateFactory.CreateDelegate(typeof(System.Func<DataTable.GetMissionInfoRecord,bool>), func) as System.Func<DataTable.GetMissionInfoRecord,bool>;
			}

			DataTable.Table.ForeachGetMissionInfo(arg0);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetGetMissionInfo(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 1);
			DataTable.GetMissionInfoRecord o = DataTable.Table.GetGetMissionInfo(arg0);
			ToLua.PushObject(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ForeachMissionConditionInfo(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			System.Func<DataTable.MissionConditionInfoRecord,bool> arg0 = null;
			LuaTypes funcType1 = LuaDLL.lua_type(L, 1);

			if (funcType1 != LuaTypes.LUA_TFUNCTION)
			{
				 arg0 = (System.Func<DataTable.MissionConditionInfoRecord,bool>)ToLua.CheckObject(L, 1, typeof(System.Func<DataTable.MissionConditionInfoRecord,bool>));
			}
			else
			{
				LuaFunction func = ToLua.ToLuaFunction(L, 1);
				arg0 = DelegateFactory.CreateDelegate(typeof(System.Func<DataTable.MissionConditionInfoRecord,bool>), func) as System.Func<DataTable.MissionConditionInfoRecord,bool>;
			}

			DataTable.Table.ForeachMissionConditionInfo(arg0);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetMissionConditionInfo(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 1);
			DataTable.MissionConditionInfoRecord o = DataTable.Table.GetMissionConditionInfo(arg0);
			ToLua.PushObject(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ForeachGetMissionReward(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			System.Func<DataTable.GetMissionRewardRecord,bool> arg0 = null;
			LuaTypes funcType1 = LuaDLL.lua_type(L, 1);

			if (funcType1 != LuaTypes.LUA_TFUNCTION)
			{
				 arg0 = (System.Func<DataTable.GetMissionRewardRecord,bool>)ToLua.CheckObject(L, 1, typeof(System.Func<DataTable.GetMissionRewardRecord,bool>));
			}
			else
			{
				LuaFunction func = ToLua.ToLuaFunction(L, 1);
				arg0 = DelegateFactory.CreateDelegate(typeof(System.Func<DataTable.GetMissionRewardRecord,bool>), func) as System.Func<DataTable.GetMissionRewardRecord,bool>;
			}

			DataTable.Table.ForeachGetMissionReward(arg0);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetGetMissionReward(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 1);
			DataTable.GetMissionRewardRecord o = DataTable.Table.GetGetMissionReward(arg0);
			ToLua.PushObject(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ForeachGetMissionIcon(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			System.Func<DataTable.GetMissionIconRecord,bool> arg0 = null;
			LuaTypes funcType1 = LuaDLL.lua_type(L, 1);

			if (funcType1 != LuaTypes.LUA_TFUNCTION)
			{
				 arg0 = (System.Func<DataTable.GetMissionIconRecord,bool>)ToLua.CheckObject(L, 1, typeof(System.Func<DataTable.GetMissionIconRecord,bool>));
			}
			else
			{
				LuaFunction func = ToLua.ToLuaFunction(L, 1);
				arg0 = DelegateFactory.CreateDelegate(typeof(System.Func<DataTable.GetMissionIconRecord,bool>), func) as System.Func<DataTable.GetMissionIconRecord,bool>;
			}

			DataTable.Table.ForeachGetMissionIcon(arg0);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetGetMissionIcon(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 1);
			DataTable.GetMissionIconRecord o = DataTable.Table.GetGetMissionIcon(arg0);
			ToLua.PushObject(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ForeachSubject(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			System.Func<DataTable.SubjectRecord,bool> arg0 = null;
			LuaTypes funcType1 = LuaDLL.lua_type(L, 1);

			if (funcType1 != LuaTypes.LUA_TFUNCTION)
			{
				 arg0 = (System.Func<DataTable.SubjectRecord,bool>)ToLua.CheckObject(L, 1, typeof(System.Func<DataTable.SubjectRecord,bool>));
			}
			else
			{
				LuaFunction func = ToLua.ToLuaFunction(L, 1);
				arg0 = DelegateFactory.CreateDelegate(typeof(System.Func<DataTable.SubjectRecord,bool>), func) as System.Func<DataTable.SubjectRecord,bool>;
			}

			DataTable.Table.ForeachSubject(arg0);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetSubject(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 1);
			DataTable.SubjectRecord o = DataTable.Table.GetSubject(arg0);
			ToLua.PushObject(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ForeachItemGetInfo(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			System.Func<DataTable.ItemGetInfoRecord,bool> arg0 = null;
			LuaTypes funcType1 = LuaDLL.lua_type(L, 1);

			if (funcType1 != LuaTypes.LUA_TFUNCTION)
			{
				 arg0 = (System.Func<DataTable.ItemGetInfoRecord,bool>)ToLua.CheckObject(L, 1, typeof(System.Func<DataTable.ItemGetInfoRecord,bool>));
			}
			else
			{
				LuaFunction func = ToLua.ToLuaFunction(L, 1);
				arg0 = DelegateFactory.CreateDelegate(typeof(System.Func<DataTable.ItemGetInfoRecord,bool>), func) as System.Func<DataTable.ItemGetInfoRecord,bool>;
			}

			DataTable.Table.ForeachItemGetInfo(arg0);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetItemGetInfo(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 1);
			DataTable.ItemGetInfoRecord o = DataTable.Table.GetItemGetInfo(arg0);
			ToLua.PushObject(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ForeachDynamicActivity(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			System.Func<DataTable.DynamicActivityRecord,bool> arg0 = null;
			LuaTypes funcType1 = LuaDLL.lua_type(L, 1);

			if (funcType1 != LuaTypes.LUA_TFUNCTION)
			{
				 arg0 = (System.Func<DataTable.DynamicActivityRecord,bool>)ToLua.CheckObject(L, 1, typeof(System.Func<DataTable.DynamicActivityRecord,bool>));
			}
			else
			{
				LuaFunction func = ToLua.ToLuaFunction(L, 1);
				arg0 = DelegateFactory.CreateDelegate(typeof(System.Func<DataTable.DynamicActivityRecord,bool>), func) as System.Func<DataTable.DynamicActivityRecord,bool>;
			}

			DataTable.Table.ForeachDynamicActivity(arg0);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetDynamicActivity(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 1);
			DataTable.DynamicActivityRecord o = DataTable.Table.GetDynamicActivity(arg0);
			ToLua.PushObject(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ForeachCompensation(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			System.Func<DataTable.CompensationRecord,bool> arg0 = null;
			LuaTypes funcType1 = LuaDLL.lua_type(L, 1);

			if (funcType1 != LuaTypes.LUA_TFUNCTION)
			{
				 arg0 = (System.Func<DataTable.CompensationRecord,bool>)ToLua.CheckObject(L, 1, typeof(System.Func<DataTable.CompensationRecord,bool>));
			}
			else
			{
				LuaFunction func = ToLua.ToLuaFunction(L, 1);
				arg0 = DelegateFactory.CreateDelegate(typeof(System.Func<DataTable.CompensationRecord,bool>), func) as System.Func<DataTable.CompensationRecord,bool>;
			}

			DataTable.Table.ForeachCompensation(arg0);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetCompensation(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 1);
			DataTable.CompensationRecord o = DataTable.Table.GetCompensation(arg0);
			ToLua.PushObject(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ForeachCityTalk(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			System.Func<DataTable.CityTalkRecord,bool> arg0 = null;
			LuaTypes funcType1 = LuaDLL.lua_type(L, 1);

			if (funcType1 != LuaTypes.LUA_TFUNCTION)
			{
				 arg0 = (System.Func<DataTable.CityTalkRecord,bool>)ToLua.CheckObject(L, 1, typeof(System.Func<DataTable.CityTalkRecord,bool>));
			}
			else
			{
				LuaFunction func = ToLua.ToLuaFunction(L, 1);
				arg0 = DelegateFactory.CreateDelegate(typeof(System.Func<DataTable.CityTalkRecord,bool>), func) as System.Func<DataTable.CityTalkRecord,bool>;
			}

			DataTable.Table.ForeachCityTalk(arg0);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetCityTalk(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 1);
			DataTable.CityTalkRecord o = DataTable.Table.GetCityTalk(arg0);
			ToLua.PushObject(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ForeachDailyActivity(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			System.Func<DataTable.DailyActivityRecord,bool> arg0 = null;
			LuaTypes funcType1 = LuaDLL.lua_type(L, 1);

			if (funcType1 != LuaTypes.LUA_TFUNCTION)
			{
				 arg0 = (System.Func<DataTable.DailyActivityRecord,bool>)ToLua.CheckObject(L, 1, typeof(System.Func<DataTable.DailyActivityRecord,bool>));
			}
			else
			{
				LuaFunction func = ToLua.ToLuaFunction(L, 1);
				arg0 = DelegateFactory.CreateDelegate(typeof(System.Func<DataTable.DailyActivityRecord,bool>), func) as System.Func<DataTable.DailyActivityRecord,bool>;
			}

			DataTable.Table.ForeachDailyActivity(arg0);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetDailyActivity(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 1);
			DataTable.DailyActivityRecord o = DataTable.Table.GetDailyActivity(arg0);
			ToLua.PushObject(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ForeachRecharge(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			System.Func<DataTable.RechargeRecord,bool> arg0 = null;
			LuaTypes funcType1 = LuaDLL.lua_type(L, 1);

			if (funcType1 != LuaTypes.LUA_TFUNCTION)
			{
				 arg0 = (System.Func<DataTable.RechargeRecord,bool>)ToLua.CheckObject(L, 1, typeof(System.Func<DataTable.RechargeRecord,bool>));
			}
			else
			{
				LuaFunction func = ToLua.ToLuaFunction(L, 1);
				arg0 = DelegateFactory.CreateDelegate(typeof(System.Func<DataTable.RechargeRecord,bool>), func) as System.Func<DataTable.RechargeRecord,bool>;
			}

			DataTable.Table.ForeachRecharge(arg0);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetRecharge(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 1);
			DataTable.RechargeRecord o = DataTable.Table.GetRecharge(arg0);
			ToLua.PushObject(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ForeachRewardInfo(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			System.Func<DataTable.RewardInfoRecord,bool> arg0 = null;
			LuaTypes funcType1 = LuaDLL.lua_type(L, 1);

			if (funcType1 != LuaTypes.LUA_TFUNCTION)
			{
				 arg0 = (System.Func<DataTable.RewardInfoRecord,bool>)ToLua.CheckObject(L, 1, typeof(System.Func<DataTable.RewardInfoRecord,bool>));
			}
			else
			{
				LuaFunction func = ToLua.ToLuaFunction(L, 1);
				arg0 = DelegateFactory.CreateDelegate(typeof(System.Func<DataTable.RewardInfoRecord,bool>), func) as System.Func<DataTable.RewardInfoRecord,bool>;
			}

			DataTable.Table.ForeachRewardInfo(arg0);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetRewardInfo(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 1);
			DataTable.RewardInfoRecord o = DataTable.Table.GetRewardInfo(arg0);
			ToLua.PushObject(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ForeachNameTitle(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			System.Func<DataTable.NameTitleRecord,bool> arg0 = null;
			LuaTypes funcType1 = LuaDLL.lua_type(L, 1);

			if (funcType1 != LuaTypes.LUA_TFUNCTION)
			{
				 arg0 = (System.Func<DataTable.NameTitleRecord,bool>)ToLua.CheckObject(L, 1, typeof(System.Func<DataTable.NameTitleRecord,bool>));
			}
			else
			{
				LuaFunction func = ToLua.ToLuaFunction(L, 1);
				arg0 = DelegateFactory.CreateDelegate(typeof(System.Func<DataTable.NameTitleRecord,bool>), func) as System.Func<DataTable.NameTitleRecord,bool>;
			}

			DataTable.Table.ForeachNameTitle(arg0);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetNameTitle(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 1);
			DataTable.NameTitleRecord o = DataTable.Table.GetNameTitle(arg0);
			ToLua.PushObject(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ForeachVIP(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			System.Func<DataTable.VIPRecord,bool> arg0 = null;
			LuaTypes funcType1 = LuaDLL.lua_type(L, 1);

			if (funcType1 != LuaTypes.LUA_TFUNCTION)
			{
				 arg0 = (System.Func<DataTable.VIPRecord,bool>)ToLua.CheckObject(L, 1, typeof(System.Func<DataTable.VIPRecord,bool>));
			}
			else
			{
				LuaFunction func = ToLua.ToLuaFunction(L, 1);
				arg0 = DelegateFactory.CreateDelegate(typeof(System.Func<DataTable.VIPRecord,bool>), func) as System.Func<DataTable.VIPRecord,bool>;
			}

			DataTable.Table.ForeachVIP(arg0);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetVIP(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 1);
			DataTable.VIPRecord o = DataTable.Table.GetVIP(arg0);
			ToLua.PushObject(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ForeachLevelupTips(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			System.Func<DataTable.LevelupTipsRecord,bool> arg0 = null;
			LuaTypes funcType1 = LuaDLL.lua_type(L, 1);

			if (funcType1 != LuaTypes.LUA_TFUNCTION)
			{
				 arg0 = (System.Func<DataTable.LevelupTipsRecord,bool>)ToLua.CheckObject(L, 1, typeof(System.Func<DataTable.LevelupTipsRecord,bool>));
			}
			else
			{
				LuaFunction func = ToLua.ToLuaFunction(L, 1);
				arg0 = DelegateFactory.CreateDelegate(typeof(System.Func<DataTable.LevelupTipsRecord,bool>), func) as System.Func<DataTable.LevelupTipsRecord,bool>;
			}

			DataTable.Table.ForeachLevelupTips(arg0);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetLevelupTips(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 1);
			DataTable.LevelupTipsRecord o = DataTable.Table.GetLevelupTips(arg0);
			ToLua.PushObject(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ForeachStrongType(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			System.Func<DataTable.StrongTypeRecord,bool> arg0 = null;
			LuaTypes funcType1 = LuaDLL.lua_type(L, 1);

			if (funcType1 != LuaTypes.LUA_TFUNCTION)
			{
				 arg0 = (System.Func<DataTable.StrongTypeRecord,bool>)ToLua.CheckObject(L, 1, typeof(System.Func<DataTable.StrongTypeRecord,bool>));
			}
			else
			{
				LuaFunction func = ToLua.ToLuaFunction(L, 1);
				arg0 = DelegateFactory.CreateDelegate(typeof(System.Func<DataTable.StrongTypeRecord,bool>), func) as System.Func<DataTable.StrongTypeRecord,bool>;
			}

			DataTable.Table.ForeachStrongType(arg0);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetStrongType(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 1);
			DataTable.StrongTypeRecord o = DataTable.Table.GetStrongType(arg0);
			ToLua.PushObject(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ForeachStrongData(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			System.Func<DataTable.StrongDataRecord,bool> arg0 = null;
			LuaTypes funcType1 = LuaDLL.lua_type(L, 1);

			if (funcType1 != LuaTypes.LUA_TFUNCTION)
			{
				 arg0 = (System.Func<DataTable.StrongDataRecord,bool>)ToLua.CheckObject(L, 1, typeof(System.Func<DataTable.StrongDataRecord,bool>));
			}
			else
			{
				LuaFunction func = ToLua.ToLuaFunction(L, 1);
				arg0 = DelegateFactory.CreateDelegate(typeof(System.Func<DataTable.StrongDataRecord,bool>), func) as System.Func<DataTable.StrongDataRecord,bool>;
			}

			DataTable.Table.ForeachStrongData(arg0);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetStrongData(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 1);
			DataTable.StrongDataRecord o = DataTable.Table.GetStrongData(arg0);
			ToLua.PushObject(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ForeachMail(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			System.Func<DataTable.MailRecord,bool> arg0 = null;
			LuaTypes funcType1 = LuaDLL.lua_type(L, 1);

			if (funcType1 != LuaTypes.LUA_TFUNCTION)
			{
				 arg0 = (System.Func<DataTable.MailRecord,bool>)ToLua.CheckObject(L, 1, typeof(System.Func<DataTable.MailRecord,bool>));
			}
			else
			{
				LuaFunction func = ToLua.ToLuaFunction(L, 1);
				arg0 = DelegateFactory.CreateDelegate(typeof(System.Func<DataTable.MailRecord,bool>), func) as System.Func<DataTable.MailRecord,bool>;
			}

			DataTable.Table.ForeachMail(arg0);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetMail(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 1);
			DataTable.MailRecord o = DataTable.Table.GetMail(arg0);
			ToLua.PushObject(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ForeachGMCommand(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			System.Func<DataTable.GMCommandRecord,bool> arg0 = null;
			LuaTypes funcType1 = LuaDLL.lua_type(L, 1);

			if (funcType1 != LuaTypes.LUA_TFUNCTION)
			{
				 arg0 = (System.Func<DataTable.GMCommandRecord,bool>)ToLua.CheckObject(L, 1, typeof(System.Func<DataTable.GMCommandRecord,bool>));
			}
			else
			{
				LuaFunction func = ToLua.ToLuaFunction(L, 1);
				arg0 = DelegateFactory.CreateDelegate(typeof(System.Func<DataTable.GMCommandRecord,bool>), func) as System.Func<DataTable.GMCommandRecord,bool>;
			}

			DataTable.Table.ForeachGMCommand(arg0);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetGMCommand(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 1);
			DataTable.GMCommandRecord o = DataTable.Table.GetGMCommand(arg0);
			ToLua.PushObject(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ForeachAuctionType1(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			System.Func<DataTable.AuctionType1Record,bool> arg0 = null;
			LuaTypes funcType1 = LuaDLL.lua_type(L, 1);

			if (funcType1 != LuaTypes.LUA_TFUNCTION)
			{
				 arg0 = (System.Func<DataTable.AuctionType1Record,bool>)ToLua.CheckObject(L, 1, typeof(System.Func<DataTable.AuctionType1Record,bool>));
			}
			else
			{
				LuaFunction func = ToLua.ToLuaFunction(L, 1);
				arg0 = DelegateFactory.CreateDelegate(typeof(System.Func<DataTable.AuctionType1Record,bool>), func) as System.Func<DataTable.AuctionType1Record,bool>;
			}

			DataTable.Table.ForeachAuctionType1(arg0);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetAuctionType1(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 1);
			DataTable.AuctionType1Record o = DataTable.Table.GetAuctionType1(arg0);
			ToLua.PushObject(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ForeachAuctionType2(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			System.Func<DataTable.AuctionType2Record,bool> arg0 = null;
			LuaTypes funcType1 = LuaDLL.lua_type(L, 1);

			if (funcType1 != LuaTypes.LUA_TFUNCTION)
			{
				 arg0 = (System.Func<DataTable.AuctionType2Record,bool>)ToLua.CheckObject(L, 1, typeof(System.Func<DataTable.AuctionType2Record,bool>));
			}
			else
			{
				LuaFunction func = ToLua.ToLuaFunction(L, 1);
				arg0 = DelegateFactory.CreateDelegate(typeof(System.Func<DataTable.AuctionType2Record,bool>), func) as System.Func<DataTable.AuctionType2Record,bool>;
			}

			DataTable.Table.ForeachAuctionType2(arg0);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetAuctionType2(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 1);
			DataTable.AuctionType2Record o = DataTable.Table.GetAuctionType2(arg0);
			ToLua.PushObject(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ForeachAuctionType3(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			System.Func<DataTable.AuctionType3Record,bool> arg0 = null;
			LuaTypes funcType1 = LuaDLL.lua_type(L, 1);

			if (funcType1 != LuaTypes.LUA_TFUNCTION)
			{
				 arg0 = (System.Func<DataTable.AuctionType3Record,bool>)ToLua.CheckObject(L, 1, typeof(System.Func<DataTable.AuctionType3Record,bool>));
			}
			else
			{
				LuaFunction func = ToLua.ToLuaFunction(L, 1);
				arg0 = DelegateFactory.CreateDelegate(typeof(System.Func<DataTable.AuctionType3Record,bool>), func) as System.Func<DataTable.AuctionType3Record,bool>;
			}

			DataTable.Table.ForeachAuctionType3(arg0);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetAuctionType3(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 1);
			DataTable.AuctionType3Record o = DataTable.Table.GetAuctionType3(arg0);
			ToLua.PushObject(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ForeachFirstRecharge(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			System.Func<DataTable.FirstRechargeRecord,bool> arg0 = null;
			LuaTypes funcType1 = LuaDLL.lua_type(L, 1);

			if (funcType1 != LuaTypes.LUA_TFUNCTION)
			{
				 arg0 = (System.Func<DataTable.FirstRechargeRecord,bool>)ToLua.CheckObject(L, 1, typeof(System.Func<DataTable.FirstRechargeRecord,bool>));
			}
			else
			{
				LuaFunction func = ToLua.ToLuaFunction(L, 1);
				arg0 = DelegateFactory.CreateDelegate(typeof(System.Func<DataTable.FirstRechargeRecord,bool>), func) as System.Func<DataTable.FirstRechargeRecord,bool>;
			}

			DataTable.Table.ForeachFirstRecharge(arg0);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetFirstRecharge(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 1);
			DataTable.FirstRechargeRecord o = DataTable.Table.GetFirstRecharge(arg0);
			ToLua.PushObject(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ForeachMieShi(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			System.Func<DataTable.MieShiRecord,bool> arg0 = null;
			LuaTypes funcType1 = LuaDLL.lua_type(L, 1);

			if (funcType1 != LuaTypes.LUA_TFUNCTION)
			{
				 arg0 = (System.Func<DataTable.MieShiRecord,bool>)ToLua.CheckObject(L, 1, typeof(System.Func<DataTable.MieShiRecord,bool>));
			}
			else
			{
				LuaFunction func = ToLua.ToLuaFunction(L, 1);
				arg0 = DelegateFactory.CreateDelegate(typeof(System.Func<DataTable.MieShiRecord,bool>), func) as System.Func<DataTable.MieShiRecord,bool>;
			}

			DataTable.Table.ForeachMieShi(arg0);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetMieShi(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 1);
			DataTable.MieShiRecord o = DataTable.Table.GetMieShi(arg0);
			ToLua.PushObject(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ForeachMieShiPublic(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			System.Func<DataTable.MieShiPublicRecord,bool> arg0 = null;
			LuaTypes funcType1 = LuaDLL.lua_type(L, 1);

			if (funcType1 != LuaTypes.LUA_TFUNCTION)
			{
				 arg0 = (System.Func<DataTable.MieShiPublicRecord,bool>)ToLua.CheckObject(L, 1, typeof(System.Func<DataTable.MieShiPublicRecord,bool>));
			}
			else
			{
				LuaFunction func = ToLua.ToLuaFunction(L, 1);
				arg0 = DelegateFactory.CreateDelegate(typeof(System.Func<DataTable.MieShiPublicRecord,bool>), func) as System.Func<DataTable.MieShiPublicRecord,bool>;
			}

			DataTable.Table.ForeachMieShiPublic(arg0);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetMieShiPublic(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 1);
			DataTable.MieShiPublicRecord o = DataTable.Table.GetMieShiPublic(arg0);
			ToLua.PushObject(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ForeachDefendCityReward(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			System.Func<DataTable.DefendCityRewardRecord,bool> arg0 = null;
			LuaTypes funcType1 = LuaDLL.lua_type(L, 1);

			if (funcType1 != LuaTypes.LUA_TFUNCTION)
			{
				 arg0 = (System.Func<DataTable.DefendCityRewardRecord,bool>)ToLua.CheckObject(L, 1, typeof(System.Func<DataTable.DefendCityRewardRecord,bool>));
			}
			else
			{
				LuaFunction func = ToLua.ToLuaFunction(L, 1);
				arg0 = DelegateFactory.CreateDelegate(typeof(System.Func<DataTable.DefendCityRewardRecord,bool>), func) as System.Func<DataTable.DefendCityRewardRecord,bool>;
			}

			DataTable.Table.ForeachDefendCityReward(arg0);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetDefendCityReward(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 1);
			DataTable.DefendCityRewardRecord o = DataTable.Table.GetDefendCityReward(arg0);
			ToLua.PushObject(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ForeachDefendCityDevoteReward(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			System.Func<DataTable.DefendCityDevoteRewardRecord,bool> arg0 = null;
			LuaTypes funcType1 = LuaDLL.lua_type(L, 1);

			if (funcType1 != LuaTypes.LUA_TFUNCTION)
			{
				 arg0 = (System.Func<DataTable.DefendCityDevoteRewardRecord,bool>)ToLua.CheckObject(L, 1, typeof(System.Func<DataTable.DefendCityDevoteRewardRecord,bool>));
			}
			else
			{
				LuaFunction func = ToLua.ToLuaFunction(L, 1);
				arg0 = DelegateFactory.CreateDelegate(typeof(System.Func<DataTable.DefendCityDevoteRewardRecord,bool>), func) as System.Func<DataTable.DefendCityDevoteRewardRecord,bool>;
			}

			DataTable.Table.ForeachDefendCityDevoteReward(arg0);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetDefendCityDevoteReward(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 1);
			DataTable.DefendCityDevoteRewardRecord o = DataTable.Table.GetDefendCityDevoteReward(arg0);
			ToLua.PushObject(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ForeachBatteryLevel(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			System.Func<DataTable.BatteryLevelRecord,bool> arg0 = null;
			LuaTypes funcType1 = LuaDLL.lua_type(L, 1);

			if (funcType1 != LuaTypes.LUA_TFUNCTION)
			{
				 arg0 = (System.Func<DataTable.BatteryLevelRecord,bool>)ToLua.CheckObject(L, 1, typeof(System.Func<DataTable.BatteryLevelRecord,bool>));
			}
			else
			{
				LuaFunction func = ToLua.ToLuaFunction(L, 1);
				arg0 = DelegateFactory.CreateDelegate(typeof(System.Func<DataTable.BatteryLevelRecord,bool>), func) as System.Func<DataTable.BatteryLevelRecord,bool>;
			}

			DataTable.Table.ForeachBatteryLevel(arg0);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetBatteryLevel(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 1);
			DataTable.BatteryLevelRecord o = DataTable.Table.GetBatteryLevel(arg0);
			ToLua.PushObject(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ForeachBatteryBase(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			System.Func<DataTable.BatteryBaseRecord,bool> arg0 = null;
			LuaTypes funcType1 = LuaDLL.lua_type(L, 1);

			if (funcType1 != LuaTypes.LUA_TFUNCTION)
			{
				 arg0 = (System.Func<DataTable.BatteryBaseRecord,bool>)ToLua.CheckObject(L, 1, typeof(System.Func<DataTable.BatteryBaseRecord,bool>));
			}
			else
			{
				LuaFunction func = ToLua.ToLuaFunction(L, 1);
				arg0 = DelegateFactory.CreateDelegate(typeof(System.Func<DataTable.BatteryBaseRecord,bool>), func) as System.Func<DataTable.BatteryBaseRecord,bool>;
			}

			DataTable.Table.ForeachBatteryBase(arg0);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetBatteryBase(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 1);
			DataTable.BatteryBaseRecord o = DataTable.Table.GetBatteryBase(arg0);
			ToLua.PushObject(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ForeachMieShiFighting(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			System.Func<DataTable.MieShiFightingRecord,bool> arg0 = null;
			LuaTypes funcType1 = LuaDLL.lua_type(L, 1);

			if (funcType1 != LuaTypes.LUA_TFUNCTION)
			{
				 arg0 = (System.Func<DataTable.MieShiFightingRecord,bool>)ToLua.CheckObject(L, 1, typeof(System.Func<DataTable.MieShiFightingRecord,bool>));
			}
			else
			{
				LuaFunction func = ToLua.ToLuaFunction(L, 1);
				arg0 = DelegateFactory.CreateDelegate(typeof(System.Func<DataTable.MieShiFightingRecord,bool>), func) as System.Func<DataTable.MieShiFightingRecord,bool>;
			}

			DataTable.Table.ForeachMieShiFighting(arg0);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetMieShiFighting(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 1);
			DataTable.MieShiFightingRecord o = DataTable.Table.GetMieShiFighting(arg0);
			ToLua.PushObject(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ForeachFunctionOn(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			System.Func<DataTable.FunctionOnRecord,bool> arg0 = null;
			LuaTypes funcType1 = LuaDLL.lua_type(L, 1);

			if (funcType1 != LuaTypes.LUA_TFUNCTION)
			{
				 arg0 = (System.Func<DataTable.FunctionOnRecord,bool>)ToLua.CheckObject(L, 1, typeof(System.Func<DataTable.FunctionOnRecord,bool>));
			}
			else
			{
				LuaFunction func = ToLua.ToLuaFunction(L, 1);
				arg0 = DelegateFactory.CreateDelegate(typeof(System.Func<DataTable.FunctionOnRecord,bool>), func) as System.Func<DataTable.FunctionOnRecord,bool>;
			}

			DataTable.Table.ForeachFunctionOn(arg0);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetFunctionOn(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 1);
			DataTable.FunctionOnRecord o = DataTable.Table.GetFunctionOn(arg0);
			ToLua.PushObject(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ForeachBangBuff(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			System.Func<DataTable.BangBuffRecord,bool> arg0 = null;
			LuaTypes funcType1 = LuaDLL.lua_type(L, 1);

			if (funcType1 != LuaTypes.LUA_TFUNCTION)
			{
				 arg0 = (System.Func<DataTable.BangBuffRecord,bool>)ToLua.CheckObject(L, 1, typeof(System.Func<DataTable.BangBuffRecord,bool>));
			}
			else
			{
				LuaFunction func = ToLua.ToLuaFunction(L, 1);
				arg0 = DelegateFactory.CreateDelegate(typeof(System.Func<DataTable.BangBuffRecord,bool>), func) as System.Func<DataTable.BangBuffRecord,bool>;
			}

			DataTable.Table.ForeachBangBuff(arg0);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetBangBuff(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 1);
			DataTable.BangBuffRecord o = DataTable.Table.GetBangBuff(arg0);
			ToLua.PushObject(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ForeachBuffGroup(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			System.Func<DataTable.BuffGroupRecord,bool> arg0 = null;
			LuaTypes funcType1 = LuaDLL.lua_type(L, 1);

			if (funcType1 != LuaTypes.LUA_TFUNCTION)
			{
				 arg0 = (System.Func<DataTable.BuffGroupRecord,bool>)ToLua.CheckObject(L, 1, typeof(System.Func<DataTable.BuffGroupRecord,bool>));
			}
			else
			{
				LuaFunction func = ToLua.ToLuaFunction(L, 1);
				arg0 = DelegateFactory.CreateDelegate(typeof(System.Func<DataTable.BuffGroupRecord,bool>), func) as System.Func<DataTable.BuffGroupRecord,bool>;
			}

			DataTable.Table.ForeachBuffGroup(arg0);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetBuffGroup(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 1);
			DataTable.BuffGroupRecord o = DataTable.Table.GetBuffGroup(arg0);
			ToLua.PushObject(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ForeachMieshiTowerReward(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			System.Func<DataTable.MieshiTowerRewardRecord,bool> arg0 = null;
			LuaTypes funcType1 = LuaDLL.lua_type(L, 1);

			if (funcType1 != LuaTypes.LUA_TFUNCTION)
			{
				 arg0 = (System.Func<DataTable.MieshiTowerRewardRecord,bool>)ToLua.CheckObject(L, 1, typeof(System.Func<DataTable.MieshiTowerRewardRecord,bool>));
			}
			else
			{
				LuaFunction func = ToLua.ToLuaFunction(L, 1);
				arg0 = DelegateFactory.CreateDelegate(typeof(System.Func<DataTable.MieshiTowerRewardRecord,bool>), func) as System.Func<DataTable.MieshiTowerRewardRecord,bool>;
			}

			DataTable.Table.ForeachMieshiTowerReward(arg0);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetMieshiTowerReward(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 1);
			DataTable.MieshiTowerRewardRecord o = DataTable.Table.GetMieshiTowerReward(arg0);
			ToLua.PushObject(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}
}

